[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Kompetenzzentrum Wasser Berlin gGmbH (KWB) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/groundwater.html","id":"do-your-own-analysis","dir":"Articles","previous_headings":"","what":"Do Your Own Analysis!","title":"Groundwater","text":"Download JSON files scraped prepared day 5 .m. UTC re-use R. following data available: Data availability stations_crosstable.json: available parameters per station (see wasserportal::get_overview_options() available options). Note: includes also surface monitoring stations! Master Data stations_gwl_master.json: GW level stations stations_gwq_master.json: GW quality stations Measurements stations_gwl_data.json: GW level measurements stations stations_gwq_master.json: GW quality measurements available parameters stations Please find example merging information single data frame:","code":"library(wasserportal)  stations_crosstable <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_crosstable.json\")  str(stations_crosstable) #> 'data.frame':    1000 obs. of  11 variables: #>  $ Messstellennummer: chr  \"5865900\" \"5827103\" \"5865300\" \"5819900\" ... #>  $ Messstellenname  : chr  \"Allee der Kosmonauten\" \"Allendestraße\" \"Am Bahndamm\" \"Am Freibad\" ... #>  $ ws               : chr  \"x\" \"x\" \"x\" \"x\" ... #>  $ df               : chr  NA \"x\" \"x\" NA ... #>  $ wt               : chr  NA NA \"x\" NA ... #>  $ lf               : chr  NA NA NA NA ... #>  $ ph               : chr  NA NA NA NA ... #>  $ og               : chr  NA NA NA NA ... #>  $ os               : chr  NA NA NA NA ... #>  $ gws              : chr  NA NA NA NA ... #>  $ gwq              : chr  NA NA NA NA ... library(wasserportal)  ### GW levels gwl_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwl_master.json\") gwl_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwl_data.json\") %>%     dplyr::mutate(Messstellennummer = as.character(Messstellennummer)) %>%    dplyr::left_join(gwl_master, by = c(\"Messstellennummer\" = \"Nummer\"))  str(gwl_data) #> 'data.frame':    47745 obs. of  18 variables: #>  $ Messstellennummer             : chr  \"1\" \"1\" \"1\" \"1\" ... #>  $ Datum                         : chr  \"1970-01-02\" \"1970-01-16\" \"1970-02-02\" \"1970-02-16\" ... #>  $ Parameter                     : chr  \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" ... #>  $ Einheit                       : chr  \"m ü. NHN\" \"m ü. NHN\" \"m ü. NHN\" \"m ü. NHN\" ... #>  $ Messwert                      : num  35.2 35.2 35.2 35.2 35.2 ... #>  $ Bezirk                        : chr  \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>  $ Betreiber                     : chr  \"Senat\" \"Senat\" \"Senat\" \"Senat\" ... #>  $ Auspraegung                   : chr  \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" ... #>  $ Grundwasserleiter             : chr  \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>  $ Gelaendeoberkante_GOK_m_ue_NHN: chr  \"49.20\" \"49.20\" \"49.20\" \"49.20\" ... #>  $ Rohroberkante_m_ue_NHN        : chr  \"49.49\" \"49.49\" \"49.49\" \"49.49\" ... #>  $ Filteroberkante_m_u_GOK       : chr  \"37.34\" \"37.34\" \"37.34\" \"37.34\" ... #>  $ Filterunterkante_m_u_GOK      : chr  \"39.34\" \"39.34\" \"39.34\" \"39.34\" ... #>  $ Rechtswert_UTM_33_N           : chr  \"384415.50\" \"384415.50\" \"384415.50\" \"384415.50\" ... #>  $ Hochwert_UTM_33_N             : chr  \"5831712.30\" \"5831712.30\" \"5831712.30\" \"5831712.30\" ... #>  $ Name                          : chr  NA NA NA NA ... #>  $ Gewaesser                     : chr  NA NA NA NA ... #>  $ Flusskilometer                : chr  NA NA NA NA ...  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%     dplyr::mutate(Messstellennummer = as.character(Messstellennummer)) %>%    dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  str(gwq_data) #> 'data.frame':    677720 obs. of  15 variables: #>  $ Messstellennummer             : chr  \"3\" \"3\" \"3\" \"3\" ... #>  $ Datum                         : chr  \"2020-07-01\" \"2020-07-01\" \"2020-07-01\" \"2020-07-01\" ... #>  $ Parameter                     : chr  \"Temperatur (Luft)\" \"pH-Wert (Feld)\" \"Temperatur (Wasser)\" \"Leitfähigkeit 25°C vor Ort\" ... #>  $ Einheit                       : chr  \"grd Celsius\" \"ohne Einheit\" \"grd C\" \"µS/cm\" ... #>  $ Messwert                      : num  19 7.1 12.2 939 4.91 5 6 0.25 453 0 ... #>  $ Bezirk                        : chr  \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>  $ Betreiber                     : chr  \"Senat\" \"Senat\" \"Senat\" \"Senat\" ... #>  $ Auspraegung                   : chr  \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" ... #>  $ Grundwasserleiter             : chr  \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>  $ Gelaendeoberkante_GOK_m_ue_NHN: chr  \"37.87\" \"37.87\" \"37.87\" \"37.87\" ... #>  $ Rohroberkante_m_ue_NHN        : chr  \"38.65\" \"38.65\" \"38.65\" \"38.65\" ... #>  $ Filteroberkante_m_u_GOK       : chr  \"12.27\" \"12.27\" \"12.27\" \"12.27\" ... #>  $ Filterunterkante_m_u_GOK      : chr  \"13.27\" \"13.27\" \"13.27\" \"13.27\" ... #>  $ Rechtswert_UTM_33_N           : chr  \"385789.30\" \"385789.30\" \"385789.30\" \"385789.30\" ... #>  $ Hochwert_UTM_33_N             : chr  \"5830677.30\" \"5830677.30\" \"5830677.30\" \"5830677.30\" ...  ### Merge GW level and quality into one data frame gw_data <- dplyr::bind_rows(gwl_data, gwq_data)  str(gw_data) #> 'data.frame':    725465 obs. of  18 variables: #>  $ Messstellennummer             : chr  \"1\" \"1\" \"1\" \"1\" ... #>  $ Datum                         : chr  \"1970-01-02\" \"1970-01-16\" \"1970-02-02\" \"1970-02-16\" ... #>  $ Parameter                     : chr  \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" ... #>  $ Einheit                       : chr  \"m ü. NHN\" \"m ü. NHN\" \"m ü. NHN\" \"m ü. NHN\" ... #>  $ Messwert                      : num  35.2 35.2 35.2 35.2 35.2 ... #>  $ Bezirk                        : chr  \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>  $ Betreiber                     : chr  \"Senat\" \"Senat\" \"Senat\" \"Senat\" ... #>  $ Auspraegung                   : chr  \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" ... #>  $ Grundwasserleiter             : chr  \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>  $ Gelaendeoberkante_GOK_m_ue_NHN: chr  \"49.20\" \"49.20\" \"49.20\" \"49.20\" ... #>  $ Rohroberkante_m_ue_NHN        : chr  \"49.49\" \"49.49\" \"49.49\" \"49.49\" ... #>  $ Filteroberkante_m_u_GOK       : chr  \"37.34\" \"37.34\" \"37.34\" \"37.34\" ... #>  $ Filterunterkante_m_u_GOK      : chr  \"39.34\" \"39.34\" \"39.34\" \"39.34\" ... #>  $ Rechtswert_UTM_33_N           : chr  \"384415.50\" \"384415.50\" \"384415.50\" \"384415.50\" ... #>  $ Hochwert_UTM_33_N             : chr  \"5831712.30\" \"5831712.30\" \"5831712.30\" \"5831712.30\" ... #>  $ Name                          : chr  NA NA NA NA ... #>  $ Gewaesser                     : chr  NA NA NA NA ... #>  $ Flusskilometer                : chr  NA NA NA NA ..."},{"path":[]},{"path":"/articles/groundwater.html","id":"gw-quality","dir":"Articles","previous_headings":"Data Availability","what":"GW Quality","title":"Groundwater","text":"","code":"gwq_data_by_parameter <- gwq_data %>%   dplyr::select(.data$Messstellennummer,                 .data$Parameter,                 .data$Datum,                 .data$Messwert) %>%   dplyr::group_by(.data$Parameter) %>%   dplyr::summarise(date_min = min(.data$Datum),                    date_max = max(.data$Datum),                    n = dplyr::n()) %>%   dplyr::arrange(dplyr::desc(.data$n))  DT::datatable(gwq_data_by_parameter, filter = \"top\") gwq_data_by_parameter_and_station <-  gwq_data %>%   dplyr::select(.data$Messstellennummer,                 .data$Parameter,                 .data$Datum,                 .data$Messwert) %>%   dplyr::group_by(.data$Parameter,                   .data$Messstellennummer) %>%   dplyr::summarise(date_min = min(.data$Datum),                    date_max = max(.data$Datum),                    n = dplyr::n()) %>%   dplyr::arrange(dplyr::desc(.data$n)) #> `summarise()` has grouped output by 'Parameter'. You can override using the #> `.groups` argument.  DT::datatable(gwq_data_by_parameter_and_station, filter = \"top\") #> Warning in instance$preRenderHook(instance): It seems your data is too big #> for client-side DataTables. You may consider server-side processing: https:// #> rstudio.github.io/DT/server.html"},{"path":[]},{"path":"/articles/groundwater.html","id":"gw-quality-1","dir":"Articles","previous_headings":"Export","what":"GW Quality","title":"Groundwater","text":"","code":"gwq_data_list <- list(gwq_by_parameter = gwq_data_by_parameter,                               gwq_by_parameter_and_station = gwq_data_by_parameter_and_station,                               gwq_data = gwq_data,                               gwq_master = gwq_master)  openxlsx::write.xlsx(x = gwq_data_list,                      file = \"wasserportal_gwq_data.xlsx\",                      overwrite = TRUE)"},{"path":"/articles/reach.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"Reach","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package install.packages('wasserportal')"},{"path":"/articles/reach.html","id":"get-gw-quality-from-wasserportal","dir":"Articles","previous_headings":"","what":"Get GW Quality from Wasserportal","title":"Reach","text":"","code":"# Load R package library(wasserportal)  categories <- wasserportal::readPackageFile(file = \"categories.csv\")   cas_reach <- wasserportal::readPackageFile(file = \"cas_reach.csv\") %>%    dplyr::left_join(categories) #> Joining, by = \"category\"  cas_wasserportal <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\") %>%     dplyr::inner_join(cas_reach, by = \"cas_number\")   ### Remove duplicated Wasserportal substances (same CAS number but different, names!) cas_wasserportal_clean <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\") %>%     dplyr::count(cas_number) %>%   dplyr::select(-n) %>%    dplyr::filter(!is.na(cas_number)) %>%    dplyr::inner_join(cas_reach, by = \"cas_number\")    ### For details see: ### https://kwb-r.github.io/wasserportal/articles/groundwater.html ### JSON files (see below) are build every day automatically at 5a.m. with ### continious integration, for build status, see here: ### https://github.com/KWB-R/wasserportal/actions/workflows/pkgdown.yaml  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%   #dplyr::filter(Parameter %in% cas_wasserportal$Parameter) %>%    dplyr::inner_join(cas_wasserportal, by = \"Parameter\") %>%   dplyr::mutate(Messstellennummer = as.character(Messstellennummer), ## CensorCode: either \"below\" (less than) for concentration below detection limit  ## (value is detection limit) or \"nc\" (not censored) for concentration above  ## detection limit                 CensorCode = dplyr::case_when(Messwert <= 0 ~ \"lt\",                                               TRUE ~ \"nc\"),                 Messwert = dplyr::case_when(Messwert < 0 ~ abs(Messwert), ### Only two decimal numbers are exported by Wasserportal, but some sustances  ### have lower detection limit, e.g. 0.002 which results in -0.00 export, thus  ### the dummy detection limit 0.00999 was introduced (until fixed by Senate:  ### Christoph will sent a email to Matthias Schröder)                                             Messwert == 0 ~ 0.009999,                                              TRUE ~ Messwert)) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  gwq_subs <- gwq_data %>%     dplyr::count(.data$cas_number, .data$CensorCode) %>%    tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%    dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                  nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                  percent_nc = 100*nc/n_total) %>%    dplyr::rename(n_lt = lt,                  n_nc = nc) %>%    dplyr::left_join(cas_reach[, c(\"category\", \"category_name\", \"name\", \"cas_number\")]) %>%   dplyr::rename(name_uba = name) %>%    dplyr::select(category, category_name, name_uba, cas_number,n_lt, n_nc, n_total, percent_nc) #> Joining, by = \"cas_number\"   readr::write_csv(gwq_subs, \"gwq_subs.csv\")  DT::datatable(gwq_subs, filter = \"top\", rownames = FALSE)"},{"path":[]},{"path":"/articles/reach.html","id":"total","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"Total","title":"Reach","text":"","code":"g <- cas_reach %>%   dplyr::mutate(source = sprintf(\"UBA (n = %d)\", nrow(cas_reach))) %>%    dplyr::bind_rows(cas_wasserportal_clean %>%                     dplyr::mutate(source = sprintf(\"Wasserportal (n = %d)\",                                                    nrow(cas_wasserportal_clean)))) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = forcats::as_factor(.data$category),                                           fill = .data$source,                                          col = .data$source)) +    ggplot2::geom_histogram(stat = \"count\", alpha = 0.5) +   ggplot2::geom_text(stat=\"count\", ggplot2::aes(label=..count..), vjust=-0.5, position=\"stack\") +   ggplot2::scale_x_discrete() +   ggplot2::theme_bw() +   ggplot2::theme(legend.position=\"top\") +   ggplot2::labs(y = \"Number of Substances\", x = \"Category\") #> Warning: Ignoring unknown parameters: binwidth, bins, pad    g ggplot2::ggsave(filename = \"wasserportal_number-of-reach-substances.jpeg\",                    plot = g,                   width = 14,                    height = 11,                   units = \"cm\")    #plotly::ggplotly(g)"},{"path":"/articles/reach.html","id":"by-station","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"By Station","title":"Reach","text":"","code":"by_stations <- samples_by_para_and_station_n %>%    dplyr::select(.data$name_uba, .data$n_stations_sampled) #> Adding missing grouping variables: `category`, `category_name`  wasserportal_substances <- samples_by_para_and_station_n %>%    dplyr::arrange(.data$category,                   dplyr::desc(.data$n_total),                   dplyr::desc(.data$n_stations_sampled),                   .data$name_uba) %>%    dplyr::select(.data$category,                  .data$name_uba,                 .data$cas_number,                  .data$n_total,                 .data$n_stations_sampled) #> Adding missing grouping variables: `category_name`   DT::datatable(wasserportal_substances, filter = \"top\", rownames = FALSE) wasserportal_substances_plot <- wasserportal_substances %>%   dplyr::mutate(label = sprintf(\"%s (%s, stations: %d)\",                                  .data$name_uba,                                  .data$cas_number,                                  .data$n_stations_sampled),                 category = forcats::as_factor(.data$category))  wasserportal_substances_plot$label <- factor(wasserportal_substances_plot$label,                                               levels = wasserportal_substances_plot$label) wasserportal_substances_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$n_total,                                 y = .data$label,                                 label = .data$n_total,                                fill = .data$category)) +   ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 2, nudge_x = -1) +   ggplot2::theme_bw() +   ggplot2::labs(subtitle = sprintf(\"%d Wasserportal substances (listed in UBA table)\",                                 nrow(wasserportal_substances_plot)),                 y = \"\",                  x = \"Number of Samples\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::mutate(label = sprintf(\"Cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number),                 category = forcats::as_factor(.data$category))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$percent_samples_abovedetection,                                 y = forcats::fct_reorder(.data$label, .data$percent_samples_abovedetection, .desc = TRUE),                                label = sprintf(\"%2.2f %% (n_samples = %d, n_stations = %d)\", .data$percent_samples_abovedetection,.data$n_total, .data$n_stations_sampled),                                fill = .data$category)) +                             ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 1.8, hjust = -0.01) +   ggplot2::xlim(c(0,40)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = sprintf(\"%d / %d substances (>= 1 value above detection limit)\",                                 sum(gwq_subs_plot$n_abovedetection > 0),                                    nrow(gwq_subs_plot)),                                          y = \"\",                  x = \"Percent of Samples above Detection Limit (%)\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") n_cat <- samples_by_category_and_station %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_samples_abovedetection = sum(n_nc),                    n_samples_total = sum(n_total),                    n_samples_percent_abovedetection = 100*sum(n_nc)/sum(n_total)) %>%    dplyr::arrange(dplyr::desc(.data$n_samples_abovedetection))  g1 <- samples_by_category_and_station %>%    dplyr::left_join(n_cat) %>%    dplyr::filter(n_nc > 0)  %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_nc,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),                                label = .data$n_nc,                                fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::geom_text(mapping = ggplot2::aes(     x = .data$n_samples_abovedetection,     y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),     label = sprintf(\"%3.1f %% (n_samples = %d)\", .data$n_samples_percent_abovedetection, .data$n_samples_total)),                      inherit.aes = FALSE,                      size = 1.8,                       position = ggplot2::position_nudge(x = 20),     fontface = \"bold\") +   ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Samples Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") n_cat <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_paras_abovedetection_total = sum(n_paras_abovedetection)) %>%    dplyr::arrange(dplyr::desc(.data$n_paras_abovedetection_total))  g1 <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::left_join(n_cat) %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_paras_abovedetection,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_paras_abovedetection_total, .desc = TRUE),                              label = .data$n_paras_abovedetection,                              fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +    #ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Parameters Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_paras-by-station_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::mutate(n_stations_belowdetection = .data$n_stations_sampled - .data$n_stations_abovedetection,                  n_stations_notsampled = .data$n_stations_total - .data$n_stations_sampled) %>%    dplyr::select(\"category\",                 \"category_name\",                 \"name_uba\",                 \"cas_number\",                 \"n_stations_abovedetection\",                  \"n_stations_belowdetection\",                 \"n_stations_notsampled\") %>%    tidyr::pivot_longer(cols = tidyselect::starts_with(\"n_stations\"),                       names_to = \"station_type\",                       values_to = \"station_value\") %>%    dplyr::filter(.data$station_value > 0) %>%    dplyr::mutate(station_type = stringr::str_remove(.data$station_type,                                                     \"n_stations_\")) %>%   dplyr::mutate(station_type = kwb.utils::multiSubstitute(.data$station_type,                                                           list(\"abovedetection\" = \"above detection\",                                                                \"belowdetection\" = \"below detection\",                                                                 \"notsampled\" = \"not sampled\"))) %>%    dplyr::mutate(label = sprintf(\"Cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number),                 category = forcats::as_factor(.data$category))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$station_value,                                 y = .data$label,                                label = .data$station_value,                                fill = forcats::fct_rev(.data$station_type))) +   ggplot2::scale_fill_manual(values = c(\"lightgrey\", \"darkgreen\", \"red\")) +    ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col(alpha = 0.75) +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(title = \"Groundwater Quality by Station\",                  fill = \"\",                  caption = \"above detection: number of stations with at least 1 sample above detection limit\\nbelow detection: number of station with all samples below detection limit\\nnot sampled: number of stations not sampled\",                 subtitle = sprintf(\"for %d GW quality stations\",                                    length(unique(gwq_master$Nummer))),                 y = \"\",                  x = \"Number of Monitoring Stations\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_by-monitoring-station.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") stations_abovedetection <- samples_by_para_and_station %>%    dplyr::filter(.data$n_nc > 0) %>%    dplyr::select(cas_number, Messstellennummer, n_nc, n_lt) %>%    dplyr::arrange(.data$n_nc)  g1_data <- gwq_data %>%    dplyr::right_join(y = stations_abovedetection,                      by = c(\"cas_number\", \"Messstellennummer\")) %>%    dplyr::mutate(Datum = as.Date(Datum),                  CensorCode = kwb.utils::multiSubstitute(.data$CensorCode,                                                           list(\"nc\" = \"above detection\",                                                                 \"lt\" = \"below detection\")),                  label = sprintf(\"%s (%s): %s (n_above = %d, n_below = %d)\",                                  .data$name,                                  .data$cas_number,                                 .data$Messstellennummer,                                 .data$n_nc,                                 .data$n_lt))   labels <- unique(g1_data$label)  plot_timeseries <- function(sel_label) {   g1_data %>%    dplyr::filter(.data$label == sel_label) %>%    dplyr::arrange(.data$n_nc, .data$label, .data$Datum) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = .data$Datum,                                           y = .data$Messwert,                                          col = .data$CensorCode                                          )) +   ggplot2::scale_color_manual(values = c(\"red\", \"darkgreen\")) +   ggplot2::geom_point() +   ggplot2::theme_bw() +   ggplot2::labs(title = sel_label) }  g_plots <- lapply(labels, function(sel_label) {plot_timeseries(sel_label)})  pdff <- \"wasserportal_reach-substances_timeseries.pdf\" mp <- gridExtra::marrangeGrob(g_plots, nrow=1, ncol=1) ggplot2::ggsave(pdff,                 plot = mp,                  width = 30,                 height = 20,                  units = \"cm\") n_samples <- samples %>%    dplyr::count(.data$name_uba)  samples %>%   dplyr::left_join(n_samples) %>%    dplyr::filter(CensorCode == \"nc\") %>%    dplyr::mutate(label = sprintf(\"%s (n=%d)\",                                  .data$name_uba,                                  .data$n),                 Messwert = dplyr::if_else(.data$Messwert == \"\\u00B5g/l\",                                           true = .data$Messwert / 1000,                                           false = .data$Messwert),                 Einheit = dplyr::if_else(.data$Einheit == \"\\u00B5g/l\",                                           true = \"mg/l\",                                           false = .data$Einheit),                 category = as.factor(category)) %>%    ggplot2::ggplot(mapping = ggplot2::aes_string(y = \"label\",                                                  x = \"Messwert\",                                                 fill = \"category\" )) +   ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +     ggplot2::scale_x_log10() +   ggplot2::geom_boxplot() +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Substance\",                  x = \"Concentration (mg/l)\") +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") #> Joining, by = \"name_uba\""},{"path":[]},{"path":"/articles/tutorial.html","id":"general-overview","dir":"Articles","previous_headings":"Stations","what":"General overview","title":"Tutorial","text":"crosstable data checking data availabilty monitoring stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_crosstable.json","code":"# install.packages(\"remotes\") # remotes::install_github(\"kwb-r/wasserportal\", upgrade = \"never\", force = TRUE) library(wasserportal) overview_options <- wasserportal::get_overview_options() str(overview_options) #> List of 2 #>  $ surface_water:List of 7 #>   ..$ water_level         : chr \"ws\" #>   ..$ flow                : chr \"df\" #>   ..$ level               : chr \"wt\" #>   ..$ conductivity        : chr \"lf\" #>   ..$ ph                  : chr \"ph\" #>   ..$ oxygen_concentration: chr \"og\" #>   ..$ oxygen_saturation   : chr \"os\" #>  $ groundwater  :List of 2 #>   ..$ level  : chr \"gws\" #>   ..$ quality: chr \"gwq\"  system.time(stations <- wasserportal::get_stations()) #> Importing 9 station overviews from Wasserportal Berlin ... ok. (8.88s) #>    user  system elapsed  #>   0.062   0.012   9.200  str(stations) #> List of 3 #>  $ overview_list:List of 9 #>   ..$ surface_water.water_level         : tibble [72 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: int [1:72] 5865900 5827103 5865300 5819900 5864801 5861101 5800107 5800317 5867003 5867401 ... #>   .. ..$ Messstellenname  : chr [1:72] \"Allee der Kosmonauten\" \"Allendestraße\" \"Am Bahndamm\" \"Am Freibad\" ... #>   .. ..$ Gewaesser        : chr [1:72] \"M.-H.-Grenzgr.\" \"Müggelspree\" \"Wuhle\" \"Tegeler Fließ\" ... #>   .. ..$ Betreiber        : chr [1:72] \"SenUVK\" \"SenUVK\" \"SenUVK\" \"SenUVK\" ... #>   .. ..$ Datum            : chr [1:72] \"15.02.2022 14:15\" \"15.02.2022 14:00\" \"15.02.2022 00:00\" \"15.02.2022 14:15\" ... #>   .. ..$ Wasserstand      : int [1:72] 5 49 94 95 4 25 63 76 51 46 ... #>   .. ..$ Einheit          : chr [1:72] \"cm\" \"cm\" \"cm\" \"cm\" ... #>   .. ..$ Ganglinien       : logi [1:72] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:72] \"niedrig\" \"niedrig\" \"niedrig\" \"normal\" ... #>   ..$ surface_water.flow                : tibble [16 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: int [1:16] 5827103 5865300 5864801 5867401 5867900 5827101 5870100 5826701 5862811 5827700 ... #>   .. ..$ Messstellenname  : chr [1:16] \"Allendestraße\" \"Am Bahndamm\" \"Am Kienberg\" \"Bürgerpark\" ... #>   .. ..$ Gewaesser        : chr [1:16] \"Müggelspree\" \"Wuhle\" \"Hellersdorfer Graben\" \"Panke\" ... #>   .. ..$ Betreiber        : chr [1:16] \"SenUVK\" \"SenUVK\" \"SenUVK\" \"SenUVK\" ... #>   .. ..$ Datum            : chr [1:16] \"15.02.2022 14:00\" \"15.02.2022 00:00\" \"15.02.2022 10:00\" \"15.02.2022 14:00\" ... #>   .. ..$ Durchfluss       : num [1:16] 5.96 0.217 0.003 1.5 0.191 6.07 5.65 9.4 15.1 38.8 ... #>   .. ..$ Einheit          : chr [1:16] \"m³/s\" \"m³/s\" \"m³/s\" \"m³/s\" ... #>   .. ..$ Ganglinie        : logi [1:16] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:16] \"keine\" \"niedrig\" \"keine\" \"normal\" ... #>   ..$ surface_water.level               : tibble [61 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:61] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:61] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:61] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:61] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:61] \"26.10.2021 10:15\" \"26.10.2021 10:45\" \"26.10.2021 11:00\" \"26.10.2021 12:15\" ... #>   .. ..$ Wassertemperatur : chr [1:61] \"10.44\" \"10.13\" \"10.22\" \"9.96\" ... #>   .. ..$ Einheit          : chr [1:61] \"°C\" \"°C\" \"°C\" \"°C\" ... #>   .. ..$ Ganglinie        : logi [1:61] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:61] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   ..$ surface_water.conductivity        : tibble [16 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:16] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:16] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:16] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:16] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:16] \"26.10.2021 10:15\" \"26.10.2021 10:45\" \"26.10.2021 11:00\" \"26.10.2021 12:15\" ... #>   .. ..$ Leitfaehigkeit   : chr [1:16] \"856\" \"842\" \"827\" \"831\" ... #>   .. ..$ Einheit          : chr [1:16] \"µS/cm\" \"µS/cm\" \"µS/cm\" \"µS/cm\" ... #>   .. ..$ Ganglinie        : logi [1:16] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:16] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   ..$ surface_water.ph                  : tibble [16 × 8] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:16] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:16] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:16] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:16] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:16] \"26.10.2021 10:15\" \"26.10.2021 10:45\" \"26.10.2021 11:00\" \"26.10.2021 12:15\" ... #>   .. ..$ pHWert           : chr [1:16] \"7.69\" \"7.44\" \"7.56\" \"7.39\" ... #>   .. ..$ Ganglinie        : logi [1:16] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:16] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   ..$ surface_water.oxygen_concentration: tibble [16 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:16] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:16] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:16] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:16] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:16] \"26.10.2021 10:15\" \"26.10.2021 10:45\" \"26.10.2021 11:00\" \"26.10.2021 12:15\" ... #>   .. ..$ Sauerstoffgehalt : chr [1:16] \"8.83\" \"7.55\" \"8.41\" \"6.67\" ... #>   .. ..$ Einheit          : chr [1:16] \"mg/l\" \"mg/l\" \"mg/l\" \"mg/l\" ... #>   .. ..$ Ganglinie        : logi [1:16] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:16] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   ..$ surface_water.oxygen_saturation   : tibble [16 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:16] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:16] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:16] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:16] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:16] \"26.10.2021 10:15\" \"26.10.2021 10:45\" \"26.10.2021 11:00\" \"26.10.2021 12:15\" ... #>   .. ..$ Parameterwert    : chr [1:16] \"79.28\" \"67.29\" \"75.12\" \"59.21\" ... #>   .. ..$ Einheit          : chr [1:16] \"%\" \"%\" \"%\" \"%\" ... #>   .. ..$ Ganglinie        : logi [1:16] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:16] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   ..$ groundwater.level                 : tibble [872 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer        : int [1:872] 1 2 3 4 9 21 24 25 26 30 ... #>   .. ..$ Bezirk                   : chr [1:872] \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>   .. ..$ Auspraegung              : chr [1:872] \"GW-Stand\" \"GW-Stand\" \"GW-Stand + GW-Güte\" \"GW-Stand\" ... #>   .. ..$ Grundwasserleiter        : chr [1:872] \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>   .. ..$ Grundwasserspannung      : chr [1:872] \"gespannt\" \"ungespannt\" \"gespannt\" \"ungespannt\" ... #>   .. ..$ Datum                    : chr [1:872] \"02.02.2022\" \"02.02.2022\" \"02.02.2022\" \"02.02.2022\" ... #>   .. ..$ Grundwasserstand_m_ue_NHN: num [1:872] 33.8 35.3 33.8 32.6 37.4 ... #>   .. ..$ Flur_abstand_m_u_GOK     : chr [1:872] \"keine Angabe\" \"2.36\" \"keine Angabe\" \"7.27\" ... #>   .. ..$ Ganglinie                : logi [1:872] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation           : chr [1:872] \"extrem niedrig\" \"normal\" \"normal\" \"normal\" ... #>   ..$ groundwater.quality               : tibble [203 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: int [1:203] 3 145 149 344 358 580 604 645 762 775 ... #>   .. ..$ Bezirk           : chr [1:203] \"Reinickendorf\" \"Reinickendorf\" \"Mitte\" \"Spandau\" ... #>   .. ..$ Auspraegung      : chr [1:203] \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" ... #>   .. ..$ Grundwasserleiter: chr [1:203] \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>   .. ..$ Datum            : chr [1:203] \"10.11.2020\" \"06.10.2020\" \"27.10.2020\" \"15.10.2020\" ... #>   .. ..$ Parameterwert    : num [1:203] 12.2 12.1 12.5 13.4 12.7 13.2 15.8 12 13 11.7 ... #>   .. ..$ Einheit          : chr [1:203] \"grd C\" \"grd C\" \"grd C\" \"grd C\" ... #>   .. ..$ Ganglinie        : logi [1:203] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:203] \"keine\" \"keine\" \"keine\" \"keine\" ... #>  $ overview_df  :Classes 'data.table' and 'data.frame':  1288 obs. of  26 variables: #>   ..$ key                      : chr [1:1288] \"surface_water.water_level\" \"surface_water.water_level\" \"surface_water.water_level\" \"surface_water.water_level\" ... #>   ..$ Messstellennummer        : chr [1:1288] \"5865900\" \"5827103\" \"5865300\" \"5819900\" ... #>   ..$ Messstellenname          : chr [1:1288] \"Allee der Kosmonauten\" \"Allendestraße\" \"Am Bahndamm\" \"Am Freibad\" ... #>   ..$ Gewaesser                : chr [1:1288] \"M.-H.-Grenzgr.\" \"Müggelspree\" \"Wuhle\" \"Tegeler Fließ\" ... #>   ..$ Betreiber                : chr [1:1288] \"SenUVK\" \"SenUVK\" \"SenUVK\" \"SenUVK\" ... #>   ..$ Datum                    : chr [1:1288] \"15.02.2022 14:15\" \"15.02.2022 14:00\" \"15.02.2022 00:00\" \"15.02.2022 14:15\" ... #>   ..$ Wasserstand              : int [1:1288] 5 49 94 95 4 25 63 76 51 46 ... #>   ..$ Einheit                  : chr [1:1288] \"cm\" \"cm\" \"cm\" \"cm\" ... #>   ..$ Ganglinien               : logi [1:1288] NA NA NA NA NA NA ... #>   ..$ Klassifikation           : chr [1:1288] \"niedrig\" \"niedrig\" \"niedrig\" \"normal\" ... #>   ..$ Durchfluss               : num [1:1288] NA NA NA NA NA NA NA NA NA NA ... #>   ..$ Ganglinie                : logi [1:1288] NA NA NA NA NA NA ... #>   ..$ Wassertemperatur         : chr [1:1288] NA NA NA NA ... #>   ..$ Leitfaehigkeit           : chr [1:1288] NA NA NA NA ... #>   ..$ pHWert                   : chr [1:1288] NA NA NA NA ... #>   ..$ Sauerstoffgehalt         : chr [1:1288] NA NA NA NA ... #>   ..$ Parameterwert            : chr [1:1288] NA NA NA NA ... #>   ..$ Bezirk                   : chr [1:1288] NA NA NA NA ... #>   ..$ Auspraegung              : chr [1:1288] NA NA NA NA ... #>   ..$ Grundwasserleiter        : chr [1:1288] NA NA NA NA ... #>   ..$ Grundwasserspannung      : chr [1:1288] NA NA NA NA ... #>   ..$ Grundwasserstand_m_ue_NHN: num [1:1288] NA NA NA NA NA NA NA NA NA NA ... #>   ..$ Flur_abstand_m_u_GOK     : chr [1:1288] NA NA NA NA ... #>   ..$ water_body               : chr [1:1288] \"surface_water\" \"surface_water\" \"surface_water\" \"surface_water\" ... #>   ..$ variable                 : chr [1:1288] \"water_level\" \"water_level\" \"water_level\" \"water_level\" ... #>   ..$ station_type             : chr [1:1288] \"ws\" \"ws\" \"ws\" \"ws\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ crosstable   : tibble [1,000 × 11] (S3: tbl_df/tbl/data.frame) #>   ..$ Messstellennummer: chr [1:1000] \"5865900\" \"5827103\" \"5865300\" \"5819900\" ... #>   ..$ Messstellenname  : chr [1:1000] \"Allee der Kosmonauten\" \"Allendestraße\" \"Am Bahndamm\" \"Am Freibad\" ... #>   ..$ ws               : chr [1:1000] \"x\" \"x\" \"x\" \"x\" ... #>   ..$ df               : chr [1:1000] NA \"x\" \"x\" NA ... #>   ..$ wt               : chr [1:1000] NA NA \"x\" NA ... #>   ..$ lf               : chr [1:1000] NA NA NA NA ... #>   ..$ ph               : chr [1:1000] NA NA NA NA ... #>   ..$ og               : chr [1:1000] NA NA NA NA ... #>   ..$ os               : chr [1:1000] NA NA NA NA ... #>   ..$ gws              : chr [1:1000] NA NA NA NA ... #>   ..$ gwq              : chr [1:1000] NA NA NA NA ...  jsonlite::write_json(stations$crosstable,                       path = \"stations_crosstable.json\",                      pretty = TRUE) DT::datatable(stations$crosstable, filter = \"top\", caption = \"Data availabilty                per monitoring station\")"},{"path":[]},{"path":"/articles/tutorial.html","id":"master-data","dir":"Articles","previous_headings":"Stations > GW level","what":"Master data","title":"Tutorial","text":"Overview data GW level stations can requested shown : Master data GW level stations can requested shown : master data GW level stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_gwl_master.json","code":"DT::datatable(stations$overview_list$groundwater.level, filter = \"top\") stations_gwl_master <- wasserportal::get_wasserportal_masters_data(   station_ids = stations$overview_list$groundwater.level$Messstellennummer ) #> Importing 872 station metadata from Wasserportal Berlin ... ok. (8.68s)  jsonlite::write_json(stations_gwl_master,                       path = \"stations_gwl_master.json\",                      pretty = TRUE)  DT::datatable(stations_gwl_master, filter = \"top\")"},{"path":"/articles/tutorial.html","id":"trend-classification","dir":"Articles","previous_headings":"Stations > GW level","what":"Trend Classification","title":"Tutorial","text":"GW level trend classification (provided SenWeb) visualized .","code":""},{"path":"/articles/tutorial.html","id":"trend-classification-histogramm","dir":"Articles","previous_headings":"Stations > GW level > Trend Classification","what":"Trend Classification Histogramm","title":"Tutorial","text":"54.76 percent considered 829 GW level monitoring stations containing classification data (872 provided SenWeb) indicate normal (extrem niedrig, sehr niedrig, niedrig) GW levels. However, 54.76 percent indicate normal (hoch, sehr hoch, extrem hoch) GW levels.","code":"gwl <- stations$overview_list$groundwater.level %>%    dplyr::mutate(Datum = as.Date(Datum, format = \"%d.%m.%Y\"))  text_low_levels <- c(\"extrem niedrig\", \"sehr niedrig\", \"niedrig\") text_high_levels <- c(\"hoch\", \"sehr hoch\", \"extrem hoch\") levels_ordered <- c(text_low_levels, \"normal\", text_high_levels, \"keine\")  gwl$Klassifikation <- forcats::fct_relevel(gwl$Klassifikation, levels_ordered)  gwl_classified_only <- gwl %>% dplyr::filter(Klassifikation != \"keine\")  percental_share_low_levels <- 100*sum(gwl_classified_only$Klassifikation %in% text_low_levels)/nrow(gwl_classified_only)   percental_share_high_levels <- 100*sum(gwl_classified_only$Klassifikation %in% text_high_levels)/nrow(gwl_classified_only)   title_text <- sprintf(\"GW level classification (n = %d out of %d have 'classification' data)\", nrow(gwl_classified_only), nrow(gwl))  g1 <- gwl_classified_only %>%    dplyr::count(Klassifikation, Grundwasserspannung) %>%    dplyr::mutate(percental_share = 100 * n / nrow(gwl)) %>%    ggplot2::ggplot(ggplot2::aes_string(x = \"Klassifikation\",                                       y = \"percental_share\",                                       fill = \"Grundwasserspannung\")) +   ggplot2::geom_bar(stat = \"identity\") +    ggplot2::labs(title = title_text,                 x = \"Classification\",                 y = \"Percental share (%)\") +   ggplot2::theme_bw()  plotly::ggplotly(g1)"},{"path":"/articles/tutorial.html","id":"trend-classification-map","dir":"Articles","previous_headings":"Stations > GW level > Trend Classification","what":"Trend Classification Map","title":"Tutorial","text":"GW level trend plot also available full html page : https://kwb-r.github.io/wasserportal/map_gwl-trend.html","code":"level_colors <- data.frame(Klassifikation = levels_ordered, classi_color = c(   \"darkred\", \"red\", \"orange\", \"green\", \"lightblue\", \"blue\", \"darkblue\", \"grey\" ))  gwl_classified_only_with_coords <- gwl_classified_only %>%    dplyr::mutate(     Messstellennummer = as.character(Messstellennummer),   ) %>%    dplyr::left_join(     stations_gwl_master %>%       dplyr::select(\"Nummer\", \"Rechtswert_UTM_33_N\", \"Hochwert_UTM_33_N\") %>%        dplyr::rename(Messstellennummer = \"Nummer\"),     by = \"Messstellennummer\"   ) %>%    dplyr::left_join(     level_colors,      by = \"Klassifikation\"   ) %>%    sf::st_as_sf(     coords = c(\"Rechtswert_UTM_33_N\", \"Hochwert_UTM_33_N\"),     crs = 25833   ) %>%    sf::st_transform(crs = 4326)  # Create a vector of labels for each row in gwl_classified_only_with_coords labs <- wasserportal::columns_to_labels(   data = gwl_classified_only_with_coords,    columns = c(     \"Messstellennummer\",      \"Grundwasserspannung\",      \"Klassifikation\",      \"Datum\"   ),   fmt = \"<p>%s: %s<\/p>\",   sep = \"\" )  # Print Map gwlmap <- gwl_classified_only_with_coords %>%    leaflet::leaflet() %>%   leaflet::addTiles() %>%    leaflet::addProviderTiles(leaflet::providers$CartoDB.Positron) %>%   leaflet::addCircles(     color = ~classi_color,     label = lapply(labs, htmltools::HTML)   ) %>%    leaflet::addLegend(     position = \"topright\",     colors = level_colors$classi_color,     labels = level_colors$Klassifikation,     title = sprintf(       \"Classification (latest data: %s)\",       max(gwl_classified_only_with_coords$Datum)     )   )  htmlwidgets::saveWidget(   gwlmap,    \"./map_gwl-trend.html\",    title = \"GW level trend\" )  gwlmap"},{"path":"/articles/tutorial.html","id":"download-and-plotting-one-station","dir":"Articles","previous_headings":"Stations > GW level","what":"Download and Plotting One Station","title":"Tutorial","text":"total period available.","code":"station_gwl <- stations$overview_list$groundwater.level[1,] ncols <- 2:ncol(station_gwl)  gw_level <- wasserportal::read_wasserportal_raw_gw(   station = station_gwl$Messstellennummer,    stype = \"gwl\") %>%  dplyr::mutate(Label = sprintf(\"%s (%s)\", Parameter, Einheit)) head(gw_level) #> # A tibble: 6 × 6 #>   Messstellennummer Datum      Parameter Einheit  Messwert Label               #>               <int> <date>     <chr>     <chr>       <dbl> <chr>               #> 1                 1 1970-01-02 GW-Stand  m ü. NHN     35.2 GW-Stand (m ü. NHN) #> 2                 1 1970-01-16 GW-Stand  m ü. NHN     35.2 GW-Stand (m ü. NHN) #> 3                 1 1970-02-02 GW-Stand  m ü. NHN     35.2 GW-Stand (m ü. NHN) #> 4                 1 1970-02-16 GW-Stand  m ü. NHN     35.2 GW-Stand (m ü. NHN) #> 5                 1 1970-03-02 GW-Stand  m ü. NHN     35.2 GW-Stand (m ü. NHN) #> 6                 1 1970-03-16 GW-Stand  m ü. NHN     35.2 GW-Stand (m ü. NHN)  g <- gw_level %>%  ggplot2::ggplot(ggplot2::aes_string(x = \"Datum\", y = \"Messwert\", col = \"Label\")) + ggplot2::geom_line() + ggplot2::geom_point() + ggplot2::theme_bw()   title_subtitle <- paste0(paste0(names(station_gwl)[1], \": \",                               station_gwl[1],                               collapse =\", \"),        \"<br>\",        \"<sup>\",        paste0(names(station_gwl)[ncols], \": \",               station_gwl[ncols],                collapse =\", \"),        \"<\/sup>\")   plotly::ggplotly(g) %>%   plotly::layout(title = list(text = title_subtitle))"},{"path":"/articles/tutorial.html","id":"download-and-plotting-multiple-stations","dir":"Articles","previous_headings":"Stations > GW level","what":"Download and Plotting Multiple Stations","title":"Tutorial","text":"data GW level stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_gwl_data.json","code":"gw_level_multi <- data.table::rbindlist(   lapply(stations$overview_list$groundwater.level$Messstellennummer[1:5],                       function(id) {                        wasserportal::read_wasserportal_raw_gw(                          station = id, stype = \"gwl\")                      }))   jsonlite::write_json(gw_level_multi,                      path = \"stations_gwl_data.json\",                      pretty = TRUE)   # Plot 10 GW level selected_stations <- stations$overview_list$groundwater.level$Messstellennummer[1:10]  g <- gw_level_multi %>%  dplyr::filter(Messstellennummer %in% selected_stations) %>%  dplyr::mutate(Messstellennummer = as.character(Messstellennummer)) %>%  ggplot2::ggplot(ggplot2::aes_string(x = \"Datum\",                                      y = \"Messwert\",                                      col = \"Messstellennummer\")) + ggplot2::labs(title = \"GW level (m above NN)\") + ggplot2::geom_line() + ggplot2::geom_point() + ggplot2::theme_bw()  plotly::ggplotly(g)"},{"path":"/articles/tutorial.html","id":"gw-quality","dir":"Articles","previous_headings":"Stations","what":"GW quality","title":"Tutorial","text":"Overview data GW level stations can requested shown : Master data GW quality stations can requested shown : master data GW quality stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_gwq_master.json","code":"stations_gwq <- wasserportal::get_wasserportal_stations_table(   type = overview_options$groundwater$quality   )  DT::datatable(stations_gwq, filter = \"top\") stations_gwq_master <- wasserportal::get_wasserportal_masters_data(   station_ids = stations_gwq$Messstellennummer ) #> Importing 203 station metadata from Wasserportal Berlin ... ok. (1.98s)  jsonlite::write_json(stations_gwq_master,                       path = \"stations_gwq_master.json\",                      pretty = TRUE)"},{"path":"/articles/tutorial.html","id":"gw-quality-download-and-plotting-one-station","dir":"Articles","previous_headings":"Stations > GW quality","what":"GW Quality: Download and Plotting One Station","title":"Tutorial","text":"","code":"station_gwq <- stations$overview_list$groundwater.quality[1,] ncols <- 2:ncol(station_gwq)  gw_quality <- wasserportal::read_wasserportal_raw_gw(   station = station_gwq$Messstellennummer,    stype = \"gwq\") head(gw_quality) #> # A tibble: 6 × 5 #>   Messstellennummer Datum      Parameter                  Einheit      Messwert #>               <int> <date>     <chr>                      <chr>           <dbl> #> 1                 3 2020-07-01 Temperatur (Luft)          grd Celsius     19    #> 2                 3 2020-07-01 pH-Wert (Feld)             ohne Einheit     7.1  #> 3                 3 2020-07-01 Temperatur (Wasser)        grd C           12.2  #> 4                 3 2020-07-01 Leitfähigkeit 25°C vor Ort µS/cm          939    #> 5                 3 2020-07-01 Wasserst.(ROK) vor         m                4.91 #> 6                 3 2020-07-01 Wasserst.(ROK) nach        m                5  unique(gw_quality$Parameter) #>  [1] \"Temperatur (Luft)\"            \"pH-Wert (Feld)\"               #>  [3] \"Temperatur (Wasser)\"          \"Leitfähigkeit 25°C vor Ort\"   #>  [5] \"Wasserst.(ROK) vor\"           \"Wasserst.(ROK) nach\"          #>  [7] \"Entnahmeteufe (ROK)\"          \"Förderrate\"                   #>  [9] \"Redox Pumpbeginn\"             \"O2-Gehalt Pumpbeg.\"           #> [11] \"Redox Pumpende\"               \"pH Pumpende\"                  #> [13] \"O2-Gehalt Pumpende\"           \"Chlorid\"                      #> [15] \"Fluorid\"                      \"Hydrogenkarbonat\"             #> [17] \"Nitrit (N)\"                   \"Nitrat (N)\"                   #> [19] \"Orhto-Phosphat (P)\"           \"Sulfat\"                       #> [21] \"Cyanide (ges.)\"               \"Bromid\"                       #> [23] \"Nitrit\"                       \"Nitrat\"                       #> [25] \"Ortho-Phosphat\"               \"Ammonium (N)\"                 #> [27] \"Eisen-2\"                      \"Eisen (ges.)\"                 #> [29] \"Kalium\"                       \"Kalzium\"                      #> [31] \"Magnesium\"                    \"Natrium\"                      #> [33] \"Mangan\"                       \"Ammonium\"                     #> [35] \"Leitfähigkeit /Lab. bei 25°C\" \"UV-Adsorption (254)\"          #> [37] \"CSV (KMNO4)\"                  \"Basenkap. bis 8.2\"            #> [39] \"Säure-Kap. bis 4.3\"           \"Kohlenstoff (organ.)\"         #> [41] \"pH-Wert /Lab.\"                \"Gesamthärte\"                  #> [43] \"Karbonathärte\"                \"AOX\"                          #> [45] \"Phenolindex (ges.)\"           \"Arsen\"                        #> [47] \"Barium\"                       \"Blei\"                         #> [49] \"Bor\"                          \"Cadmium\"                      #> [51] \"Chrom\"                        \"Kupfer\"                       #> [53] \"Aluminium-gelöst\"             \"Molybdän\"                     #> [55] \"Nickel\"                       \"Quecksilber\"                  #> [57] \"Selen\"                        \"Zink\"                         #> [59] \"Vanadium\"                     \"Thallium\"                     #> [61] \"Uran\"                         \"Summe Na+Cl\"                  #> [63] \"Ionenbilanz (Labor)\"  g <- gw_quality %>%   dplyr::filter(Parameter == \"Sulfat\") %>%  ggplot2::ggplot(ggplot2::aes_string(x = \"Datum\", y = \"Messwert\", col = \"Parameter\")) + ggplot2::geom_line() + ggplot2::geom_point() + ggplot2::theme_bw()   title_subtitle <- paste0(paste0(names(station_gwq)[1], \": \",                               station_gwq[1],                               collapse =\", \"),        \"<br>\",        \"<sup>\",        paste0(names(station_gwq)[ncols], \": \",               station_gwq[ncols],                collapse =\", \"),        \"<\/sup>\")   plotly::ggplotly(g) %>%   plotly::layout(title = list(text = title_subtitle))"},{"path":"/articles/tutorial.html","id":"gw-quality-download-and-plotting-multiple-stations","dir":"Articles","previous_headings":"Stations > GW quality","what":"GW Quality: Download and Plotting Multiple Stations","title":"Tutorial","text":"data GW quality stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_gwq_data.json","code":"gw_quality_multi <- data.table::rbindlist(   lapply(stations$overview_list$groundwater.quality$Messstellennummer,                       function(id) {                        wasserportal::read_wasserportal_raw_gw(                          station = id, stype = \"gwq\")                      }))   jsonlite::write_json(gw_quality_multi,                      path = \"stations_gwq_data.json\",                      pretty = TRUE)   # Plot 10 GW quality  selected_stations <- stations$overview_list$groundwater.quality$Messstellennummer[1:10]  g <- gw_quality_multi %>%  dplyr::filter(Messstellennummer %in% selected_stations) %>%  dplyr::mutate(Messstellennummer = as.character(Messstellennummer)) %>%  dplyr::filter(Parameter == \"Sulfat\") %>%  ggplot2::ggplot(ggplot2::aes_string(x = \"Datum\",                                      y = \"Messwert\",                                      col = \"Messstellennummer\")) + ggplot2::labs(title = \"GW quality (Sulfat)\") + ggplot2::geom_line() + ggplot2::geom_point() + ggplot2::theme_bw()  plotly::ggplotly(g)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hauke Sonnenberg. Author. Michael Rustler. Author, maintainer. . Funder. . Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sonnenberg H, Rustler M (2022). wasserportal: R Package Functions Scraping Data Wasserportal Berlin. R package version 0.0.0.9000, https://github.com/KWB-R/wasserportal.","code":"@Manual{,   title = {wasserportal: R Package with Functions for Scraping Data of Wasserportal Berlin},   author = {Hauke Sonnenberg and Michael Rustler},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/KWB-R/wasserportal}, }"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Package with Functions for Scraping Data of\n    Wasserportal Berlin","text":"details install KWB-R packages checkout installation tutorial.","code":"### Optionally: specify GitHub Personal Access Token (GITHUB_PAT) ### See here why this might be important for you: ### https://kwb-r.github.io/kwb.pkgbuild/articles/install.html#set-your-github_pat  # Sys.setenv(GITHUB_PAT = \"mysecret_access_token\")  # Install package \"remotes\" from CRAN if (! require(\"remotes\")) {   install.packages(\"remotes\", repos = \"https://cloud.r-project.org\") }  # Install KWB package 'wasserportal' from GitHub remotes::install_github(\"KWB-R/wasserportal\")"},{"path":"/reference/columns_to_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Text Labels from Data Frame Columns — columns_to_labels","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"Create Text Labels Data Frame Columns","code":""},{"path":"/reference/columns_to_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"","code":"columns_to_labels(data, columns, fmt = \"%s: %s\", sep = \", \")"},{"path":"/reference/columns_to_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"data data frame columns names columns create labels fmt format string passed sprintf sep separator (default: \", \")","code":""},{"path":"/reference/columns_to_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"vector character many elements rows data","code":""},{"path":"/reference/columns_to_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"","code":"data <- data.frame(number = 1:2, name = c(\"adam\", \"eva\"), value = 3:4) columns <- c(\"name\", \"value\") columns_to_labels(data, columns) #> [1] \"name: adam, value: 3\" \"name: eva, value: 4\"  columns_to_labels(data, columns, fmt = \"<p>%s: %s<\/p>\", sep = \"\") #> [1] \"<p>name: adam<\/p><p>value: 3<\/p>\" \"<p>name: eva<\/p><p>value: 4<\/p>\""},{"path":"/reference/get_overview_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Berlin: get overview options for stations — get_overview_options","title":"Wasserportal Berlin: get overview options for stations — get_overview_options","text":"Wasserportal Berlin: get overview options stations","code":""},{"path":"/reference/get_overview_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Berlin: get overview options for stations — get_overview_options","text":"","code":"get_overview_options()"},{"path":"/reference/get_overview_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Berlin: get overview options for stations — get_overview_options","text":"list shortcuts station overview tables (wasserportal.berlin.de/messwerte.php?anzeige=tabelle&thema=<shortcut>)","code":""},{"path":"/reference/get_overview_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Berlin: get overview options for stations — get_overview_options","text":"","code":"get_overview_options() #> $surface_water #> $surface_water$water_level #> [1] \"ws\" #>  #> $surface_water$flow #> [1] \"df\" #>  #> $surface_water$level #> [1] \"wt\" #>  #> $surface_water$conductivity #> [1] \"lf\" #>  #> $surface_water$ph #> [1] \"ph\" #>  #> $surface_water$oxygen_concentration #> [1] \"og\" #>  #> $surface_water$oxygen_saturation #> [1] \"os\" #>  #>  #> $groundwater #> $groundwater$level #> [1] \"gws\" #>  #> $groundwater$quality #> [1] \"gwq\" #>  #>"},{"path":"/reference/get_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Stations — get_stations","title":"Get Stations — get_stations","text":"Get Stations","code":""},{"path":"/reference/get_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Stations — get_stations","text":"","code":"get_stations(run_parallel = TRUE)"},{"path":"/reference/get_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Stations — get_stations","text":"run_parallel default: TRUE","code":""},{"path":"/reference/get_stations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Stations — get_stations","text":"list general station \"overview\" (either list \"overview_list\" data.frame \"overview_df\") crosstable information parameters available per station (\"x\" available, NA )","code":""},{"path":"/reference/get_wasserportal_master_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"Wasserportal Berlin: get master data single station","code":""},{"path":"/reference/get_wasserportal_master_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"","code":"get_wasserportal_master_data(   station_id,   url_wasserportal = wasserportal_base_url() )"},{"path":"/reference/get_wasserportal_master_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"station_id station_id url_wasserportal base url Wasserportal berlin (default: wasserportal_base_url())","code":""},{"path":"/reference/get_wasserportal_master_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"data frame metadata ","code":""},{"path":"/reference/get_wasserportal_master_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"","code":"get_wasserportal_master_data(station_id = 149) #> # A tibble: 1 × 11 #>   Nummer Bezirk Betreiber Auspraegung        Grundwasserleiter  Gelaendeoberkan… #>   <chr>  <chr>  <chr>     <chr>              <chr>              <chr>            #> 1 149    Mitte  Senat     GW-Stand + GW-Güte Hauptgrundwasserl… 34.09            #> # … with 5 more variables: Rohroberkante_m_ue_NHN <chr>, #> #   Filteroberkante_m_u_GOK <chr>, Filterunterkante_m_u_GOK <chr>, #> #   Rechtswert_UTM_33_N <chr>, Hochwert_UTM_33_N <chr>"},{"path":"/reference/get_wasserportal_masters_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"Wasserportal Berlin: get master data multiple stations","code":""},{"path":"/reference/get_wasserportal_masters_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"","code":"get_wasserportal_masters_data(station_ids, run_parallel = TRUE)"},{"path":"/reference/get_wasserportal_masters_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"station_ids station_ids run_parallel default: TRUE","code":""},{"path":"/reference/get_wasserportal_masters_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"data frame metadata selected station ids","code":""},{"path":"/reference/get_wasserportal_masters_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"","code":"station_ids <- 1:4 parallel::detectCores() #> [1] 3 system.time(get_wasserportal_masters_data(station_ids)) #> Importing 4 station metadata from Wasserportal Berlin ... ok. (3.81s)  #>    user  system elapsed  #>   0.016   0.008   4.103  system.time(get_wasserportal_masters_data(station_ids,                                           run_parallel = FALSE)) #>    user  system elapsed  #>   0.172   0.017   4.209"},{"path":"/reference/get_wasserportal_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Names and IDs of the Stations of wasserportal.berlin.de — get_wasserportal_stations","title":"Get Names and IDs of the Stations of wasserportal.berlin.de — get_wasserportal_stations","text":"Get Names IDs Stations wasserportal.berlin.de","code":""},{"path":"/reference/get_wasserportal_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Names and IDs of the Stations of wasserportal.berlin.de — get_wasserportal_stations","text":"","code":"get_wasserportal_stations(type = \"quality\")"},{"path":"/reference/get_wasserportal_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Names and IDs of the Stations of wasserportal.berlin.de — get_wasserportal_stations","text":"type one \"quality\", \"level\", \"flow\"","code":""},{"path":"/reference/get_wasserportal_stations_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"Wasserportal Berlin: get stations overview table","code":""},{"path":"/reference/get_wasserportal_stations_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"","code":"get_wasserportal_stations_table(   type = get_overview_options()$groundwater$level,   url_wasserportal = wasserportal_base_url() )"},{"path":"/reference/get_wasserportal_stations_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"type type stations table retrieve. Valid options defined get_overview_options, default: get_overview_options()$groundwater$level url_wasserportal base url Wasserportal berlin (default: wasserportal_base_url","code":""},{"path":"/reference/get_wasserportal_stations_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"data frame master data selected monitoring stations","code":""},{"path":"/reference/get_wasserportal_stations_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"","code":"types <- wasserportal::get_overview_options() str(types) #> List of 2 #>  $ surface_water:List of 7 #>   ..$ water_level         : chr \"ws\" #>   ..$ flow                : chr \"df\" #>   ..$ level               : chr \"wt\" #>   ..$ conductivity        : chr \"lf\" #>   ..$ ph                  : chr \"ph\" #>   ..$ oxygen_concentration: chr \"og\" #>   ..$ oxygen_saturation   : chr \"os\" #>  $ groundwater  :List of 2 #>   ..$ level  : chr \"gws\" #>   ..$ quality: chr \"gwq\" sw_l <- wasserportal::get_wasserportal_stations_table(type = types$surface_water$water_level) str(sw_l) #> tibble [72 × 9] (S3: tbl_df/tbl/data.frame) #>  $ Messstellennummer: int [1:72] 5865900 5827103 5865300 5819900 5864801 5861101 5800107 5800317 5867003 5867401 ... #>  $ Messstellenname  : chr [1:72] \"Allee der Kosmonauten\" \"Allendestraße\" \"Am Bahndamm\" \"Am Freibad\" ... #>  $ Gewaesser        : chr [1:72] \"M.-H.-Grenzgr.\" \"Müggelspree\" \"Wuhle\" \"Tegeler Fließ\" ... #>  $ Betreiber        : chr [1:72] \"SenUVK\" \"SenUVK\" \"SenUVK\" \"SenUVK\" ... #>  $ Datum            : chr [1:72] \"15.02.2022 14:00\" \"15.02.2022 14:00\" \"15.02.2022 00:00\" \"15.02.2022 14:00\" ... #>  $ Wasserstand      : int [1:72] 5 49 94 95 4 25 63 76 51 46 ... #>  $ Einheit          : chr [1:72] \"cm\" \"cm\" \"cm\" \"cm\" ... #>  $ Ganglinien       : logi [1:72] NA NA NA NA NA NA ... #>  $ Klassifikation   : chr [1:72] \"niedrig\" \"niedrig\" \"niedrig\" \"normal\" ..."},{"path":"/reference/get_wasserportal_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Names and IDs of the Variables of wasserportal.berlin.de — get_wasserportal_variables","title":"Get Names and IDs of the Variables of wasserportal.berlin.de — get_wasserportal_variables","text":"Get Names IDs Variables wasserportal.berlin.de","code":""},{"path":"/reference/get_wasserportal_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Names and IDs of the Variables of wasserportal.berlin.de — get_wasserportal_variables","text":"","code":"get_wasserportal_variables(station = NULL)"},{"path":"/reference/get_wasserportal_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Names and IDs of the Variables of wasserportal.berlin.de — get_wasserportal_variables","text":"station station id. given, variables available given station returned.","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/read.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to read CSV — read","title":"Helper function to read CSV — read","text":"Helper function read CSV","code":""},{"path":"/reference/read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to read CSV — read","text":"","code":"read(text, ...)"},{"path":"/reference/read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to read CSV — read","text":"text text ... ... additional arguments passed read.table","code":""},{"path":"/reference/read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to read CSV — read","text":"data frame values","code":""},{"path":"/reference/readPackageFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CSV File from Package's ","title":"Read CSV File from Package's ","text":"Read CSV File Package's \"extdata\" Folder","code":""},{"path":"/reference/readPackageFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CSV File from Package's ","text":"","code":"readPackageFile(file, ...)"},{"path":"/reference/readPackageFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CSV File from Package's ","text":"file file name (without path) ... additional arguments passed read.csv","code":""},{"path":"/reference/readPackageFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CSV File from Package's ","text":"data frame representing content file","code":""},{"path":"/reference/read_wasserportal.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"function downloads reads CSV files wasserportal.berlin.de.","code":""},{"path":"/reference/read_wasserportal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"","code":"read_wasserportal(   station,   variables = get_wasserportal_variables(station),   from_date = as.character(Sys.Date() - 90L),   type = \"single\",   include_raw_time = FALSE )"},{"path":"/reference/read_wasserportal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"station station number, returned get_wasserportal_stations variables vector variable identifiers, returned get_wasserportal_variables from_date Date object (string format \"yyyy-mm-dd\" can converted Date object representing first day request data. Default: .character(Sys.Date() - 90L) type one \"single\" (default), \"daily\", \"monthly\" include_raw_time TRUE original time column column corrected winter time included output. default FALSE.","code":""},{"path":"/reference/read_wasserportal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"data frame read CSV file download provides. IMPORTANT: yet clear interpret timestamp, see example","code":""},{"path":"/reference/read_wasserportal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"original timestamps (column timestamps_raw example ) plausible, e.g. \"31.03.2019 03:00\" appears twice! corrected (column timestamp_corr) represent plausible sequence timestamps Berlin Normal Time (UTC+01) Finally, valid POSIXct timestamp timezone \"Berlin/Europe\" (UTC+01 winter, UTC+02 summer) created, together additional information UTC offset (column UTCOffset, 1 winter, 2 summer).","code":""},{"path":"/reference/read_wasserportal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"","code":"# Get a list of available water quality stations and variables stations <- wasserportal::get_wasserportal_stations() variables <- wasserportal::get_wasserportal_variables()  # Set the start date from_date <- \"2020-03-01\"  # Read the timeseries (multiple variables for one station) water_quality <- wasserportal::read_wasserportal(   station = stations$MPS_Charlottenburg,   variables = c(variables[\"Sauerstoffgehalt\"], variables[\"Leitfaehigkeit\"]),   from_date = from_date, include_raw_time = TRUE ) #> Reading 'Sauerstoffgehalt' for station 153 (MPS_Charlottenburg) ... ok. (1.15s)  #> Reading 'Leitfaehigkeit' for station 153 (MPS_Charlottenburg) ... ok. (0.54s)   # Look at the first few records head(water_quality) #>        timestamp_raw   timestamp_corr       LocalDateTime UTCOffset #> 98  14.02.2021 03:00 14.02.2021 03:00 2021-02-14 03:00:00         1 #> 99  14.02.2021 03:15 14.02.2021 03:15 2021-02-14 03:15:00         1 #> 100 14.02.2021 03:30 14.02.2021 03:30 2021-02-14 03:30:00         1 #> 101 14.02.2021 03:45 14.02.2021 03:45 2021-02-14 03:45:00         1 #> 102 14.02.2021 04:00 14.02.2021 04:00 2021-02-14 04:00:00         1 #> 103 14.02.2021 04:15 14.02.2021 04:15 2021-02-14 04:15:00         1 #>     Sauerstoffgehalt Leitfaehigkeit #> 98              -777           -777 #> 99              -777           -777 #> 100             -777           -777 #> 101             -777           -777 #> 102             -777           -777 #> 103             -777           -777  # Check the metadata #kwb.utils::getAttribute(water_quality, \"metadata\")  # Set missing values to NA water_quality[water_quality == -777] <- NA  # Look at the first few records again head(water_quality) #>        timestamp_raw   timestamp_corr       LocalDateTime UTCOffset #> 98  14.02.2021 03:00 14.02.2021 03:00 2021-02-14 03:00:00         1 #> 99  14.02.2021 03:15 14.02.2021 03:15 2021-02-14 03:15:00         1 #> 100 14.02.2021 03:30 14.02.2021 03:30 2021-02-14 03:30:00         1 #> 101 14.02.2021 03:45 14.02.2021 03:45 2021-02-14 03:45:00         1 #> 102 14.02.2021 04:00 14.02.2021 04:00 2021-02-14 04:00:00         1 #> 103 14.02.2021 04:15 14.02.2021 04:15 2021-02-14 04:15:00         1 #>     Sauerstoffgehalt Leitfaehigkeit #> 98                NA             NA #> 99                NA             NA #> 100               NA             NA #> 101               NA             NA #> 102               NA             NA #> 103               NA             NA  ### How was the original timestamp interpreted?  # Determine the days at which summer time starts and ends, respectively from_year <- as.integer(substr(from_date, 1L, 4L)) switches <- kwb.datetime::date_range_CEST(from_year)  # Reformat to dd.mm.yyyy switches <- kwb.datetime::reformatTimestamp(switches, \"%Y-%m-%d\", \"%d.%m.%Y\")  # Define a pattern to look for timestamps \"around\" the switches pattern <- paste(switches, \"0[1-4]\", collapse = \"|\")  # Look at the data for these timestamps water_quality[grepl(pattern, water_quality$timestamp_raw), ] #> [1] timestamp_raw    timestamp_corr   LocalDateTime    UTCOffset        #> [5] Sauerstoffgehalt Leitfaehigkeit   #> <0 rows> (or 0-length row.names)  # The original timestamps (timestamps_raw) were not all plausible, e.g. # for March 2019. This seems to have been fixed by the \"wasserportal\"! sum(water_quality$timestamp_raw != water_quality$timestamp_corr) #> [1] 0"},{"path":"/reference/read_wasserportal_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Wasserportal Raw — read_wasserportal_raw","title":"Read Wasserportal Raw — read_wasserportal_raw","text":"Read Wasserportal Raw","code":""},{"path":"/reference/read_wasserportal_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Wasserportal Raw — read_wasserportal_raw","text":"","code":"read_wasserportal_raw(   variable,   station,   from_date,   type = \"single\",   include_raw_time = FALSE,   handle = NULL )"},{"path":"/reference/read_wasserportal_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Wasserportal Raw — read_wasserportal_raw","text":"variable variable station station id from_date start date type one \"single\", \"daily\", \"monthly\" (default: \"single\") include_raw_time TRUE FALSE (default: FALSE) handle handle (default: NULL)","code":""},{"path":"/reference/read_wasserportal_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Wasserportal Raw — read_wasserportal_raw","text":"????","code":""},{"path":"/reference/read_wasserportal_raw_gw.html","id":null,"dir":"Reference","previous_headings":"","what":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"read_wasserportal_raw_gw","code":""},{"path":"/reference/read_wasserportal_raw_gw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"","code":"read_wasserportal_raw_gw(   station = 149,   stype = \"gwl\",   type = \"single_all\",   from_date = \"\",   include_raw_time = FALSE,   handle = NULL )"},{"path":"/reference/read_wasserportal_raw_gw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"station station id stype \"gwl\" \"gwq\" type \"single\" \"single_all\" (stype = \"gwq\") from_date (default: \"\") include_raw_time default: FALSE handle default: NULL","code":""},{"path":"/reference/read_wasserportal_raw_gw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"data.frame values (currently stype == \"gwl\")","code":""},{"path":"/reference/read_wasserportal_raw_gw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"","code":"read_wasserportal_raw_gw(station = 149, stype = \"gwl\") #> # A tibble: 7,754 × 5 #>    Messstellennummer Datum      Parameter Einheit  Messwert #>  *             <dbl> <date>     <chr>     <chr>       <dbl> #>  1               149 1970-03-16 GW-Stand  m ü. NHN     28.5 #>  2               149 1970-04-07 GW-Stand  m ü. NHN     28.1 #>  3               149 1970-04-20 GW-Stand  m ü. NHN     28.1 #>  4               149 1970-05-05 GW-Stand  m ü. NHN     28.3 #>  5               149 1970-05-15 GW-Stand  m ü. NHN     28.3 #>  6               149 1970-06-01 GW-Stand  m ü. NHN     28.4 #>  7               149 1970-06-16 GW-Stand  m ü. NHN     28.5 #>  8               149 1970-07-01 GW-Stand  m ü. NHN     28.4 #>  9               149 1970-07-22 GW-Stand  m ü. NHN     28.4 #> 10               149 1970-08-03 GW-Stand  m ü. NHN     28.5 #> # … with 7,744 more rows read_wasserportal_raw_gw(station = 149, stype = \"gwq\") #> # A tibble: 4,589 × 5 #>    Messstellennummer Datum      Parameter                  Einheit      Messwert #>  *             <dbl> <date>     <chr>                      <chr>           <dbl> #>  1               149 2005-05-11 Temperatur (Luft)          grd Celsius      6    #>  2               149 2005-05-11 pH-Wert (Feld)             ohne Einheit     7.4  #>  3               149 2005-05-11 Temperatur (Wasser)        grd C           13.4  #>  4               149 2005-05-11 Leitfähigkeit 25°C vor Ort µS/cm         1005.   #>  5               149 2005-05-11 Wasserst.(ROK) vor         m                3.21 #>  6               149 2005-05-11 Chlorid                    mg/l            54    #>  7               149 2005-05-11 Fluorid                    mg/l             0.3  #>  8               149 2005-05-11 Hydrogenkarbonat           mg/l           159.   #>  9               149 2005-05-11 Nitrit (N)                 mg/l N          -0.01 #> 10               149 2005-05-11 Nitrat (N)                 mg/l N           0.04 #> # … with 4,579 more rows"},{"path":"/reference/wasserportal_base_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: Base Url of Berlin Wassersportal — wasserportal_base_url","title":"Helper function: Base Url of Berlin Wassersportal — wasserportal_base_url","text":"Helper function: Base Url Berlin Wassersportal","code":""},{"path":"/reference/wasserportal_base_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: Base Url of Berlin Wassersportal — wasserportal_base_url","text":"","code":"wasserportal_base_url()"},{"path":"/reference/wasserportal_base_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: Base Url of Berlin Wassersportal — wasserportal_base_url","text":"string base url Berlin Wasserportal","code":""},{"path":"/news/index.html","id":"wasserportal-0009000","dir":"Changelog","previous_headings":"","what":"wasserportal 0.0.0.9000","title":"wasserportal 0.0.0.9000","text":"Added NEWS.md file track changes package. see https://style.tidyverse.org/news.html writing good NEWS.md","code":""}]
