[{"path":"https://kwb-r.github.io/wasserportal/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021-2022 Kompetenzzentrum Wasser Berlin gGmbH (KWB) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kwb-r.github.io/wasserportal/articles/groundwater.html","id":"do-your-own-analysis","dir":"Articles","previous_headings":"","what":"Do Your Own Analysis!","title":"Groundwater","text":"Download JSON files scraped prepared day 5 .m. UTC re-use R. following data available: Data availability stations_crosstable.json: available parameters per station (see wasserportal::get_overview_options() available options). Note: includes also surface monitoring stations! Master Data stations_gwl_master.json: GW level stations stations_gwq_master.json: GW quality stations Measurements stations_gwl_data.json: GW level measurements stations stations_gwq_master.json: GW quality measurements available parameters stations Please find example merging information single data frame:","code":"library(wasserportal)  stations_crosstable <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_crosstable.json\")  str(stations_crosstable) #> 'data.frame':    998 obs. of  11 variables: #>  $ Messstellennummer: chr  \"5865900\" \"5827103\" \"5870400\" \"5865300\" ... #>  $ Messstellenname  : chr  \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>  $ ws               : chr  \"x\" \"x\" \"x\" \"x\" ... #>  $ df               : chr  NA \"x\" \"x\" \"x\" ... #>  $ wt               : chr  NA NA NA \"x\" ... #>  $ lf               : chr  NA NA NA NA ... #>  $ ph               : chr  NA NA NA NA ... #>  $ og               : chr  NA NA NA NA ... #>  $ os               : chr  NA NA NA NA ... #>  $ gws              : chr  NA NA NA NA ... #>  $ gwq              : chr  NA NA NA NA ... library(wasserportal)  ### GW levels gwl_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwl_master.json\") gwl_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwl_data.json\") %>%     dplyr::mutate(Messstellennummer = as.character(Messstellennummer)) %>%    dplyr::left_join(gwl_master, by = c(\"Messstellennummer\" = \"Nummer\"))  str(gwl_data) #> 'data.frame':    48382 obs. of  18 variables: #>  $ Messstellennummer             : chr  \"1\" \"1\" \"1\" \"1\" ... #>  $ Datum                         : chr  \"1970-01-02\" \"1970-01-16\" \"1970-02-02\" \"1970-02-16\" ... #>  $ Parameter                     : chr  \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" ... #>  $ Einheit                       : chr  \"m ü. NHN\" \"m ü. NHN\" \"m ü. NHN\" \"m ü. NHN\" ... #>  $ Messwert                      : num  35.2 35.2 35.2 35.2 35.2 ... #>  $ Bezirk                        : chr  \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>  $ Betreiber                     : chr  \"Senat\" \"Senat\" \"Senat\" \"Senat\" ... #>  $ Auspraegung                   : chr  \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" ... #>  $ Grundwasserleiter             : chr  \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>  $ Gelaendeoberkante_GOK_m_ue_NHN: chr  \"49.20\" \"49.20\" \"49.20\" \"49.20\" ... #>  $ Rohroberkante_m_ue_NHN        : chr  \"49.49\" \"49.49\" \"49.49\" \"49.49\" ... #>  $ Filteroberkante_m_u_GOK       : chr  \"37.34\" \"37.34\" \"37.34\" \"37.34\" ... #>  $ Filterunterkante_m_u_GOK      : chr  \"39.34\" \"39.34\" \"39.34\" \"39.34\" ... #>  $ Rechtswert_UTM_33_N           : chr  \"384415.50\" \"384415.50\" \"384415.50\" \"384415.50\" ... #>  $ Hochwert_UTM_33_N             : chr  \"5831712.30\" \"5831712.30\" \"5831712.30\" \"5831712.30\" ... #>  $ Name                          : chr  NA NA NA NA ... #>  $ Gewaesser                     : chr  NA NA NA NA ... #>  $ Flusskilometer                : chr  NA NA NA NA ...  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%     dplyr::mutate(Messstellennummer = as.character(Messstellennummer)) %>%    dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  str(gwq_data) #> 'data.frame':    713955 obs. of  15 variables: #>  $ Messstellennummer             : chr  \"3\" \"3\" \"3\" \"3\" ... #>  $ Datum                         : chr  \"2020-07-01\" \"2020-07-01\" \"2020-07-01\" \"2020-07-01\" ... #>  $ Parameter                     : chr  \"Temperatur (Luft)\" \"pH-Wert (Feld)\" \"Temperatur (Wasser)\" \"Leitfähigkeit 25°C vor Ort\" ... #>  $ Einheit                       : chr  \"grd Celsius\" \"ohne Einheit\" \"grd C\" \"µS/cm\" ... #>  $ Messwert                      : num  19 7.1 12.2 939 4.91 5 6 0.25 453 0 ... #>  $ Bezirk                        : chr  \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>  $ Betreiber                     : chr  \"Senat\" \"Senat\" \"Senat\" \"Senat\" ... #>  $ Auspraegung                   : chr  \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" ... #>  $ Grundwasserleiter             : chr  \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>  $ Gelaendeoberkante_GOK_m_ue_NHN: chr  \"37.87\" \"37.87\" \"37.87\" \"37.87\" ... #>  $ Rohroberkante_m_ue_NHN        : chr  \"38.65\" \"38.65\" \"38.65\" \"38.65\" ... #>  $ Filteroberkante_m_u_GOK       : chr  \"12.27\" \"12.27\" \"12.27\" \"12.27\" ... #>  $ Filterunterkante_m_u_GOK      : chr  \"13.27\" \"13.27\" \"13.27\" \"13.27\" ... #>  $ Rechtswert_UTM_33_N           : chr  \"385789.30\" \"385789.30\" \"385789.30\" \"385789.30\" ... #>  $ Hochwert_UTM_33_N             : chr  \"5830677.30\" \"5830677.30\" \"5830677.30\" \"5830677.30\" ...  ### Merge GW level and quality into one data frame gw_data <- dplyr::bind_rows(gwl_data, gwq_data)  str(gw_data) #> 'data.frame':    762337 obs. of  18 variables: #>  $ Messstellennummer             : chr  \"1\" \"1\" \"1\" \"1\" ... #>  $ Datum                         : chr  \"1970-01-02\" \"1970-01-16\" \"1970-02-02\" \"1970-02-16\" ... #>  $ Parameter                     : chr  \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" ... #>  $ Einheit                       : chr  \"m ü. NHN\" \"m ü. NHN\" \"m ü. NHN\" \"m ü. NHN\" ... #>  $ Messwert                      : num  35.2 35.2 35.2 35.2 35.2 ... #>  $ Bezirk                        : chr  \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>  $ Betreiber                     : chr  \"Senat\" \"Senat\" \"Senat\" \"Senat\" ... #>  $ Auspraegung                   : chr  \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" ... #>  $ Grundwasserleiter             : chr  \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>  $ Gelaendeoberkante_GOK_m_ue_NHN: chr  \"49.20\" \"49.20\" \"49.20\" \"49.20\" ... #>  $ Rohroberkante_m_ue_NHN        : chr  \"49.49\" \"49.49\" \"49.49\" \"49.49\" ... #>  $ Filteroberkante_m_u_GOK       : chr  \"37.34\" \"37.34\" \"37.34\" \"37.34\" ... #>  $ Filterunterkante_m_u_GOK      : chr  \"39.34\" \"39.34\" \"39.34\" \"39.34\" ... #>  $ Rechtswert_UTM_33_N           : chr  \"384415.50\" \"384415.50\" \"384415.50\" \"384415.50\" ... #>  $ Hochwert_UTM_33_N             : chr  \"5831712.30\" \"5831712.30\" \"5831712.30\" \"5831712.30\" ... #>  $ Name                          : chr  NA NA NA NA ... #>  $ Gewaesser                     : chr  NA NA NA NA ... #>  $ Flusskilometer                : chr  NA NA NA NA ..."},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/groundwater.html","id":"gw-quality","dir":"Articles","previous_headings":"Data Availability","what":"GW Quality","title":"Groundwater","text":"","code":"gwq_data_by_parameter <- gwq_data %>%   dplyr::select(.data$Messstellennummer,                 .data$Parameter,                 .data$Datum,                 .data$Messwert) %>%   dplyr::group_by(.data$Parameter) %>%   dplyr::summarise(date_min = min(.data$Datum),                    date_max = max(.data$Datum),                    n = dplyr::n()) %>%   dplyr::arrange(dplyr::desc(.data$n))  DT::datatable(gwq_data_by_parameter, filter = \"top\") gwq_data_by_parameter_and_station <-  gwq_data %>%   dplyr::select(.data$Messstellennummer,                 .data$Parameter,                 .data$Datum,                 .data$Messwert) %>%   dplyr::group_by(.data$Parameter,                   .data$Messstellennummer) %>%   dplyr::summarise(date_min = min(.data$Datum),                    date_max = max(.data$Datum),                    n = dplyr::n()) %>%   dplyr::arrange(dplyr::desc(.data$n)) #> `summarise()` has grouped output by 'Parameter'. You can override using the #> `.groups` argument.  DT::datatable(gwq_data_by_parameter_and_station, filter = \"top\") #> Warning in instance$preRenderHook(instance): It seems your data is too big #> for client-side DataTables. You may consider server-side processing: https:// #> rstudio.github.io/DT/server.html"},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/groundwater.html","id":"gw-quality-1","dir":"Articles","previous_headings":"Export","what":"GW Quality","title":"Groundwater","text":"","code":"gwq_data_list <- list(gwq_by_parameter = gwq_data_by_parameter,                               gwq_by_parameter_and_station = gwq_data_by_parameter_and_station,                               gwq_data = gwq_data,                               gwq_master = gwq_master)  openxlsx::write.xlsx(x = gwq_data_list,                      file = \"wasserportal_gwq_data.xlsx\",                      overwrite = TRUE)"},{"path":"https://kwb-r.github.io/wasserportal/articles/norman_lists.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"Norman Lists","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package install.packages('wasserportal')"},{"path":"https://kwb-r.github.io/wasserportal/articles/norman_lists.html","id":"get-norman-lists","dir":"Articles","previous_headings":"","what":"Get Norman Lists","title":"Norman Lists","text":"","code":"library(wasserportal)  download_file <- function(url,                              tdir = tempdir() ) { filename <- basename(url) t_path <- file.path(tdir, filename) download.file(url, dest= t_path, mode=\"wb\")  t_path }  ### Download S0 | SUSDAT | Merged NORMAN Suspect List: SusDat ### Version: NORMAN-SLE-S0.0.4.1 (2021-01-18) ### DOI: 10.5281/zenodo.5873975  #norman_s0_path  <- download_file(\"https://zenodo.org/record/5873975/files/susdat_2022-01-18-104316.csv\") #norman_s0 <- readr::read_csv(norman_s0_path)  ### Download S36 | UBAPMT | Potential Persistent, Mobile and Toxic (PMT) substances ### Version: NORMAN-SLE-S36.0.2.1 (2020-12-15) ### DOI: \"10.5281/zenodo.4323239\"  norman_s36_ubapmt_path  <- download_file(\"https://zenodo.org/record/4323239/files/S36_UBAPMT_Dec2020.csv\") norman_s36_ubapmt <- readr::read_csv(norman_s36_ubapmt_path) #> Rows: 258 Columns: 35 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (33): CAS_Number, Name, List, ProtectedCAS, REACH_Emission_Likelihood, P... #> dbl  (2): Largest_Fragment_mass, PubChemCID_largestFragment #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.   ### Download S90 | ZEROPMBOX1 | ZeroPM Box 1 Substances ### Version: Version NORMAN-SLE-S90.0.1.0 (2021-01-15) ### DOI: 10.5281/zenodo.5854252  norman_s90_zeropm_path  <- download_file(\"https://zenodo.org/record/5854252/files/ZeroPM_Box1.csv\") norman_s90_zeropm <- readr::read_csv(norman_s90_zeropm_path) #> New names: #> * Synonym -> Synonym...11 #> * Synonym -> Synonym...12 #> * Synonym -> Synonym...13 #> Rows: 38 Columns: 13── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (11): CAS, Name, DTXSID, InChIKey, SMILES, InChI, MolecularFormula, IUPA... #> dbl  (2): PubChem_CID, MonoisotopicMass #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.   cas_wasserportal <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\",                                                   encoding = \"UTF-8\") cas_reach <- wasserportal::readPackageFile(file = \"cas_reach.csv\")  ubapmt_publication <- cas_reach %>%   dplyr::filter(.data$cas_number %in% unique(cas_wasserportal$cas_number))   ubapmt_zenodo <- norman_s36_ubapmt %>%   dplyr::filter(.data$CAS_Number %in% unique(cas_wasserportal$cas_number)) %>%   dplyr::rename(cas_number = .data$CAS_Number)  missing_on_zenodo <- cas_reach %>%   dplyr::mutate(zenodo = dplyr::if_else(.data$cas_number %in% unique(ubapmt_zenodo$cas_number),                                         \"yes\",                                         NA_character_),                 publication = dplyr::if_else(.data$cas_number %in% unique(ubapmt_publication$cas_number),                                         \"yes\",                                         NA_character_)) %>%   dplyr::filter(publication == \"yes\" | zenodo == \"yes\") %>%   dplyr::relocate(tidyselect::all_of(c(\"publication\", \"zenodo\")), .before = .data$emission_likelihood)   DT::datatable(missing_on_zenodo, filter = \"top\", rownames = FALSE)"},{"path":"https://kwb-r.github.io/wasserportal/articles/norman_lists.html","id":"get-gw-quality-from-wasserportal","dir":"Articles","previous_headings":"","what":"Get GW Quality from Wasserportal","title":"Norman Lists","text":"","code":"# Load R package library(wasserportal)  ### For details see: ### https://kwb-r.github.io/wasserportal/articles/groundwater.html ### JSON files (see below) are build every day automatically at 5a.m. with ### continious integration, for build status, see here: ### https://github.com/KWB-R/wasserportal/actions/workflows/pkgdown.yaml  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%   dplyr::filter(Parameter %in% cas_wasserportal$Parameter) %>%   dplyr::inner_join(cas_wasserportal, by = \"Parameter\") %>%   dplyr::inner_join(norman_s0_in_wasserportal, by = \"cas_number\") %>%    dplyr::mutate(Messstellennummer = as.character(Messstellennummer), ## CensorCode: either \"below\" (less than) for concentration below detection limit ## (value is detection limit) or \"nc\" (not censored) for concentration above ## detection limit                 CensorCode = dplyr::case_when(Messwert <= 0 ~ \"lt\",                                               TRUE ~ \"nc\"),                 Messwert = dplyr::case_when(Messwert < 0 ~ abs(Messwert), ### Only two decimal numbers are exported by Wasserportal, but some sustances ### have lower detection limit, e.g. 0.002 which results in -0.00 export, thus ### the dummy detection limit 0.00999 was introduced (until fixed by Senate: ### Christoph will sent a email to Matthias Schröder)                                             Messwert == 0 ~ 0.009999,                                             TRUE ~ Messwert)) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  gwq_subs <- gwq_data %>%   dplyr::count(.data$cas_number, .data$CensorCode) %>%   tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%   dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                 nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                 percent_nc = 100*nc/n_total) %>%   dplyr::rename(n_lt = lt,                 n_nc = nc) %>%   dplyr::left_join(norman_s0_in_wasserportal) %>%   dplyr::rename(name_norman = .data$Name_Dashboard)   readr::write_csv(gwq_subs, \"gwq_subs.csv\")  DT::datatable(gwq_subs, filter = \"top\", rownames = FALSE)  samples <- gwq_data %>%    dplyr::rename(name_norman = .data$Name_Dashboard) %>%    dplyr::select(name_norman,                  cas_number,                  Messstellennummer,                  Datum,                  CensorCode,                  Messwert,                  Einheit)   samples_by_para_and_station <- gwq_data %>%   dplyr::count(.data$cas_number,                   .data$Messstellennummer,                   .data$CensorCode) %>%   tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%   dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                 nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                 percent_nc = 100*nc/n_total) %>%   dplyr::rename(n_lt = lt,                 n_nc = nc) %>%   dplyr::left_join(norman_s0_in_wasserportal) %>%   dplyr::rename(name_norman = .data$Name_Dashboard) %>%   dplyr::left_join(gwq_master, by = c(Messstellennummer = \"Nummer\")) %>%   dplyr::arrange(dplyr::desc(percent_nc))   # samples_by_category_and_station <- samples_by_para_and_station  %>% #   dplyr::group_by(.data$category, #                   .data$category_name, #                   .data$Messstellennummer) %>% #   dplyr::summarise(n_lt = sum(n_lt), #                    n_nc = sum(n_nc), #                    n_total = sum(n_total)) %>% #   dplyr::mutate(percent_nc = 100*n_nc/n_total) %>% #   dplyr::arrange(dplyr::desc(percent_nc))  gwq_subs_stations_n_abovedetection <- samples_by_para_and_station  %>%   dplyr::filter(n_nc > 0) %>%   dplyr::group_by(.data$cas_number) %>%   dplyr::summarise(n_stations_abovedetection = dplyr::n())  gwq_subs_stations_n_paras_abovedetection <- samples_by_para_and_station  %>%   dplyr::filter(n_nc > 0) %>%   dplyr::group_by(#.data$category,                   #.data$category_name,                   .data$Messstellennummer) %>%   dplyr::summarise(n_paras_abovedetection = dplyr::n()) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  # gwq_subs_stations_n_paras_abovedetection_wide <- gwq_subs_stations_n_paras_abovedetection %>% #   dplyr::ungroup() %>% #   dplyr::select(Messstellennummer, category, n_paras_abovedetection) %>% #   tidyr::pivot_wider(names_from = \"category\", #                      names_prefix = \"cat_\", #                      values_from = \"n_paras_abovedetection\") %>% #   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))   samples_by_para_and_station_n <- samples_by_para_and_station %>%   dplyr::group_by(name_norman,                   cas_number) %>%   dplyr::summarise(n_stations_sampled = dplyr::n(),                    n_stations_total = length(unique(gwq_master$Nummer)),                    n_lt = sum(n_lt),                    n_nc = sum(n_nc),                    n_total = sum(n_total)) %>%   dplyr::left_join(gwq_subs_stations_n_abovedetection) %>%   dplyr::mutate(n_stations_abovedetection = ifelse(is.na(n_stations_abovedetection),                                                    0,                                                    n_stations_abovedetection),                 n_abovedetection = ifelse(is.na(n_nc), 0, n_nc),                 n_belowdetection = ifelse(is.na(n_lt), 0, n_lt),                 percent_samples_abovedetection = 100*n_nc/n_total,                 percent_stations_abovedetection = 100*n_stations_abovedetection/n_stations_total,                 percent_stations_sampled = 100*n_stations_sampled/n_stations_total) %>%   dplyr::select(name_norman,                 cas_number,                 n_stations_abovedetection,                 n_stations_sampled,                 n_stations_total,                 percent_stations_abovedetection,                 percent_stations_sampled,                 n_belowdetection,                 n_abovedetection,                 n_total,                 percent_samples_abovedetection) %>%   dplyr::arrange(dplyr::desc(percent_stations_abovedetection),                  dplyr::desc(percent_samples_abovedetection))      ### Export data to EXCEL gwq_data_list <- list(norman_lists_table = norman_lists_table,                        cas_wasserportal = cas_wasserportal,                       cas_reach = cas_reach,                        ubapmt_missing_on_zenodo = missing_on_zenodo,                       norman_s0_in_wasserportal = norman_s0_in_wasserportal,                       samples = samples,                       samples_by_para = gwq_subs %>%                         dplyr::arrange(dplyr::desc(percent_nc)),                       samples_by_para_and_station = samples_by_para_and_station,                       samples_by_para_and_station_n = samples_by_para_and_station_n)                       #samples_by_stations_para_above = gwq_subs_stations_n_paras_abovedetection_wide)                       #samples_by_category_and_station = samples_by_category_and_station)    openxlsx::write.xlsx(x = gwq_data_list,                      file = \"wasserportal_gwq_norman-list_s0_v1.0.0.xlsx\",                      overwrite = TRUE)"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_norman-lists.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"PROMISCES: Norman Lists","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package install.packages('wasserportal')"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_norman-lists.html","id":"get-norman-lists","dir":"Articles","previous_headings":"","what":"Get Norman Lists","title":"PROMISCES: Norman Lists","text":"","code":"library(wasserportal)  download_file <- function(url,                              tdir = tempdir() ) { filename <- basename(url) t_path <- file.path(tdir, filename) download.file(url, dest= t_path, mode=\"wb\")  t_path }  ### Download S0 | SUSDAT | Merged NORMAN Suspect List: SusDat ### Version: NORMAN-SLE-S0.0.4.1 (2021-01-18) ### DOI: 10.5281/zenodo.5873975  norman_s0_path  <- download_file(\"https://zenodo.org/record/5873975/files/susdat_2022-01-18-104316.csv\") norman_s0 <- readr::read_csv(norman_s0_path) #> Warning: One or more parsing issues, see `problems()` for details #> Rows: 109631 Columns: 68 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (41): Norman_SusDat_ID, Name, Name_Dashboard, Name_ChemSpider, Name_IUPA... #> dbl (27): PubChem_CID, Monoiso_Mass, M+H+, M-H-, Pred_RTI_Positive_ESI, Pred... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  ### Download S36 | UBAPMT | Potential Persistent, Mobile and Toxic (PMT) substances ### Version: NORMAN-SLE-S36.0.2.1 (2020-12-15) ### DOI: \"10.5281/zenodo.4323239\"  norman_s36_ubapmt_path  <- download_file(\"https://zenodo.org/record/4323239/files/S36_UBAPMT_Dec2020.csv\") norman_s36_ubapmt <- readr::read_csv(norman_s36_ubapmt_path) #> Rows: 258 Columns: 35 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (33): CAS_Number, Name, List, ProtectedCAS, REACH_Emission_Likelihood, P... #> dbl  (2): Largest_Fragment_mass, PubChemCID_largestFragment #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.   ### Download S90 | ZEROPMBOX1 | ZeroPM Box 1 Substances ### Version: Version NORMAN-SLE-S90.0.1.0 (2021-01-15) ### DOI: 10.5281/zenodo.5854252  norman_s90_zeropm_path  <- download_file(\"https://zenodo.org/record/5854252/files/ZeroPM_Box1.csv\") norman_s90_zeropm <- readr::read_csv(norman_s90_zeropm_path) #> New names: #> Rows: 38 Columns: 13 #> ── Column specification #> ──────────────────────────────────────────────────────── Delimiter: \",\" chr #> (11): CAS, Name, DTXSID, InChIKey, SMILES, InChI, MolecularFormula, IUPA... dbl #> (2): PubChem_CID, MonoisotopicMass #> ℹ Use `spec()` to retrieve the full column specification for this data. ℹ #> Specify the column types or set `show_col_types = FALSE` to quiet this message. #> • `Synonym` -> `Synonym...11` #> • `Synonym` -> `Synonym...12` #> • `Synonym` -> `Synonym...13`   cas_wasserportal <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\",                                                   encoding = \"UTF-8\") cas_reach <- wasserportal::readPackageFile(file = \"cas_reach.csv\")  ubapmt_publication <- cas_reach %>%   dplyr::filter(.data$cas_number %in% unique(cas_wasserportal$cas_number))   ubapmt_zenodo <- norman_s36_ubapmt %>%   dplyr::filter(.data$CAS_Number %in% unique(cas_wasserportal$cas_number)) %>%   dplyr::rename(cas_number = .data$CAS_Number)  missing_on_zenodo <- cas_reach %>%   dplyr::mutate(zenodo = dplyr::if_else(.data$cas_number %in% unique(ubapmt_zenodo$cas_number),                                         \"yes\",                                         NA_character_),                 publication = dplyr::if_else(.data$cas_number %in% unique(ubapmt_publication$cas_number),                                         \"yes\",                                         NA_character_)) %>%   dplyr::filter(publication == \"yes\" | zenodo == \"yes\") %>%   dplyr::relocate(tidyselect::all_of(c(\"publication\", \"zenodo\")), .before = .data$emission_likelihood)   DT::datatable(missing_on_zenodo, filter = \"top\", rownames = FALSE)"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_norman-lists.html","id":"get-gw-quality-from-wasserportal","dir":"Articles","previous_headings":"","what":"Get GW Quality from Wasserportal","title":"PROMISCES: Norman Lists","text":"","code":"# Load R package  ### For details see: ### https://kwb-r.github.io/wasserportal/articles/groundwater.html ### JSON files (see below) are build every day automatically at 5a.m. with ### continious integration, for build status, see here: ### https://github.com/KWB-R/wasserportal/actions/workflows/pkgdown.yaml  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%   dplyr::filter(.data$Parameter %in% cas_wasserportal$Parameter) %>%   dplyr::inner_join(cas_wasserportal, by = \"Parameter\") %>%   dplyr::inner_join(norman_s0_in_wasserportal, by = \"cas_number\") %>%    dplyr::filter(.data$logKow_EPISuite <= 4.5,                 !is.na(.data$`LC50_48_hr_ug/L`)) %>%    dplyr::mutate(Messstellennummer = as.character(Messstellennummer), ## CensorCode: either \"below\" (less than) for concentration below detection limit ## (value is detection limit) or \"nc\" (not censored) for concentration above ## detection limit                 CensorCode = dplyr::case_when(Messwert <= 0 ~ \"lt\",                                               TRUE ~ \"nc\"),                 Messwert = dplyr::case_when(Messwert < 0 ~ abs(Messwert), ### Only two decimal numbers are exported by Wasserportal, but some sustances ### have lower detection limit, e.g. 0.002 which results in -0.00 export, thus ### the dummy detection limit 0.00999 was introduced (until fixed by Senate: ### Christoph will sent a email to Matthias Schröder)                                             Messwert == 0 ~ 0.009999,                                             TRUE ~ Messwert)) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  gwq_subs <- gwq_data %>%   dplyr::count(.data$cas_number, .data$CensorCode) %>%   tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%   dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                 nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                 percent_nc = 100*nc/n_total) %>%   dplyr::rename(n_lt = lt,                 n_nc = nc) %>%   dplyr::left_join(norman_s0_in_wasserportal) %>%   dplyr::rename(name_norman = .data$Name_Dashboard) #> Joining, by = \"cas_number\"   readr::write_csv(gwq_subs, \"gwq_subs.csv\")  DT::datatable(gwq_subs, filter = \"top\", rownames = FALSE)"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_norman-lists.html","id":"norman-substances-in-wasserportal","dir":"Articles","previous_headings":"","what":"Norman Substances in Wasserportal","title":"PROMISCES: Norman Lists","text":"Filter criteria: - log Kow (column logKow_EPISuite <= 4.5) - toxicity value (column LC50_48_hr_ug/ NA)","code":"gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::filter(.data$percent_samples_abovedetection > 0) %>%    dplyr::left_join(norman_s0_in_wasserportal) %>%   dplyr::arrange(.data$`LC50_48_hr_ug/L`) %>%    dplyr::mutate(label = sprintf(\"%s (%s, LC50_48_hr_ug/L: %.1f, logKow_EPISuite: %.1f : \",                                  .data$name_norman,                                  .data$cas_number,                                 .data$`LC50_48_hr_ug/L`,                                 .data$logKow_EPISuite                                 )) #> Joining, by = \"cas_number\"  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$percent_samples_abovedetection,                                 y = forcats::fct_reorder(.data$label, .data$percent_samples_abovedetection, .desc = TRUE),                                label = sprintf(\"%2.2f %% (n_samples = %d, n_stations = %d)\", .data$percent_samples_abovedetection,.data$n_total, .data$n_stations_sampled),                                fill = .data$logKow_EPISuite)) +                                #ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 1.8, hjust = -0.01) +   ggplot2::xlim(c(0,120)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(#subtitle = sprintf(\"%d / %d substances (>= 1 value above detection limit)\",                 #                sum(gwq_subs_plot$n_abovedetection > 0),                 #                   nrow(gwq_subs_plot)),                                          y = \"\",                  x = \"Percent of Samples above Detection Limit (%)\")  g1 ggplot2::ggsave(filename = \"wasserportal_norman-s0-substances_only-above-detection-limit.jpeg\",                    plot = g1,                   width = 40,                    height = 20,                   units = \"cm\")"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_reach-uba.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"PROMISCES: Reach (UBA)","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package install.packages('wasserportal')"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_reach-uba.html","id":"get-gw-quality-from-wasserportal","dir":"Articles","previous_headings":"","what":"Get GW Quality from Wasserportal","title":"PROMISCES: Reach (UBA)","text":"","code":"# Load R package library(wasserportal)  categories <- wasserportal::readPackageFile(file = \"categories.csv\")   cas_reach <- wasserportal::readPackageFile(file = \"cas_reach.csv\") %>%    dplyr::left_join(categories) #> Joining, by = \"category\"  cas_wasserportal <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\",                                                   encoding = \"UTF-8\") %>%     dplyr::inner_join(cas_reach, by = \"cas_number\")   ### Remove duplicated Wasserportal substances (same CAS number but different, names!) cas_wasserportal_clean <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\") %>%     dplyr::count(cas_number) %>%   dplyr::select(-n) %>%    dplyr::filter(!is.na(cas_number)) %>%    dplyr::inner_join(cas_reach, by = \"cas_number\")    ### For details see: ### https://kwb-r.github.io/wasserportal/articles/groundwater.html ### JSON files (see below) are build every day automatically at 5a.m. with ### continious integration, for build status, see here: ### https://github.com/KWB-R/wasserportal/actions/workflows/pkgdown.yaml  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%   #dplyr::filter(Parameter %in% cas_wasserportal$Parameter) %>%    dplyr::inner_join(cas_wasserportal, by = \"Parameter\") %>%   dplyr::mutate(Messstellennummer = as.character(Messstellennummer), ## CensorCode: either \"below\" (less than) for concentration below detection limit  ## (value is detection limit) or \"nc\" (not censored) for concentration above  ## detection limit                 CensorCode = dplyr::case_when(Messwert <= 0 ~ \"lt\",                                               TRUE ~ \"nc\"),                 Messwert = dplyr::case_when(Messwert < 0 ~ abs(Messwert), ### Only two decimal numbers are exported by Wasserportal, but some sustances  ### have lower detection limit, e.g. 0.002 which results in -0.00 export, thus  ### the dummy detection limit 0.00999 was introduced (until fixed by Senate:  ### Christoph will sent a email to Matthias Schröder)                                             Messwert == 0 ~ 0.009999,                                              TRUE ~ Messwert)) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  gwq_subs <- gwq_data %>%     dplyr::count(.data$cas_number, .data$CensorCode) %>%    tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%    dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                  nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                  percent_nc = 100*nc/n_total) %>%    dplyr::rename(n_lt = lt,                  n_nc = nc) %>%    dplyr::left_join(cas_reach[, c(\"category\", \"category_name\", \"name\", \"cas_number\")]) %>%   dplyr::rename(name_uba = name) %>%    dplyr::select(category, category_name, name_uba, cas_number,n_lt, n_nc, n_total, percent_nc) #> Joining, by = \"cas_number\"   readr::write_csv(gwq_subs, \"gwq_subs.csv\")  DT::datatable(gwq_subs, filter = \"top\", rownames = FALSE)"},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_reach-uba.html","id":"total","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"Total","title":"PROMISCES: Reach (UBA)","text":"","code":"g <- cas_reach %>%   dplyr::mutate(source = sprintf(\"UBA (n = %d)\", nrow(cas_reach))) %>%    dplyr::bind_rows(cas_wasserportal_clean %>%                     dplyr::mutate(source = sprintf(\"Wasserportal (n = %d)\",                                                    nrow(cas_wasserportal_clean)))) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = forcats::as_factor(.data$category),                                           fill = .data$source,                                          col = .data$source)) +    ggplot2::geom_histogram(stat = \"count\", alpha = 0.5) +   ggplot2::geom_text(stat=\"count\", ggplot2::aes(label=..count..), vjust=-0.5, position=\"stack\") +   ggplot2::scale_x_discrete() +   ggplot2::theme_bw() +   ggplot2::theme(legend.position=\"top\") +   ggplot2::labs(y = \"Number of Substances\", x = \"Category\") #> Warning: Ignoring unknown parameters: binwidth, bins, pad    g ggplot2::ggsave(filename = \"wasserportal_number-of-reach-substances.jpeg\",                    plot = g,                   width = 14,                    height = 11,                   units = \"cm\")    #plotly::ggplotly(g)"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_reach-uba.html","id":"by-station","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"By Station","title":"PROMISCES: Reach (UBA)","text":"","code":"by_stations <- samples_by_para_and_station_n %>%    dplyr::select(.data$name_uba, .data$n_stations_sampled) #> Adding missing grouping variables: `category`, `category_name`  wasserportal_substances <- samples_by_para_and_station_n %>%    dplyr::arrange(.data$category,                   dplyr::desc(.data$n_total),                   dplyr::desc(.data$n_stations_sampled),                   .data$name_uba) %>%    dplyr::select(.data$category,                  .data$name_uba,                 .data$cas_number,                  .data$n_total,                 .data$n_stations_sampled) #> Adding missing grouping variables: `category_name`   DT::datatable(wasserportal_substances, filter = \"top\", rownames = FALSE) wasserportal_substances_plot <- wasserportal_substances %>%   dplyr::mutate(label = sprintf(\"%s (%s, stations: %d)\",                                  .data$name_uba,                                  .data$cas_number,                                  .data$n_stations_sampled),                 category = forcats::as_factor(.data$category))  wasserportal_substances_plot$label <- factor(wasserportal_substances_plot$label,                                               levels = wasserportal_substances_plot$label) wasserportal_substances_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$n_total,                                 y = .data$label,                                 label = .data$n_total,                                fill = .data$category)) +   ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 2, nudge_x = -1) +   ggplot2::theme_bw() +   ggplot2::labs(subtitle = sprintf(\"%d Wasserportal substances (listed in UBA table)\",                                 nrow(wasserportal_substances_plot)),                 y = \"\",                  x = \"Number of Samples\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::arrange(.data$category) %>%    dplyr::mutate(label = sprintf(\"cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$percent_samples_abovedetection,                                 y = forcats::fct_reorder(.data$label, .data$percent_samples_abovedetection, .desc = TRUE),                                label = sprintf(\"%2.2f %% (n_samples = %d, n_stations = %d)\", .data$percent_samples_abovedetection,.data$n_total, .data$n_stations_sampled),                                fill = as.factor(.data$category))) +                                ggplot2::scale_fill_brewer(palette=\"RdYlGn\", name = \"Category\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 1.8, hjust = -0.01) +   ggplot2::xlim(c(0,40)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = sprintf(\"%d / %d substances (>= 1 value above detection limit)\",                                 sum(gwq_subs_plot$n_abovedetection > 0),                                    nrow(gwq_subs_plot)),                                          y = \"\",                  x = \"Percent of Samples above Detection Limit (%)\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") n_cat <- samples_by_category_and_station %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_samples_abovedetection = sum(n_nc),                    n_samples_total = sum(n_total),                    n_samples_percent_abovedetection = 100*sum(n_nc)/sum(n_total)) %>%    dplyr::arrange(dplyr::desc(.data$n_samples_abovedetection))  g1 <- samples_by_category_and_station %>%    dplyr::left_join(n_cat) %>%    dplyr::filter(n_nc > 0)  %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_nc,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),                                label = .data$n_nc,                                fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::geom_text(mapping = ggplot2::aes(     x = .data$n_samples_abovedetection,     y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),     label = sprintf(\"%3.1f %% (n_samples = %d)\", .data$n_samples_percent_abovedetection, .data$n_samples_total)),                      inherit.aes = FALSE,                      size = 1.8,                       position = ggplot2::position_nudge(x = 20),     fontface = \"bold\") +   ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Samples Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") n_cat <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_paras_abovedetection_total = sum(n_paras_abovedetection)) %>%    dplyr::arrange(dplyr::desc(.data$n_paras_abovedetection_total))  g1 <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::left_join(n_cat) %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_paras_abovedetection,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_paras_abovedetection_total, .desc = TRUE),                              label = .data$n_paras_abovedetection,                              fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +    #ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Parameters Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_paras-by-station_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::mutate(n_stations_belowdetection = .data$n_stations_sampled - .data$n_stations_abovedetection,                  n_stations_notsampled = .data$n_stations_total - .data$n_stations_sampled) %>%    dplyr::select(\"category\",                 \"category_name\",                 \"name_uba\",                 \"cas_number\",                 \"n_stations_abovedetection\",                  \"n_stations_belowdetection\",                 \"n_stations_notsampled\") %>%    tidyr::pivot_longer(cols = tidyselect::starts_with(\"n_stations\"),                       names_to = \"station_type\",                       values_to = \"station_value\") %>%    dplyr::filter(.data$station_value > 0) %>%    dplyr::mutate(station_type = stringr::str_remove(.data$station_type,                                                     \"n_stations_\")) %>%   dplyr::mutate(station_type = kwb.utils::multiSubstitute(.data$station_type,                                                           list(\"abovedetection\" = \"above detection\",                                                                \"belowdetection\" = \"below detection\",                                                                 \"notsampled\" = \"not sampled\"))) %>%    dplyr::mutate(label = sprintf(\"Cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number),                 category = forcats::as_factor(.data$category))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$station_value,                                 y = .data$label,                                label = .data$station_value,                                fill = forcats::fct_rev(.data$station_type))) +   ggplot2::scale_fill_manual(values = c(\"lightgrey\", \"darkgreen\", \"red\")) +    ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col(alpha = 0.75) +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(title = \"Groundwater Quality by Station\",                  fill = \"\",                  caption = \"above detection: number of stations with at least 1 sample above detection limit\\nbelow detection: number of station with all samples below detection limit\\nnot sampled: number of stations not sampled\",                 subtitle = sprintf(\"for %d GW quality stations\",                                    length(unique(gwq_master$Nummer))),                 y = \"\",                  x = \"Number of Monitoring Stations\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_by-monitoring-station.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") stations_abovedetection <- samples_by_para_and_station %>%    dplyr::filter(.data$n_nc > 0) %>%    dplyr::select(cas_number, Messstellennummer, n_nc, n_lt) %>%    dplyr::arrange(.data$n_nc)  g1_data <- gwq_data %>%    dplyr::right_join(y = stations_abovedetection,                      by = c(\"cas_number\", \"Messstellennummer\")) %>%    dplyr::mutate(Datum = as.Date(Datum),                  CensorCode = kwb.utils::multiSubstitute(.data$CensorCode,                                                           list(\"nc\" = \"above detection\",                                                                 \"lt\" = \"below detection\")),                  label = sprintf(\"%s (%s): %s (n_above = %d, n_below = %d)\",                                  .data$name,                                  .data$cas_number,                                 .data$Messstellennummer,                                 .data$n_nc,                                 .data$n_lt))   labels <- unique(g1_data$label)  plot_timeseries <- function(sel_label) {   g1_data %>%    dplyr::filter(.data$label == sel_label) %>%    dplyr::arrange(.data$n_nc, .data$label, .data$Datum) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = .data$Datum,                                           y = .data$Messwert,                                          col = .data$CensorCode                                          )) +   ggplot2::scale_color_manual(values = c(\"red\", \"darkgreen\")) +   ggplot2::geom_point() +   ggplot2::theme_bw() +   ggplot2::labs(title = sel_label) }  g_plots <- lapply(labels, function(sel_label) {plot_timeseries(sel_label)})  pdff <- \"wasserportal_reach-substances_timeseries.pdf\" mp <- gridExtra::marrangeGrob(g_plots, nrow=1, ncol=1) ggplot2::ggsave(pdff,                 plot = mp,                  width = 30,                 height = 20,                  units = \"cm\") n_samples_all <- samples %>%    dplyr::count(.data$name_uba) %>%    dplyr::rename(n_all = \"n\")   n_samples_above <- samples %>%    dplyr::filter(CensorCode == \"nc\") %>%    dplyr::count(.data$name_uba) %>%    dplyr::rename(n_above = \"n\")  n_samples <- dplyr::left_join(n_samples_all, n_samples_above) %>%    dplyr::mutate(label = as.factor(sprintf(\"%s (n_above = %d, n_samples = %d)\",                                  .data$name_uba,                                 .data$n_above,                                 .data$n_all))   ) #> Joining, by = \"name_uba\"  substances_above <- samples %>%  dplyr::filter(CensorCode == \"nc\") %>%  dplyr::pull(.data$name_uba) %>%  unique()  detection_limits <- samples %>%   dplyr::filter(CensorCode == \"lt\",                 name_uba %in% substances_above) %>%    dplyr::mutate(Messwert = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = .data$Messwert * 1000,                                           false = .data$Messwert),                 Einheit = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = \"\\u00B5g/l\",                                           false = .data$Einheit),                 year = as.integer(format(as.Date(.data$Datum), format = \"%Y\"))) %>%    dplyr::count(.data$name_uba, .data$year, .data$Messwert) %>%    dplyr::left_join(n_samples)  #> Joining, by = \"name_uba\"   plot_detection_limits <- function(sel_sub) {   g1 <- detection_limits %>%    dplyr::filter(name_uba == sel_sub) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = .data$year,                                          y = .data$n,                                          col = forcats::fct_rev(as.factor(.data$Messwert)))) +   ggplot2::scale_color_brewer(palette=\"RdYlGn\") +   ggplot2::geom_point() +    ggplot2::labs(title = sprintf(\"%s\", sel_sub),                 x = \"Year\",                  y = \"Number of Samples below Detection Limit\",                 col = \"Detection Limit (\\u00B5g/l)\") +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") g1 }  g_plots <- lapply(substances_above, function(sel_sub) {plot_detection_limits(sel_sub)})  pdff <- \"wasserportal_reach-substances_detection-limits.pdf\" mp <- gridExtra::marrangeGrob(g_plots, nrow=1, ncol=1) ggplot2::ggsave(pdff,                 plot = mp,                  width = 20,                 height = 15,                  units = \"cm\")   g1 <- samples %>%   dplyr::left_join(n_samples) %>%    dplyr::filter(CensorCode == \"nc\") %>%    dplyr::mutate(Messwert = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = .data$Messwert * 1000,                                           false = .data$Messwert),                 Einheit = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = \"\\u00B5g/l\",                                           false = .data$Einheit),                 category = as.factor(category)) %>%    ggplot2::ggplot(mapping = ggplot2::aes(y = forcats::fct_reorder(.data$label,                                                                    .data$n_above,                                                                    .desc = TRUE),                                          x = .data$Messwert,                                          fill = .data$category)) +   ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +     ggplot2::scale_y_discrete(limits = rev) +   ggplot2::scale_x_log10() +   ggplot2::geom_boxplot() +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Substance\",                  x = \"Concentration (\\u00B5g / l)\") +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") #> Joining, by = \"name_uba\"  g1 pdff <- \"wasserportal_reach-substances_boxplot.pdf\" ggplot2::ggsave(pdff,                 plot = g1,                  width = 25,                 height = 15,                  units = \"cm\")"},{"path":"https://kwb-r.github.io/wasserportal/articles/reach.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"Reach","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package install.packages('wasserportal')"},{"path":"https://kwb-r.github.io/wasserportal/articles/reach.html","id":"get-gw-quality-from-wasserportal","dir":"Articles","previous_headings":"","what":"Get GW Quality from Wasserportal","title":"Reach","text":"","code":"# Load R package library(wasserportal)  categories <- wasserportal::readPackageFile(file = \"categories.csv\")   cas_reach <- wasserportal::readPackageFile(file = \"cas_reach.csv\") %>%    dplyr::left_join(categories) #> Joining, by = \"category\"  cas_wasserportal <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\") %>%     dplyr::inner_join(cas_reach, by = \"cas_number\")   ### Remove duplicated Wasserportal substances (same CAS number but different, names!) cas_wasserportal_clean <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\") %>%     dplyr::count(cas_number) %>%   dplyr::select(-n) %>%    dplyr::filter(!is.na(cas_number)) %>%    dplyr::inner_join(cas_reach, by = \"cas_number\")    ### For details see: ### https://kwb-r.github.io/wasserportal/articles/groundwater.html ### JSON files (see below) are build every day automatically at 5a.m. with ### continious integration, for build status, see here: ### https://github.com/KWB-R/wasserportal/actions/workflows/pkgdown.yaml  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%   #dplyr::filter(Parameter %in% cas_wasserportal$Parameter) %>%    dplyr::inner_join(cas_wasserportal, by = \"Parameter\") %>%   dplyr::mutate(Messstellennummer = as.character(Messstellennummer), ## CensorCode: either \"below\" (less than) for concentration below detection limit  ## (value is detection limit) or \"nc\" (not censored) for concentration above  ## detection limit                 CensorCode = dplyr::case_when(Messwert <= 0 ~ \"lt\",                                               TRUE ~ \"nc\"),                 Messwert = dplyr::case_when(Messwert < 0 ~ abs(Messwert), ### Only two decimal numbers are exported by Wasserportal, but some sustances  ### have lower detection limit, e.g. 0.002 which results in -0.00 export, thus  ### the dummy detection limit 0.00999 was introduced (until fixed by Senate:  ### Christoph will sent a email to Matthias Schröder)                                             Messwert == 0 ~ 0.009999,                                              TRUE ~ Messwert)) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  gwq_subs <- gwq_data %>%     dplyr::count(.data$cas_number, .data$CensorCode) %>%    tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%    dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                  nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                  percent_nc = 100*nc/n_total) %>%    dplyr::rename(n_lt = lt,                  n_nc = nc) %>%    dplyr::left_join(cas_reach[, c(\"category\", \"category_name\", \"name\", \"cas_number\")]) %>%   dplyr::rename(name_uba = name) %>%    dplyr::select(category, category_name, name_uba, cas_number,n_lt, n_nc, n_total, percent_nc) #> Joining, by = \"cas_number\"   readr::write_csv(gwq_subs, \"gwq_subs.csv\")  DT::datatable(gwq_subs, filter = \"top\", rownames = FALSE)"},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/reach.html","id":"total","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"Total","title":"Reach","text":"","code":"g <- cas_reach %>%   dplyr::mutate(source = sprintf(\"UBA (n = %d)\", nrow(cas_reach))) %>%    dplyr::bind_rows(cas_wasserportal_clean %>%                     dplyr::mutate(source = sprintf(\"Wasserportal (n = %d)\",                                                    nrow(cas_wasserportal_clean)))) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = forcats::as_factor(.data$category),                                           fill = .data$source,                                          col = .data$source)) +    ggplot2::geom_histogram(stat = \"count\", alpha = 0.5) +   ggplot2::geom_text(stat=\"count\", ggplot2::aes(label=..count..), vjust=-0.5, position=\"stack\") +   ggplot2::scale_x_discrete() +   ggplot2::theme_bw() +   ggplot2::theme(legend.position=\"top\") +   ggplot2::labs(y = \"Number of Substances\", x = \"Category\") #> Warning: Ignoring unknown parameters: binwidth, bins, pad    g ggplot2::ggsave(filename = \"wasserportal_number-of-reach-substances.jpeg\",                    plot = g,                   width = 14,                    height = 11,                   units = \"cm\")    #plotly::ggplotly(g)"},{"path":"https://kwb-r.github.io/wasserportal/articles/reach.html","id":"by-station","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"By Station","title":"Reach","text":"","code":"by_stations <- samples_by_para_and_station_n %>%    dplyr::select(.data$name_uba, .data$n_stations_sampled) #> Adding missing grouping variables: `category`, `category_name`  wasserportal_substances <- samples_by_para_and_station_n %>%    dplyr::arrange(.data$category,                   dplyr::desc(.data$n_total),                   dplyr::desc(.data$n_stations_sampled),                   .data$name_uba) %>%    dplyr::select(.data$category,                  .data$name_uba,                 .data$cas_number,                  .data$n_total,                 .data$n_stations_sampled) #> Adding missing grouping variables: `category_name`   DT::datatable(wasserportal_substances, filter = \"top\", rownames = FALSE) wasserportal_substances_plot <- wasserportal_substances %>%   dplyr::mutate(label = sprintf(\"%s (%s, stations: %d)\",                                  .data$name_uba,                                  .data$cas_number,                                  .data$n_stations_sampled),                 category = forcats::as_factor(.data$category))  wasserportal_substances_plot$label <- factor(wasserportal_substances_plot$label,                                               levels = wasserportal_substances_plot$label) wasserportal_substances_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$n_total,                                 y = .data$label,                                 label = .data$n_total,                                fill = .data$category)) +   ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 2, nudge_x = -1) +   ggplot2::theme_bw() +   ggplot2::labs(subtitle = sprintf(\"%d Wasserportal substances (listed in UBA table)\",                                 nrow(wasserportal_substances_plot)),                 y = \"\",                  x = \"Number of Samples\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::mutate(label = sprintf(\"Cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number),                 category = forcats::as_factor(.data$category))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$percent_samples_abovedetection,                                 y = forcats::fct_reorder(.data$label, .data$percent_samples_abovedetection, .desc = TRUE),                                label = sprintf(\"%2.2f %% (n_samples = %d, n_stations = %d)\", .data$percent_samples_abovedetection,.data$n_total, .data$n_stations_sampled),                                fill = .data$category)) +                             ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 1.8, hjust = -0.01) +   ggplot2::xlim(c(0,40)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = sprintf(\"%d / %d substances (>= 1 value above detection limit)\",                                 sum(gwq_subs_plot$n_abovedetection > 0),                                    nrow(gwq_subs_plot)),                                          y = \"\",                  x = \"Percent of Samples above Detection Limit (%)\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") n_cat <- samples_by_category_and_station %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_samples_abovedetection = sum(n_nc),                    n_samples_total = sum(n_total),                    n_samples_percent_abovedetection = 100*sum(n_nc)/sum(n_total)) %>%    dplyr::arrange(dplyr::desc(.data$n_samples_abovedetection))  g1 <- samples_by_category_and_station %>%    dplyr::left_join(n_cat) %>%    dplyr::filter(n_nc > 0)  %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_nc,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),                                label = .data$n_nc,                                fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::geom_text(mapping = ggplot2::aes(     x = .data$n_samples_abovedetection,     y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),     label = sprintf(\"%3.1f %% (n_samples = %d)\", .data$n_samples_percent_abovedetection, .data$n_samples_total)),                      inherit.aes = FALSE,                      size = 1.8,                       position = ggplot2::position_nudge(x = 20),     fontface = \"bold\") +   ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Samples Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") n_cat <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_paras_abovedetection_total = sum(n_paras_abovedetection)) %>%    dplyr::arrange(dplyr::desc(.data$n_paras_abovedetection_total))  g1 <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::left_join(n_cat) %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_paras_abovedetection,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_paras_abovedetection_total, .desc = TRUE),                              label = .data$n_paras_abovedetection,                              fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +    #ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Parameters Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_paras-by-station_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::mutate(n_stations_belowdetection = .data$n_stations_sampled - .data$n_stations_abovedetection,                  n_stations_notsampled = .data$n_stations_total - .data$n_stations_sampled) %>%    dplyr::select(\"category\",                 \"category_name\",                 \"name_uba\",                 \"cas_number\",                 \"n_stations_abovedetection\",                  \"n_stations_belowdetection\",                 \"n_stations_notsampled\") %>%    tidyr::pivot_longer(cols = tidyselect::starts_with(\"n_stations\"),                       names_to = \"station_type\",                       values_to = \"station_value\") %>%    dplyr::filter(.data$station_value > 0) %>%    dplyr::mutate(station_type = stringr::str_remove(.data$station_type,                                                     \"n_stations_\")) %>%   dplyr::mutate(station_type = kwb.utils::multiSubstitute(.data$station_type,                                                           list(\"abovedetection\" = \"above detection\",                                                                \"belowdetection\" = \"below detection\",                                                                 \"notsampled\" = \"not sampled\"))) %>%    dplyr::mutate(label = sprintf(\"Cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number),                 category = forcats::as_factor(.data$category))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$station_value,                                 y = .data$label,                                label = .data$station_value,                                fill = forcats::fct_rev(.data$station_type))) +   ggplot2::scale_fill_manual(values = c(\"lightgrey\", \"darkgreen\", \"red\")) +    ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col(alpha = 0.75) +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(title = \"Groundwater Quality by Station\",                  fill = \"\",                  caption = \"above detection: number of stations with at least 1 sample above detection limit\\nbelow detection: number of station with all samples below detection limit\\nnot sampled: number of stations not sampled\",                 subtitle = sprintf(\"for %d GW quality stations\",                                    length(unique(gwq_master$Nummer))),                 y = \"\",                  x = \"Number of Monitoring Stations\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_by-monitoring-station.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") stations_abovedetection <- samples_by_para_and_station %>%    dplyr::filter(.data$n_nc > 0) %>%    dplyr::select(cas_number, Messstellennummer, n_nc, n_lt) %>%    dplyr::arrange(.data$n_nc)  g1_data <- gwq_data %>%    dplyr::right_join(y = stations_abovedetection,                      by = c(\"cas_number\", \"Messstellennummer\")) %>%    dplyr::mutate(Datum = as.Date(Datum),                  CensorCode = kwb.utils::multiSubstitute(.data$CensorCode,                                                           list(\"nc\" = \"above detection\",                                                                 \"lt\" = \"below detection\")),                  label = sprintf(\"%s (%s): %s (n_above = %d, n_below = %d)\",                                  .data$name,                                  .data$cas_number,                                 .data$Messstellennummer,                                 .data$n_nc,                                 .data$n_lt))   labels <- unique(g1_data$label)  plot_timeseries <- function(sel_label) {   g1_data %>%    dplyr::filter(.data$label == sel_label) %>%    dplyr::arrange(.data$n_nc, .data$label, .data$Datum) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = .data$Datum,                                           y = .data$Messwert,                                          col = .data$CensorCode                                          )) +   ggplot2::scale_color_manual(values = c(\"red\", \"darkgreen\")) +   ggplot2::geom_point() +   ggplot2::theme_bw() +   ggplot2::labs(title = sel_label) }  g_plots <- lapply(labels, function(sel_label) {plot_timeseries(sel_label)})  pdff <- \"wasserportal_reach-substances_timeseries.pdf\" mp <- gridExtra::marrangeGrob(g_plots, nrow=1, ncol=1) ggplot2::ggsave(pdff,                 plot = mp,                  width = 30,                 height = 20,                  units = \"cm\") n_samples <- samples %>%    dplyr::count(.data$name_uba)  g1 <- samples %>%   dplyr::left_join(n_samples) %>%    dplyr::filter(CensorCode == \"nc\") %>%    dplyr::mutate(label = sprintf(\"%s (n=%d)\",                                  .data$name_uba,                                  .data$n),                 Messwert = dplyr::if_else(.data$Einheit == \"\\u00B5g/l\",                                           true = .data$Messwert / 1000,                                           false = .data$Messwert),                 Einheit = dplyr::if_else(.data$Einheit == \"\\u00B5g/l\",                                           true = \"mg/l\",                                           false = .data$Einheit),                 category = as.factor(category)) %>%    ggplot2::ggplot(mapping = ggplot2::aes_string(y = \"label\",                                                  x = \"Messwert\",                                                 fill = \"category\" )) +   ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +     ggplot2::scale_x_log10() +   ggplot2::geom_boxplot() +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Substance\",                  x = \"Concentration (mg/l)\") +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") #> Joining, by = \"name_uba\"  g1 pdff <- \"wasserportal_reach-substances_boxplot.pdf\" ggplot2::ggsave(pdff,                 plot = g1,                  width = 20,                 height = 15,                  units = \"cm\")"},{"path":"https://kwb-r.github.io/wasserportal/articles/reach_uba.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"Reach (UBA)","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package install.packages('wasserportal')"},{"path":"https://kwb-r.github.io/wasserportal/articles/reach_uba.html","id":"get-gw-quality-from-wasserportal","dir":"Articles","previous_headings":"","what":"Get GW Quality from Wasserportal","title":"Reach (UBA)","text":"","code":"# Load R package library(wasserportal)  categories <- wasserportal::readPackageFile(file = \"categories.csv\")   cas_reach <- wasserportal::readPackageFile(file = \"cas_reach.csv\") %>%    dplyr::left_join(categories) #> Joining, by = \"category\"  cas_wasserportal <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\",                                                   encoding = \"UTF-8\") %>%     dplyr::inner_join(cas_reach, by = \"cas_number\")   ### Remove duplicated Wasserportal substances (same CAS number but different, names!) cas_wasserportal_clean <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\") %>%     dplyr::count(cas_number) %>%   dplyr::select(-n) %>%    dplyr::filter(!is.na(cas_number)) %>%    dplyr::inner_join(cas_reach, by = \"cas_number\")    ### For details see: ### https://kwb-r.github.io/wasserportal/articles/groundwater.html ### JSON files (see below) are build every day automatically at 5a.m. with ### continious integration, for build status, see here: ### https://github.com/KWB-R/wasserportal/actions/workflows/pkgdown.yaml  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%   #dplyr::filter(Parameter %in% cas_wasserportal$Parameter) %>%    dplyr::inner_join(cas_wasserportal, by = \"Parameter\") %>%   dplyr::mutate(Messstellennummer = as.character(Messstellennummer), ## CensorCode: either \"below\" (less than) for concentration below detection limit  ## (value is detection limit) or \"nc\" (not censored) for concentration above  ## detection limit                 CensorCode = dplyr::case_when(Messwert <= 0 ~ \"lt\",                                               TRUE ~ \"nc\"),                 Messwert = dplyr::case_when(Messwert < 0 ~ abs(Messwert), ### Only two decimal numbers are exported by Wasserportal, but some sustances  ### have lower detection limit, e.g. 0.002 which results in -0.00 export, thus  ### the dummy detection limit 0.00999 was introduced (until fixed by Senate:  ### Christoph will sent a email to Matthias Schröder)                                             Messwert == 0 ~ 0.009999,                                              TRUE ~ Messwert)) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  gwq_subs <- gwq_data %>%     dplyr::count(.data$cas_number, .data$CensorCode) %>%    tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%    dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                  nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                  percent_nc = 100*nc/n_total) %>%    dplyr::rename(n_lt = lt,                  n_nc = nc) %>%    dplyr::left_join(cas_reach[, c(\"category\", \"category_name\", \"name\", \"cas_number\")]) %>%   dplyr::rename(name_uba = name) %>%    dplyr::select(category, category_name, name_uba, cas_number,n_lt, n_nc, n_total, percent_nc) #> Joining, by = \"cas_number\"   readr::write_csv(gwq_subs, \"gwq_subs.csv\")  DT::datatable(gwq_subs, filter = \"top\", rownames = FALSE)"},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/reach_uba.html","id":"total","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"Total","title":"Reach (UBA)","text":"","code":"g <- cas_reach %>%   dplyr::mutate(source = sprintf(\"UBA (n = %d)\", nrow(cas_reach))) %>%    dplyr::bind_rows(cas_wasserportal_clean %>%                     dplyr::mutate(source = sprintf(\"Wasserportal (n = %d)\",                                                    nrow(cas_wasserportal_clean)))) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = forcats::as_factor(.data$category),                                           fill = .data$source,                                          col = .data$source)) +    ggplot2::geom_histogram(stat = \"count\", alpha = 0.5) +   ggplot2::geom_text(stat=\"count\", ggplot2::aes(label=..count..), vjust=-0.5, position=\"stack\") +   ggplot2::scale_x_discrete() +   ggplot2::theme_bw() +   ggplot2::theme(legend.position=\"top\") +   ggplot2::labs(y = \"Number of Substances\", x = \"Category\") #> Warning: Ignoring unknown parameters: binwidth, bins, pad    g ggplot2::ggsave(filename = \"wasserportal_number-of-reach-substances.jpeg\",                    plot = g,                   width = 14,                    height = 11,                   units = \"cm\")    #plotly::ggplotly(g)"},{"path":"https://kwb-r.github.io/wasserportal/articles/reach_uba.html","id":"by-station","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"By Station","title":"Reach (UBA)","text":"","code":"by_stations <- samples_by_para_and_station_n %>%    dplyr::select(.data$name_uba, .data$n_stations_sampled) #> Adding missing grouping variables: `category`, `category_name`  wasserportal_substances <- samples_by_para_and_station_n %>%    dplyr::arrange(.data$category,                   dplyr::desc(.data$n_total),                   dplyr::desc(.data$n_stations_sampled),                   .data$name_uba) %>%    dplyr::select(.data$category,                  .data$name_uba,                 .data$cas_number,                  .data$n_total,                 .data$n_stations_sampled) #> Adding missing grouping variables: `category_name`   DT::datatable(wasserportal_substances, filter = \"top\", rownames = FALSE) wasserportal_substances_plot <- wasserportal_substances %>%   dplyr::mutate(label = sprintf(\"%s (%s, stations: %d)\",                                  .data$name_uba,                                  .data$cas_number,                                  .data$n_stations_sampled),                 category = forcats::as_factor(.data$category))  wasserportal_substances_plot$label <- factor(wasserportal_substances_plot$label,                                               levels = wasserportal_substances_plot$label) wasserportal_substances_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$n_total,                                 y = .data$label,                                 label = .data$n_total,                                fill = .data$category)) +   ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 2, nudge_x = -1) +   ggplot2::theme_bw() +   ggplot2::labs(subtitle = sprintf(\"%d Wasserportal substances (listed in UBA table)\",                                 nrow(wasserportal_substances_plot)),                 y = \"\",                  x = \"Number of Samples\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::mutate(label = sprintf(\"Cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number),                 category = forcats::as_factor(.data$category))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$percent_samples_abovedetection,                                 y = forcats::fct_reorder(.data$label, .data$percent_samples_abovedetection, .desc = TRUE),                                label = sprintf(\"%2.2f %% (n_samples = %d, n_stations = %d)\", .data$percent_samples_abovedetection,.data$n_total, .data$n_stations_sampled),                                fill = .data$category)) +                             ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 1.8, hjust = -0.01) +   ggplot2::xlim(c(0,40)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = sprintf(\"%d / %d substances (>= 1 value above detection limit)\",                                 sum(gwq_subs_plot$n_abovedetection > 0),                                    nrow(gwq_subs_plot)),                                          y = \"\",                  x = \"Percent of Samples above Detection Limit (%)\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") n_cat <- samples_by_category_and_station %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_samples_abovedetection = sum(n_nc),                    n_samples_total = sum(n_total),                    n_samples_percent_abovedetection = 100*sum(n_nc)/sum(n_total)) %>%    dplyr::arrange(dplyr::desc(.data$n_samples_abovedetection))  g1 <- samples_by_category_and_station %>%    dplyr::left_join(n_cat) %>%    dplyr::filter(n_nc > 0)  %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_nc,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),                                label = .data$n_nc,                                fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::geom_text(mapping = ggplot2::aes(     x = .data$n_samples_abovedetection,     y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),     label = sprintf(\"%3.1f %% (n_samples = %d)\", .data$n_samples_percent_abovedetection, .data$n_samples_total)),                      inherit.aes = FALSE,                      size = 1.8,                       position = ggplot2::position_nudge(x = 20),     fontface = \"bold\") +   ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Samples Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") n_cat <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_paras_abovedetection_total = sum(n_paras_abovedetection)) %>%    dplyr::arrange(dplyr::desc(.data$n_paras_abovedetection_total))  g1 <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::left_join(n_cat) %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_paras_abovedetection,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_paras_abovedetection_total, .desc = TRUE),                              label = .data$n_paras_abovedetection,                              fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +    #ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Parameters Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_paras-by-station_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::mutate(n_stations_belowdetection = .data$n_stations_sampled - .data$n_stations_abovedetection,                  n_stations_notsampled = .data$n_stations_total - .data$n_stations_sampled) %>%    dplyr::select(\"category\",                 \"category_name\",                 \"name_uba\",                 \"cas_number\",                 \"n_stations_abovedetection\",                  \"n_stations_belowdetection\",                 \"n_stations_notsampled\") %>%    tidyr::pivot_longer(cols = tidyselect::starts_with(\"n_stations\"),                       names_to = \"station_type\",                       values_to = \"station_value\") %>%    dplyr::filter(.data$station_value > 0) %>%    dplyr::mutate(station_type = stringr::str_remove(.data$station_type,                                                     \"n_stations_\")) %>%   dplyr::mutate(station_type = kwb.utils::multiSubstitute(.data$station_type,                                                           list(\"abovedetection\" = \"above detection\",                                                                \"belowdetection\" = \"below detection\",                                                                 \"notsampled\" = \"not sampled\"))) %>%    dplyr::mutate(label = sprintf(\"Cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number),                 category = forcats::as_factor(.data$category))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$station_value,                                 y = .data$label,                                label = .data$station_value,                                fill = forcats::fct_rev(.data$station_type))) +   ggplot2::scale_fill_manual(values = c(\"lightgrey\", \"darkgreen\", \"red\")) +    ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col(alpha = 0.75) +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(title = \"Groundwater Quality by Station\",                  fill = \"\",                  caption = \"above detection: number of stations with at least 1 sample above detection limit\\nbelow detection: number of station with all samples below detection limit\\nnot sampled: number of stations not sampled\",                 subtitle = sprintf(\"for %d GW quality stations\",                                    length(unique(gwq_master$Nummer))),                 y = \"\",                  x = \"Number of Monitoring Stations\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_by-monitoring-station.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") stations_abovedetection <- samples_by_para_and_station %>%    dplyr::filter(.data$n_nc > 0) %>%    dplyr::select(cas_number, Messstellennummer, n_nc, n_lt) %>%    dplyr::arrange(.data$n_nc)  g1_data <- gwq_data %>%    dplyr::right_join(y = stations_abovedetection,                      by = c(\"cas_number\", \"Messstellennummer\")) %>%    dplyr::mutate(Datum = as.Date(Datum),                  CensorCode = kwb.utils::multiSubstitute(.data$CensorCode,                                                           list(\"nc\" = \"above detection\",                                                                 \"lt\" = \"below detection\")),                  label = sprintf(\"%s (%s): %s (n_above = %d, n_below = %d)\",                                  .data$name,                                  .data$cas_number,                                 .data$Messstellennummer,                                 .data$n_nc,                                 .data$n_lt))   labels <- unique(g1_data$label)  plot_timeseries <- function(sel_label) {   g1_data %>%    dplyr::filter(.data$label == sel_label) %>%    dplyr::arrange(.data$n_nc, .data$label, .data$Datum) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = .data$Datum,                                           y = .data$Messwert,                                          col = .data$CensorCode                                          )) +   ggplot2::scale_color_manual(values = c(\"red\", \"darkgreen\")) +   ggplot2::geom_point() +   ggplot2::theme_bw() +   ggplot2::labs(title = sel_label) }  g_plots <- lapply(labels, function(sel_label) {plot_timeseries(sel_label)})  pdff <- \"wasserportal_reach-substances_timeseries.pdf\" mp <- gridExtra::marrangeGrob(g_plots, nrow=1, ncol=1) ggplot2::ggsave(pdff,                 plot = mp,                  width = 30,                 height = 20,                  units = \"cm\") n_samples_all <- samples %>%    dplyr::count(.data$name_uba) %>%    dplyr::rename(n_all = \"n\")   n_samples_above <- samples %>%    dplyr::filter(CensorCode == \"nc\") %>%    dplyr::count(.data$name_uba) %>%    dplyr::rename(n_above = \"n\")  n_samples <- dplyr::left_join(n_samples_all, n_samples_above) %>%    dplyr::mutate(label = as.factor(sprintf(\"%s (n_above = %d, n_samples = %d)\",                                  .data$name_uba,                                 .data$n_above,                                 .data$n_all))   ) #> Joining, by = \"name_uba\"  substances_above <- samples %>%  dplyr::filter(CensorCode == \"nc\") %>%  dplyr::pull(.data$name_uba) %>%  unique()  detection_limits <- samples %>%   dplyr::filter(CensorCode == \"lt\",                 name_uba %in% substances_above) %>%    dplyr::mutate(Messwert = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = .data$Messwert * 1000,                                           false = .data$Messwert),                 Einheit = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = \"\\u00B5g/l\",                                           false = .data$Einheit),                 year = as.integer(format(as.Date(.data$Datum), format = \"%Y\"))) %>%    dplyr::count(.data$name_uba, .data$year, .data$Messwert) %>%    dplyr::left_join(n_samples)  #> Joining, by = \"name_uba\"   plot_detection_limits <- function(sel_sub) {   g1 <- detection_limits %>%    dplyr::filter(name_uba == sel_sub) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = .data$year,                                          y = .data$n,                                          col = forcats::fct_rev(as.factor(.data$Messwert)))) +   ggplot2::scale_color_brewer(palette=\"RdYlGn\") +   ggplot2::geom_point() +    ggplot2::labs(title = sprintf(\"%s\", sel_sub),                 x = \"Year\",                  y = \"Number of Samples below Detection Limit\",                 col = \"Detection Limit (\\u00B5g/l)\") +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") g1 }  g_plots <- lapply(substances_above, function(sel_sub) {plot_detection_limits(sel_sub)})  pdff <- \"wasserportal_reach-substances_detection-limits.pdf\" mp <- gridExtra::marrangeGrob(g_plots, nrow=1, ncol=1) ggplot2::ggsave(pdff,                 plot = mp,                  width = 20,                 height = 15,                  units = \"cm\")   g1 <- samples %>%   dplyr::left_join(n_samples) %>%    dplyr::filter(CensorCode == \"nc\") %>%    dplyr::mutate(Messwert = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = .data$Messwert * 1000,                                           false = .data$Messwert),                 Einheit = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = \"\\u00B5g/l\",                                           false = .data$Einheit),                 category = as.factor(category)) %>%    ggplot2::ggplot(mapping = ggplot2::aes(y = forcats::fct_reorder(.data$label,                                                                    .data$n_above,                                                                    .desc = TRUE),                                          x = .data$Messwert,                                          fill = .data$category)) +   ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +     ggplot2::scale_y_discrete(limits = rev) +   ggplot2::scale_x_log10() +   ggplot2::geom_boxplot() +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Substance\",                  x = \"Concentration (\\u00B5g / l)\") +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") #> Joining, by = \"name_uba\"  g1 pdff <- \"wasserportal_reach-substances_boxplot.pdf\" ggplot2::ggsave(pdff,                 plot = g1,                  width = 25,                 height = 15,                  units = \"cm\")"},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"general-overview","dir":"Articles","previous_headings":"Stations","what":"General overview","title":"Tutorial","text":"crosstable data checking data availabilty monitoring stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_crosstable.json","code":"# install.packages(\"remotes\") # remotes::install_github(\"kwb-r/wasserportal\", upgrade = \"never\", force = TRUE) library(wasserportal) overview_options <- wasserportal::get_overview_options() str(overview_options) #> List of 2 #>  $ surface_water:List of 7 #>   ..$ water_level         : chr \"ws\" #>   ..$ flow                : chr \"df\" #>   ..$ temperature         : chr \"wt\" #>   ..$ conductivity        : chr \"lf\" #>   ..$ ph                  : chr \"ph\" #>   ..$ oxygen_concentration: chr \"og\" #>   ..$ oxygen_saturation   : chr \"os\" #>  $ groundwater  :List of 2 #>   ..$ level  : chr \"gws\" #>   ..$ quality: chr \"gwq\"  system.time(stations <- wasserportal::get_stations()) #> Importing 9 station overviews from Wasserportal Berlin ... ok. (9.53s) #>    user  system elapsed  #>   0.060   0.012   9.918  str(stations) #> List of 3 #>  $ overview_list:List of 9 #>   ..$ surface_water.water_level         : tibble [75 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: int [1:75] 5865900 5827103 5870400 5865300 5819900 5864801 5861101 5800107 5800317 5867003 ... #>   .. ..$ Messstellenname  : chr [1:75] \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>   .. ..$ Gewaesser        : chr [1:75] \"M.-H.-Grenzgr.\" \"Müggelspree\" \"Griebnitzkanal\" \"Wuhle\" ... #>   .. ..$ Betreiber        : chr [1:75] \"SenUVK\" \"SenUVK\" \"SenUVK\" \"SenUVK\" ... #>   .. ..$ Datum            : chr [1:75] \"29.06.2022 06:00\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" ... #>   .. ..$ Wasserstand      : int [1:75] 4 46 44 88 70 5 25 69 74 106 ... #>   .. ..$ Einheit          : chr [1:75] \"cm\" \"cm\" \"cm\" \"cm\" ... #>   .. ..$ Ganglinien       : logi [1:75] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:75] \"niedrig\" \"niedrig\" \"niedrig\" \"niedrig\" ... #>   ..$ surface_water.flow                : tibble [18 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: int [1:18] 5827103 5870400 5865300 5864801 5867401 5867900 5827101 5870100 5826701 5862811 ... #>   .. ..$ Messstellenname  : chr [1:18] \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" \"Am Kienberg\" ... #>   .. ..$ Gewaesser        : chr [1:18] \"Müggelspree\" \"Griebnitzkanal\" \"Wuhle\" \"Hellersdorfer Graben\" ... #>   .. ..$ Betreiber        : chr [1:18] \"SenUVK\" \"SenUVK\" \"SenUVK\" \"SenUVK\" ... #>   .. ..$ Datum            : chr [1:18] \"29.06.2022 06:00\" \"29.06.2022 06:00\" \"28.06.2022 23:30\" \"29.06.2022 06:00\" ... #>   .. ..$ Durchfluss       : num [1:18] 3.04 -1.7 0.101 0.01 0.422 0.953 1 2.44 3.9 3.29 ... #>   .. ..$ Einheit          : chr [1:18] \"m³/s\" \"m³/s\" \"m³/s\" \"m³/s\" ... #>   .. ..$ Ganglinie        : logi [1:18] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:18] \"keine\" \"normal\" \"niedrig\" \"keine\" ... #>   ..$ surface_water.temperature         : tibble [63 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:63] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:63] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:63] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:63] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:63] \"01.06.2022 12:45\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" ... #>   .. ..$ Wassertemperatur : chr [1:63] \"18.91\" \"24.50\" \"24.53\" \"24.41\" ... #>   .. ..$ Einheit          : chr [1:63] \"°C\" \"°C\" \"°C\" \"°C\" ... #>   .. ..$ Ganglinie        : logi [1:63] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:63] \"inaktiv\" \">20 - 25°C\" \">20 - 25°C\" \">20 - 25°C\" ... #>   ..$ surface_water.conductivity        : tibble [16 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:16] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:16] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:16] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:16] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:16] \"01.06.2022 12:45\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" ... #>   .. ..$ Leitfaehigkeit   : chr [1:16] \"921\" \"969\" \"940\" \"956\" ... #>   .. ..$ Einheit          : chr [1:16] \"µS/cm\" \"µS/cm\" \"µS/cm\" \"µS/cm\" ... #>   .. ..$ Ganglinie        : logi [1:16] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:16] \"inaktiv\" \">800 - 1000\" \">800 - 1000\" \">800 - 1000\" ... #>   ..$ surface_water.ph                  : tibble [16 × 8] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:16] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:16] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:16] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:16] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:16] \"26.10.2021 10:15\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" ... #>   .. ..$ pHWert           : chr [1:16] \"7.69\" \"7.50\" \"7.42\" \"7.72\" ... #>   .. ..$ Ganglinie        : logi [1:16] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:16] \"inaktiv\" \">7.0 - 7.5\" \">7.0 - 7.5\" \">7.5 - 8.0\" ... #>   ..$ surface_water.oxygen_concentration: tibble [16 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:16] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:16] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:16] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:16] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:16] \"01.06.2022 12:45\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" ... #>   .. ..$ Sauerstoffgehalt : chr [1:16] \"7.29\" \"2.75\" \"3.45\" \"5.00\" ... #>   .. ..$ Einheit          : chr [1:16] \"mg/l\" \"mg/l\" \"mg/l\" \"mg/l\" ... #>   .. ..$ Ganglinie        : logi [1:16] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:16] \"inaktiv\" \"<= 5\" \"<= 5\" \"<= 5\" ... #>   ..$ surface_water.oxygen_saturation   : tibble [16 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:16] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:16] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:16] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:16] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:16] \"01.06.2022 12:45\" \"27.06.2022 23:00\" \"27.06.2022 23:00\" \"27.06.2022 23:00\" ... #>   .. ..$ Parameterwert    : chr [1:16] \"78.60\" \"49.90\" \"51.63\" \"61.35\" ... #>   .. ..$ Einheit          : chr [1:16] \"%\" \"%\" \"%\" \"%\" ... #>   .. ..$ Ganglinie        : logi [1:16] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:16] \"inaktiv\" \">25  - 50\" \">50 - 75\" \">50 - 75\" ... #>   ..$ groundwater.level                 : tibble [867 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer        : int [1:867] 1 2 3 4 9 24 25 26 30 31 ... #>   .. ..$ Bezirk                   : chr [1:867] \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>   .. ..$ Auspraegung              : chr [1:867] \"GW-Stand\" \"GW-Stand\" \"GW-Stand + GW-Güte\" \"GW-Stand\" ... #>   .. ..$ Grundwasserleiter        : chr [1:867] \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>   .. ..$ Grundwasserspannung      : chr [1:867] \"gespannt\" \"ungespannt\" \"gespannt\" \"ungespannt\" ... #>   .. ..$ Datum                    : chr [1:867] \"02.06.2022\" \"02.06.2022\" \"02.06.2022\" \"02.06.2022\" ... #>   .. ..$ Grundwasserstand_m_ue_NHN: num [1:867] 33.7 35.1 33.7 32.5 36.4 ... #>   .. ..$ Flur_abstand_m_u_GOK     : chr [1:867] \"keine Angabe\" \"2.52\" \"keine Angabe\" \"7.38\" ... #>   .. ..$ Ganglinie                : logi [1:867] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation           : chr [1:867] \"extrem niedrig\" \"niedrig\" \"normal\" \"niedrig\" ... #>   ..$ groundwater.quality               : tibble [209 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: int [1:209] 3 145 149 282 344 358 499 580 604 645 ... #>   .. ..$ Bezirk           : chr [1:209] \"Reinickendorf\" \"Reinickendorf\" \"Mitte\" \"Mitte\" ... #>   .. ..$ Auspraegung      : chr [1:209] \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" ... #>   .. ..$ Grundwasserleiter: chr [1:209] \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>   .. ..$ Datum            : chr [1:209] \"17.11.2021\" \"18.10.2021\" \"19.10.2021\" \"15.11.2021\" ... #>   .. ..$ Parameterwert    : num [1:209] 12.3 11.8 11.8 12.2 13 12.5 12.7 13 15.9 12 ... #>   .. ..$ Einheit          : chr [1:209] \"grd C\" \"grd C\" \"grd C\" \"grd C\" ... #>   .. ..$ Ganglinie        : logi [1:209] NA NA NA NA NA NA ... #>   .. ..$ Klassifikation   : chr [1:209] \"keine\" \"keine\" \"keine\" \"keine\" ... #>  $ overview_df  :Classes 'data.table' and 'data.frame':  1296 obs. of  26 variables: #>   ..$ key                      : chr [1:1296] \"surface_water.water_level\" \"surface_water.water_level\" \"surface_water.water_level\" \"surface_water.water_level\" ... #>   ..$ Messstellennummer        : chr [1:1296] \"5865900\" \"5827103\" \"5870400\" \"5865300\" ... #>   ..$ Messstellenname          : chr [1:1296] \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>   ..$ Gewaesser                : chr [1:1296] \"M.-H.-Grenzgr.\" \"Müggelspree\" \"Griebnitzkanal\" \"Wuhle\" ... #>   ..$ Betreiber                : chr [1:1296] \"SenUVK\" \"SenUVK\" \"SenUVK\" \"SenUVK\" ... #>   ..$ Datum                    : chr [1:1296] \"29.06.2022 06:00\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" ... #>   ..$ Wasserstand              : int [1:1296] 4 46 44 88 70 5 25 69 74 106 ... #>   ..$ Einheit                  : chr [1:1296] \"cm\" \"cm\" \"cm\" \"cm\" ... #>   ..$ Ganglinien               : logi [1:1296] NA NA NA NA NA NA ... #>   ..$ Klassifikation           : chr [1:1296] \"niedrig\" \"niedrig\" \"niedrig\" \"niedrig\" ... #>   ..$ Durchfluss               : num [1:1296] NA NA NA NA NA NA NA NA NA NA ... #>   ..$ Ganglinie                : logi [1:1296] NA NA NA NA NA NA ... #>   ..$ Wassertemperatur         : chr [1:1296] NA NA NA NA ... #>   ..$ Leitfaehigkeit           : chr [1:1296] NA NA NA NA ... #>   ..$ pHWert                   : chr [1:1296] NA NA NA NA ... #>   ..$ Sauerstoffgehalt         : chr [1:1296] NA NA NA NA ... #>   ..$ Parameterwert            : chr [1:1296] NA NA NA NA ... #>   ..$ Bezirk                   : chr [1:1296] NA NA NA NA ... #>   ..$ Auspraegung              : chr [1:1296] NA NA NA NA ... #>   ..$ Grundwasserleiter        : chr [1:1296] NA NA NA NA ... #>   ..$ Grundwasserspannung      : chr [1:1296] NA NA NA NA ... #>   ..$ Grundwasserstand_m_ue_NHN: num [1:1296] NA NA NA NA NA NA NA NA NA NA ... #>   ..$ Flur_abstand_m_u_GOK     : chr [1:1296] NA NA NA NA ... #>   ..$ water_body               : chr [1:1296] \"surface_water\" \"surface_water\" \"surface_water\" \"surface_water\" ... #>   ..$ variable                 : chr [1:1296] \"water_level\" \"water_level\" \"water_level\" \"water_level\" ... #>   ..$ station_type             : chr [1:1296] \"ws\" \"ws\" \"ws\" \"ws\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ crosstable   : tibble [998 × 11] (S3: tbl_df/tbl/data.frame) #>   ..$ Messstellennummer: chr [1:998] \"5865900\" \"5827103\" \"5870400\" \"5865300\" ... #>   ..$ Messstellenname  : chr [1:998] \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>   ..$ ws               : chr [1:998] \"x\" \"x\" \"x\" \"x\" ... #>   ..$ df               : chr [1:998] NA \"x\" \"x\" \"x\" ... #>   ..$ wt               : chr [1:998] NA NA NA \"x\" ... #>   ..$ lf               : chr [1:998] NA NA NA NA ... #>   ..$ ph               : chr [1:998] NA NA NA NA ... #>   ..$ og               : chr [1:998] NA NA NA NA ... #>   ..$ os               : chr [1:998] NA NA NA NA ... #>   ..$ gws              : chr [1:998] NA NA NA NA ... #>   ..$ gwq              : chr [1:998] NA NA NA NA ...  jsonlite::write_json(stations$crosstable,                       path = \"stations_crosstable.json\",                      pretty = TRUE) DT::datatable(stations$crosstable, filter = \"top\", caption = \"Data availabilty                per monitoring station\")"},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"master-data","dir":"Articles","previous_headings":"Stations > GW level","what":"Master data","title":"Tutorial","text":"Overview data GW level stations can requested shown : Master data GW level stations can requested shown : master data GW level stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_gwl_master.json","code":"DT::datatable(stations$overview_list$groundwater.level, filter = \"top\") stations_gwl_master <- wasserportal::get_wasserportal_masters_data(   station_ids = stations$overview_list$groundwater.level$Messstellennummer ) #> Importing 867 station metadata from Wasserportal Berlin ... ok. (8.04s)  jsonlite::write_json(stations_gwl_master,                       path = \"stations_gwl_master.json\",                      pretty = TRUE)  DT::datatable(stations_gwl_master, filter = \"top\")"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"trend-classification","dir":"Articles","previous_headings":"Stations > GW level","what":"Trend Classification","title":"Tutorial","text":"GW level trend classification (provided SenWeb) visualized .","code":""},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"trend-classification-histogramm","dir":"Articles","previous_headings":"Stations > GW level > Trend Classification","what":"Trend Classification Histogramm","title":"Tutorial","text":"73.59 percent considered 818 GW level monitoring stations containing classification data (867 provided SenWeb) indicate normal (extrem niedrig, sehr niedrig, niedrig) GW levels. However, 73.59 percent indicate normal (hoch, sehr hoch, extrem hoch) GW levels.","code":"gwl <- stations$overview_list$groundwater.level %>%    dplyr::mutate(Datum = as.Date(Datum, format = \"%d.%m.%Y\"))  text_low_levels <- c(\"extrem niedrig\", \"sehr niedrig\", \"niedrig\") text_high_levels <- c(\"hoch\", \"sehr hoch\", \"extrem hoch\") levels_ordered <- c(text_low_levels, \"normal\", text_high_levels, \"keine\")  gwl$Klassifikation <- forcats::fct_relevel(gwl$Klassifikation, levels_ordered)  gwl_classified_only <- gwl %>% dplyr::filter(Klassifikation != \"keine\")  percental_share_low_levels <- 100*sum(gwl_classified_only$Klassifikation %in% text_low_levels)/nrow(gwl_classified_only)   percental_share_high_levels <- 100*sum(gwl_classified_only$Klassifikation %in% text_high_levels)/nrow(gwl_classified_only)   title_text <- sprintf(\"GW level classification (n = %d out of %d have 'classification' data)\", nrow(gwl_classified_only), nrow(gwl))  g1 <- gwl_classified_only %>%    dplyr::count(Klassifikation, Grundwasserspannung) %>%    dplyr::mutate(percental_share = 100 * n / nrow(gwl)) %>%    ggplot2::ggplot(ggplot2::aes_string(x = \"Klassifikation\",                                       y = \"percental_share\",                                       fill = \"Grundwasserspannung\")) +   ggplot2::geom_bar(stat = \"identity\") +    ggplot2::labs(title = title_text,                 x = \"Classification\",                 y = \"Percental share (%)\") +   ggplot2::theme_bw()  plotly::ggplotly(g1)"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"trend-classification-map","dir":"Articles","previous_headings":"Stations > GW level > Trend Classification","what":"Trend Classification Map","title":"Tutorial","text":"GW level trend plot also available full html page : https://kwb-r.github.io/wasserportal/map_gwl-trend.html","code":"level_colors <- data.frame(Klassifikation = levels_ordered, classi_color = c(   \"darkred\", \"red\", \"orange\", \"green\", \"lightblue\", \"blue\", \"darkblue\", \"grey\" ))  gwl_classified_only_with_coords <- gwl_classified_only %>%    dplyr::mutate(     Messstellennummer = as.character(Messstellennummer),   ) %>%    dplyr::left_join(     stations_gwl_master %>%       dplyr::select(\"Nummer\", \"Rechtswert_UTM_33_N\", \"Hochwert_UTM_33_N\") %>%        dplyr::rename(Messstellennummer = \"Nummer\"),     by = \"Messstellennummer\"   ) %>%    dplyr::left_join(     level_colors,      by = \"Klassifikation\"   ) %>%    sf::st_as_sf(     coords = c(\"Rechtswert_UTM_33_N\", \"Hochwert_UTM_33_N\"),     crs = 25833   ) %>%    sf::st_transform(crs = 4326)  # Create a vector of labels for each row in gwl_classified_only_with_coords labs <- wasserportal::columns_to_labels(   data = gwl_classified_only_with_coords,    columns = c(     \"Messstellennummer\",      \"Grundwasserspannung\",      \"Klassifikation\",      \"Datum\"   ),   fmt = \"<p>%s: %s<\/p>\",   sep = \"\" )  # Print Map gwlmap <- gwl_classified_only_with_coords %>%    leaflet::leaflet() %>%   leaflet::addTiles() %>%    leaflet::addProviderTiles(leaflet::providers$CartoDB.Positron) %>%   leaflet::addCircles(     color = ~classi_color,     label = lapply(labs, htmltools::HTML)   ) %>%    leaflet::addLegend(     position = \"topright\",     colors = level_colors$classi_color,     labels = level_colors$Klassifikation,     title = sprintf(       \"Classification (latest data: %s)\",       max(gwl_classified_only_with_coords$Datum)     )   )  htmlwidgets::saveWidget(   gwlmap,    \"./map_gwl-trend.html\",    title = \"GW level trend\" )  gwlmap"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"download-and-plotting-one-station","dir":"Articles","previous_headings":"Stations > GW level","what":"Download and Plotting One Station","title":"Tutorial","text":"total period available.","code":"station_gwl <- stations$overview_list$groundwater.level[1,] ncols <- 2:ncol(station_gwl)  gw_level <- wasserportal::read_wasserportal_raw_gw(   station = station_gwl$Messstellennummer,    stype = \"gwl\") %>%  dplyr::mutate(Label = sprintf(\"%s (%s)\", Parameter, Einheit)) head(gw_level) #> # A tibble: 6 × 6 #>   Messstellennummer Datum      Parameter Einheit  Messwert Label               #>               <int> <date>     <chr>     <chr>       <dbl> <chr>               #> 1                 1 1970-01-02 GW-Stand  m ü. NHN     35.2 GW-Stand (m ü. NHN) #> 2                 1 1970-01-16 GW-Stand  m ü. NHN     35.2 GW-Stand (m ü. NHN) #> 3                 1 1970-02-02 GW-Stand  m ü. NHN     35.2 GW-Stand (m ü. NHN) #> 4                 1 1970-02-16 GW-Stand  m ü. NHN     35.2 GW-Stand (m ü. NHN) #> 5                 1 1970-03-02 GW-Stand  m ü. NHN     35.2 GW-Stand (m ü. NHN) #> 6                 1 1970-03-16 GW-Stand  m ü. NHN     35.2 GW-Stand (m ü. NHN)  g <- gw_level %>%  ggplot2::ggplot(ggplot2::aes_string(x = \"Datum\", y = \"Messwert\", col = \"Label\")) + ggplot2::geom_line() + ggplot2::geom_point() + ggplot2::theme_bw()   title_subtitle <- paste0(paste0(names(station_gwl)[1], \": \",                               station_gwl[1],                               collapse =\", \"),        \"<br>\",        \"<sup>\",        paste0(names(station_gwl)[ncols], \": \",               station_gwl[ncols],                collapse =\", \"),        \"<\/sup>\")   plotly::ggplotly(g) %>%   plotly::layout(title = list(text = title_subtitle))"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"download-and-plotting-multiple-stations","dir":"Articles","previous_headings":"Stations > GW level","what":"Download and Plotting Multiple Stations","title":"Tutorial","text":"data GW level stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_gwl_data.json","code":"gw_level_multi <- data.table::rbindlist(   lapply(stations$overview_list$groundwater.level$Messstellennummer[1:5],                       function(id) {                        wasserportal::read_wasserportal_raw_gw(                          station = id, stype = \"gwl\")                      }))   jsonlite::write_json(gw_level_multi,                      path = \"stations_gwl_data.json\",                      pretty = TRUE)   # Plot 10 GW level selected_stations <- stations$overview_list$groundwater.level$Messstellennummer[1:10]  g <- gw_level_multi %>%  dplyr::filter(Messstellennummer %in% selected_stations) %>%  dplyr::mutate(Messstellennummer = as.character(Messstellennummer)) %>%  ggplot2::ggplot(ggplot2::aes_string(x = \"Datum\",                                      y = \"Messwert\",                                      col = \"Messstellennummer\")) + ggplot2::labs(title = \"GW level (m above NN)\") + ggplot2::geom_line() + ggplot2::geom_point() + ggplot2::theme_bw()  plotly::ggplotly(g)"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"gw-quality","dir":"Articles","previous_headings":"Stations","what":"GW quality","title":"Tutorial","text":"Overview data GW level stations can requested shown : Master data GW quality stations can requested shown : master data GW quality stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_gwq_master.json","code":"stations_gwq <- wasserportal::get_wasserportal_stations_table(   type = overview_options$groundwater$quality   )  DT::datatable(stations_gwq, filter = \"top\") stations_gwq_master <- wasserportal::get_wasserportal_masters_data(   station_ids = stations_gwq$Messstellennummer ) #> Importing 209 station metadata from Wasserportal Berlin ... ok. (1.96s)  jsonlite::write_json(stations_gwq_master,                       path = \"stations_gwq_master.json\",                      pretty = TRUE)"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"gw-quality-download-and-plotting-one-station","dir":"Articles","previous_headings":"Stations > GW quality","what":"GW Quality: Download and Plotting One Station","title":"Tutorial","text":"","code":"station_gwq <- stations$overview_list$groundwater.quality[1,] ncols <- 2:ncol(station_gwq)  gw_quality <- wasserportal::read_wasserportal_raw_gw(   station = station_gwq$Messstellennummer,    stype = \"gwq\") head(gw_quality) #> # A tibble: 6 × 5 #>   Messstellennummer Datum      Parameter                  Einheit      Messwert #>               <int> <date>     <chr>                      <chr>           <dbl> #> 1                 3 2020-07-01 Temperatur (Luft)          grd Celsius     19    #> 2                 3 2020-07-01 pH-Wert (Feld)             ohne Einheit     7.1  #> 3                 3 2020-07-01 Temperatur (Wasser)        grd C           12.2  #> 4                 3 2020-07-01 Leitfähigkeit 25°C vor Ort µS/cm          939    #> 5                 3 2020-07-01 Wasserst.(ROK) vor         m                4.91 #> 6                 3 2020-07-01 Wasserst.(ROK) nach        m                5  unique(gw_quality$Parameter) #>  [1] \"Temperatur (Luft)\"            \"pH-Wert (Feld)\"               #>  [3] \"Temperatur (Wasser)\"          \"Leitfähigkeit 25°C vor Ort\"   #>  [5] \"Wasserst.(ROK) vor\"           \"Wasserst.(ROK) nach\"          #>  [7] \"Entnahmeteufe (ROK)\"          \"Förderrate\"                   #>  [9] \"Redox Pumpbeginn\"             \"O2-Gehalt Pumpbeg.\"           #> [11] \"Redox Pumpende\"               \"pH Pumpende\"                  #> [13] \"O2-Gehalt Pumpende\"           \"Chlorid\"                      #> [15] \"Fluorid\"                      \"Hydrogenkarbonat\"             #> [17] \"Nitrit (N)\"                   \"Nitrat (N)\"                   #> [19] \"Ortho-Phosphat (P)\"           \"Sulfat\"                       #> [21] \"Cyanide (ges.)\"               \"Bromid\"                       #> [23] \"Nitrit\"                       \"Nitrat\"                       #> [25] \"Ortho-Phosphat\"               \"Ammonium (N)\"                 #> [27] \"Eisen-2\"                      \"Eisen (ges.)\"                 #> [29] \"Kalium\"                       \"Kalzium\"                      #> [31] \"Magnesium\"                    \"Natrium\"                      #> [33] \"Mangan\"                       \"Ammonium\"                     #> [35] \"Leitfähigkeit /Lab. bei 25°C\" \"UV-Adsorption (254)\"          #> [37] \"CSV (KMNO4)\"                  \"Basenkap. bis 8.2\"            #> [39] \"Säure-Kap. bis 4.3\"           \"Kohlenstoff (organ.)\"         #> [41] \"pH-Wert /Lab.\"                \"Gesamthärte\"                  #> [43] \"Karbonathärte\"                \"AOX\"                          #> [45] \"Phenolindex (ges.)\"           \"Arsen\"                        #> [47] \"Barium\"                       \"Blei\"                         #> [49] \"Bor\"                          \"Cadmium\"                      #> [51] \"Chrom\"                        \"Kupfer\"                       #> [53] \"Aluminium-gelöst\"             \"Molybdän\"                     #> [55] \"Nickel\"                       \"Quecksilber\"                  #> [57] \"Selen\"                        \"Zink\"                         #> [59] \"Vanadium\"                     \"Thallium\"                     #> [61] \"Uran\"                         \"Summe Na+Cl\"                  #> [63] \"Ionenbilanz (Labor)\"          \"Trifluoressigsäure\"  g <- gw_quality %>%   dplyr::filter(Parameter == \"Sulfat\") %>%  ggplot2::ggplot(ggplot2::aes_string(x = \"Datum\", y = \"Messwert\", col = \"Parameter\")) + ggplot2::geom_line() + ggplot2::geom_point() + ggplot2::theme_bw()   title_subtitle <- paste0(paste0(names(station_gwq)[1], \": \",                               station_gwq[1],                               collapse =\", \"),        \"<br>\",        \"<sup>\",        paste0(names(station_gwq)[ncols], \": \",               station_gwq[ncols],                collapse =\", \"),        \"<\/sup>\")   plotly::ggplotly(g) %>%   plotly::layout(title = list(text = title_subtitle))"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"gw-quality-download-and-plotting-multiple-stations","dir":"Articles","previous_headings":"Stations > GW quality","what":"GW Quality: Download and Plotting Multiple Stations","title":"Tutorial","text":"data GW quality stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_gwq_data.json","code":"gw_quality_multi <- data.table::rbindlist(   lapply(stations$overview_list$groundwater.quality$Messstellennummer,                       function(id) {                        wasserportal::read_wasserportal_raw_gw(                          station = id, stype = \"gwq\")                      }))   jsonlite::write_json(gw_quality_multi,                      path = \"stations_gwq_data.json\",                      pretty = TRUE)   # Plot 10 GW quality  selected_stations <- stations$overview_list$groundwater.quality$Messstellennummer[1:10]  g <- gw_quality_multi %>%  dplyr::filter(Messstellennummer %in% selected_stations) %>%  dplyr::mutate(Messstellennummer = as.character(Messstellennummer)) %>%  dplyr::filter(Parameter == \"Sulfat\") %>%  ggplot2::ggplot(ggplot2::aes_string(x = \"Datum\",                                      y = \"Messwert\",                                      col = \"Messstellennummer\")) + ggplot2::labs(title = \"GW quality (Sulfat)\") + ggplot2::geom_line() + ggplot2::geom_point() + ggplot2::theme_bw()  plotly::ggplotly(g)"},{"path":"https://kwb-r.github.io/wasserportal/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hauke Sonnenberg. Author. Michael Rustler. Author, maintainer. . Funder. . Funder. . Copyright holder.","code":""},{"path":"https://kwb-r.github.io/wasserportal/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sonnenberg H, Rustler M (2022). wasserportal: R Package Functions Scraping Data Wasserportal Berlin. R package version 0.1.1, https://github.com/KWB-R/wasserportal.","code":"@Manual{,   title = {wasserportal: R Package with Functions for Scraping Data of Wasserportal Berlin},   author = {Hauke Sonnenberg and Michael Rustler},   year = {2022},   note = {R package version 0.1.1},   url = {https://github.com/KWB-R/wasserportal}, }"},{"path":"https://kwb-r.github.io/wasserportal/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Package with Functions for Scraping Data of\n    Wasserportal Berlin","text":"installing latest release R package run following code :","code":"# Enable repository from kwb-r options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))    # Download and install wasserportal in R install.packages('wasserportal')  # Browse the wasserportal manual pages help(package = 'wasserportal')"},{"path":"https://kwb-r.github.io/wasserportal/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"R Package with Functions for Scraping Data of\n    Wasserportal Berlin","text":"Checkout Tutorial article use R package scraping data Wasserportal Berlin, performed automatically every day 5 UTC using GitHub actions. data can used directly within R shown Groundwater article.","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/columns_to_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Text Labels from Data Frame Columns — columns_to_labels","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"Create Text Labels Data Frame Columns","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/columns_to_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"","code":"columns_to_labels(data, columns, fmt = \"%s: %s\", sep = \", \")"},{"path":"https://kwb-r.github.io/wasserportal/reference/columns_to_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"data data frame columns names columns create labels fmt format string passed sprintf sep separator (default: \", \")","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/columns_to_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"vector character many elements rows data","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/columns_to_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"","code":"data <- data.frame(number = 1:2, name = c(\"adam\", \"eva\"), value = 3:4) columns <- c(\"name\", \"value\") columns_to_labels(data, columns) #> [1] \"name: adam, value: 3\" \"name: eva, value: 4\"  columns_to_labels(data, columns, fmt = \"<p>%s: %s<\/p>\", sep = \"\") #> [1] \"<p>name: adam<\/p><p>value: 3<\/p>\" \"<p>name: eva<\/p><p>value: 4<\/p>\""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_overview_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Berlin: get overview options for stations — get_overview_options","title":"Wasserportal Berlin: get overview options for stations — get_overview_options","text":"Wasserportal Berlin: get overview options stations","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_overview_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Berlin: get overview options for stations — get_overview_options","text":"","code":"get_overview_options()"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_overview_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Berlin: get overview options for stations — get_overview_options","text":"list shortcuts station overview tables (wasserportal.berlin.de/messwerte.php?anzeige=tabelle&thema=<shortcut>)","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_overview_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Berlin: get overview options for stations — get_overview_options","text":"","code":"get_overview_options() #> $surface_water #> $surface_water$water_level #> [1] \"ws\" #>  #> $surface_water$flow #> [1] \"df\" #>  #> $surface_water$temperature #> [1] \"wt\" #>  #> $surface_water$conductivity #> [1] \"lf\" #>  #> $surface_water$ph #> [1] \"ph\" #>  #> $surface_water$oxygen_concentration #> [1] \"og\" #>  #> $surface_water$oxygen_saturation #> [1] \"os\" #>  #>  #> $groundwater #> $groundwater$level #> [1] \"gws\" #>  #> $groundwater$quality #> [1] \"gwq\" #>  #>"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_station_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: get available station variables — get_station_variables","title":"Helper function: get available station variables — get_station_variables","text":"Helper function: get available station variables","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_station_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: get available station variables — get_station_variables","text":"","code":"get_station_variables(station_df)"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_station_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: get available station variables — get_station_variables","text":"station_df station_df","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_station_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: get available station variables — get_station_variables","text":"returns names available variables station","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Stations — get_stations","title":"Get Stations — get_stations","text":"Get Stations","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Stations — get_stations","text":"","code":"get_stations(run_parallel = TRUE)"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Stations — get_stations","text":"run_parallel default: TRUE","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_stations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Stations — get_stations","text":"list general station \"overview\" (either list \"overview_list\" data.frame \"overview_df\") crosstable information parameters available per station (\"x\" available, NA )","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_master_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"Wasserportal Berlin: get master data single station","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_master_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"","code":"get_wasserportal_master_data(   station_id,   url_wasserportal = wasserportal_base_url() )"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_master_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"station_id station_id url_wasserportal base url Wasserportal berlin (default: wasserportal_base_url())","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_master_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"data frame metadata ","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_master_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"","code":"## GW Station if (FALSE) { get_wasserportal_master_data(station_id = 149) } ## SW Station get_wasserportal_master_data(station_id = 5865900) #> # A tibble: 1 × 9 #>   Nummer  Name   Gewaesser Betreiber Auspraegung Flusskilometer Pegelnullpunkt_m #>   <chr>   <chr>  <chr>     <chr>     <chr>       <chr>          <chr>            #> 1 5865900 Allee… M.-H.-Gr… SenUVK    DMA (W-Q)   4.10           45.62            #> # … with 2 more variables: Rechtswert_UTM_33_N <chr>, Hochwert_UTM_33_N <chr>"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_masters_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"Wasserportal Berlin: get master data multiple stations","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_masters_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"","code":"get_wasserportal_masters_data(station_ids, run_parallel = TRUE)"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_masters_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"station_ids station_ids run_parallel default: TRUE","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_masters_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"data frame metadata selected station ids","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_masters_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"","code":"station_ids <- 1:4 parallel::detectCores() #> [1] 3 system.time(get_wasserportal_masters_data(station_ids)) #> Importing 4 station metadata from Wasserportal Berlin ... ok. (3.43s)  #>    user  system elapsed  #>   0.016   0.008   3.731  system.time(get_wasserportal_masters_data(station_ids,                                           run_parallel = FALSE)) #>    user  system elapsed  #>   0.162   0.009   4.469"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Names and IDs of the Stations of wasserportal.berlin.de — get_wasserportal_stations","title":"Get Names and IDs of the Stations of wasserportal.berlin.de — get_wasserportal_stations","text":"Get Names IDs Stations wasserportal.berlin.de","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Names and IDs of the Stations of wasserportal.berlin.de — get_wasserportal_stations","text":"","code":"get_wasserportal_stations(type = \"quality\")"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Names and IDs of the Stations of wasserportal.berlin.de — get_wasserportal_stations","text":"type one \"quality\", \"level\", \"flow\"","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"Wasserportal Berlin: get stations overview table","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"","code":"get_wasserportal_stations_table(   type = get_overview_options()$groundwater$level,   url_wasserportal = wasserportal_base_url() )"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"type type stations table retrieve. Valid options defined get_overview_options, default: get_overview_options()$groundwater$level url_wasserportal base url Wasserportal berlin (default: wasserportal_base_url","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"data frame master data selected monitoring stations","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"","code":"types <- wasserportal::get_overview_options() str(types) #> List of 2 #>  $ surface_water:List of 7 #>   ..$ water_level         : chr \"ws\" #>   ..$ flow                : chr \"df\" #>   ..$ temperature         : chr \"wt\" #>   ..$ conductivity        : chr \"lf\" #>   ..$ ph                  : chr \"ph\" #>   ..$ oxygen_concentration: chr \"og\" #>   ..$ oxygen_saturation   : chr \"os\" #>  $ groundwater  :List of 2 #>   ..$ level  : chr \"gws\" #>   ..$ quality: chr \"gwq\" sw_l <- wasserportal::get_wasserportal_stations_table(type = types$surface_water$water_level) str(sw_l) #> tibble [75 × 9] (S3: tbl_df/tbl/data.frame) #>  $ Messstellennummer: int [1:75] 5865900 5827103 5870400 5865300 5819900 5864801 5861101 5800107 5800317 5867003 ... #>  $ Messstellenname  : chr [1:75] \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>  $ Gewaesser        : chr [1:75] \"M.-H.-Grenzgr.\" \"Müggelspree\" \"Griebnitzkanal\" \"Wuhle\" ... #>  $ Betreiber        : chr [1:75] \"SenUVK\" \"SenUVK\" \"SenUVK\" \"SenUVK\" ... #>  $ Datum            : chr [1:75] \"29.06.2022 06:00\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" \"29.06.2022 06:00\" ... #>  $ Wasserstand      : int [1:75] 4 46 44 88 70 5 25 69 74 106 ... #>  $ Einheit          : chr [1:75] \"cm\" \"cm\" \"cm\" \"cm\" ... #>  $ Ganglinien       : logi [1:75] NA NA NA NA NA NA ... #>  $ Klassifikation   : chr [1:75] \"niedrig\" \"niedrig\" \"niedrig\" \"niedrig\" ..."},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Names and IDs of the Variables of wasserportal.berlin.de — get_wasserportal_variables","title":"Get Names and IDs of the Variables of wasserportal.berlin.de — get_wasserportal_variables","text":"Get Names IDs Variables wasserportal.berlin.de","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Names and IDs of the Variables of wasserportal.berlin.de — get_wasserportal_variables","text":"","code":"get_wasserportal_variables(station = NULL)"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Names and IDs of the Variables of wasserportal.berlin.de — get_wasserportal_variables","text":"station station id. given, variables available given station returned.","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://kwb-r.github.io/wasserportal/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to read CSV — read","title":"Helper function to read CSV — read","text":"Helper function read CSV","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to read CSV — read","text":"","code":"read(text, ...)"},{"path":"https://kwb-r.github.io/wasserportal/reference/read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to read CSV — read","text":"text text ... ... additional arguments passed read.table","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to read CSV — read","text":"data frame values","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/readPackageFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CSV File from Package's ","title":"Read CSV File from Package's ","text":"Read CSV File Package's \"extdata\" Folder","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/readPackageFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CSV File from Package's ","text":"","code":"readPackageFile(file, ...)"},{"path":"https://kwb-r.github.io/wasserportal/reference/readPackageFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CSV File from Package's ","text":"file file name (without path) ... additional arguments passed read.csv","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/readPackageFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CSV File from Package's ","text":"data frame representing content file","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"function downloads reads CSV files wasserportal.berlin.de.","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"","code":"read_wasserportal(   station,   variables = NULL,   from_date = as.character(Sys.Date() - 90L),   type = \"single\",   include_raw_time = FALSE,   stations_crosstable )"},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"station station number, returned get_stations variables vector variable identifiers, returned get_station_variables from_date Date object (string format \"yyyy-mm-dd\" can converted Date object representing first day request data. Default: .character(Sys.Date() - 90L) type one \"single\" (default), \"daily\", \"monthly\" include_raw_time TRUE original time column column corrected winter time included output. default FALSE. stations_crosstable sublist crosstable retrieved get_stations .e. get_stations()$crosstable","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"data frame read CSV file download provides. IMPORTANT: yet clear interpret timestamp, see example","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"original timestamps (column timestamps_raw example ) plausible, e.g. \"31.03.2019 03:00\" appears twice! corrected (column timestamp_corr) represent plausible sequence timestamps Berlin Normal Time (UTC+01) Finally, valid POSIXct timestamp timezone \"Berlin/Europe\" (UTC+01 winter, UTC+02 summer) created, together additional information UTC offset (column UTCOffset, 1 winter, 2 summer).","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"","code":"# Get a list of available water quality stations and variables stations <- wasserportal::get_stations() #> Importing 9 station overviews from Wasserportal Berlin ... ok. (10.01s)  stations_crosstable <- stations$crosstable station_crosstable <- stations_crosstable[1,]  # Set the start date from_date <- \"2021-03-01\"  # Read the timeseries (multiple variables for one station) water_quality <- wasserportal::read_wasserportal(   station = station_crosstable$Messstellennummer,   from_date = from_date,   include_raw_time = TRUE,   stations_crosstable = stations_crosstable ) #>  ... ok. (1.92s)   # Look at the first few records head(water_quality) #>          timestamp_raw   timestamp_corr       LocalDateTime UTCOffset Var.2 #> 21026 28.06.2021 02:00 28.06.2021 02:00 2021-06-28 03:00:00         2     0 #> 21027 28.06.2021 02:15 28.06.2021 02:15 2021-06-28 03:15:00         2     0 #> 21028 28.06.2021 02:30 28.06.2021 02:30 2021-06-28 03:30:00         2     0 #> 21029 28.06.2021 02:45 28.06.2021 02:45 2021-06-28 03:45:00         2     0 #> 21030 28.06.2021 03:00 28.06.2021 03:00 2021-06-28 04:00:00         2     0 #> 21031 28.06.2021 03:15 28.06.2021 03:15 2021-06-28 04:15:00         2     0  # Check the metadata #kwb.utils::getAttribute(water_quality, \"metadata\")  # Set missing values to NA water_quality[water_quality == -777] <- NA  # Look at the first few records again head(water_quality) #>          timestamp_raw   timestamp_corr       LocalDateTime UTCOffset Var.2 #> 21026 28.06.2021 02:00 28.06.2021 02:00 2021-06-28 03:00:00         2     0 #> 21027 28.06.2021 02:15 28.06.2021 02:15 2021-06-28 03:15:00         2     0 #> 21028 28.06.2021 02:30 28.06.2021 02:30 2021-06-28 03:30:00         2     0 #> 21029 28.06.2021 02:45 28.06.2021 02:45 2021-06-28 03:45:00         2     0 #> 21030 28.06.2021 03:00 28.06.2021 03:00 2021-06-28 04:00:00         2     0 #> 21031 28.06.2021 03:15 28.06.2021 03:15 2021-06-28 04:15:00         2     0  ### How was the original timestamp interpreted?  # Determine the days at which summer time starts and ends, respectively from_year <- as.integer(substr(from_date, 1L, 4L)) switches <- kwb.datetime::date_range_CEST(from_year)  # Reformat to dd.mm.yyyy switches <- kwb.datetime::reformatTimestamp(switches, \"%Y-%m-%d\", \"%d.%m.%Y\")  # Define a pattern to look for timestamps \"around\" the switches pattern <- paste(switches, \"0[1-4]\", collapse = \"|\")  # Look at the data for these timestamps water_quality[grepl(pattern, water_quality$timestamp_raw), ] #>          timestamp_raw   timestamp_corr       LocalDateTime UTCOffset Var.2 #> 23518 31.10.2021 01:00 31.10.2021 01:00 2021-10-31 02:00:00         2     1 #> 23519 31.10.2021 01:15 31.10.2021 01:15 2021-10-31 02:15:00         2     1 #> 23520 31.10.2021 01:30 31.10.2021 01:30 2021-10-31 02:30:00         2     1 #> 23521 31.10.2021 01:45 31.10.2021 01:45 2021-10-31 02:45:00         2     1 #> 23522 31.10.2021 02:00 31.10.2021 02:00 2021-10-31 02:00:00         1     1 #> 23523 31.10.2021 02:15 31.10.2021 02:15 2021-10-31 02:15:00         1     1 #> 23524 31.10.2021 02:30 31.10.2021 02:30 2021-10-31 02:30:00         1     1 #> 23525 31.10.2021 02:45 31.10.2021 02:45 2021-10-31 02:45:00         1     1 #> 23526 31.10.2021 03:00 31.10.2021 03:00 2021-10-31 03:00:00         1     1 #> 23527 31.10.2021 03:15 31.10.2021 03:15 2021-10-31 03:15:00         1     1 #> 23528 31.10.2021 03:30 31.10.2021 03:30 2021-10-31 03:30:00         1     1 #> 23529 31.10.2021 03:45 31.10.2021 03:45 2021-10-31 03:45:00         1     1 #> 23530 31.10.2021 04:00 31.10.2021 04:00 2021-10-31 04:00:00         1     1 #> 23531 31.10.2021 04:15 31.10.2021 04:15 2021-10-31 04:15:00         1     1 #> 23532 31.10.2021 04:30 31.10.2021 04:30 2021-10-31 04:30:00         1     1 #> 23533 31.10.2021 04:45 31.10.2021 04:45 2021-10-31 04:45:00         1     1  # The original timestamps (timestamps_raw) were not all plausible, e.g. # for March 2019. This seems to have been fixed by the \"wasserportal\"! sum(water_quality$timestamp_raw != water_quality$timestamp_corr) #> [1] 0"},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Wasserportal Raw — read_wasserportal_raw","title":"Read Wasserportal Raw — read_wasserportal_raw","text":"Read Wasserportal Raw","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Wasserportal Raw — read_wasserportal_raw","text":"","code":"read_wasserportal_raw(   variable,   station,   from_date,   type = \"single\",   include_raw_time = FALSE,   handle = NULL,   stations_crosstable )"},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Wasserportal Raw — read_wasserportal_raw","text":"variable variable station station id from_date start date type one \"single\", \"daily\", \"monthly\" (default: \"single\") include_raw_time TRUE FALSE (default: FALSE) handle handle (default: NULL) stations_crosstable sublist crosstable retrieved get_stations .e. get_stations()$crosstable","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Wasserportal Raw — read_wasserportal_raw","text":"????","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw_gw.html","id":null,"dir":"Reference","previous_headings":"","what":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"read_wasserportal_raw_gw","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw_gw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"","code":"read_wasserportal_raw_gw(   station = 149,   stype = \"gwl\",   type = \"single_all\",   from_date = \"\",   include_raw_time = FALSE,   handle = NULL )"},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw_gw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"station station id stype \"gwl\" \"gwq\" type \"single\" \"single_all\" (stype = \"gwq\") from_date (default: \"\") include_raw_time default: FALSE handle default: NULL","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw_gw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"data.frame values (currently stype == \"gwl\")","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw_gw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"","code":"if (FALSE) { read_wasserportal_raw_gw(station = 149, stype = \"gwl\") read_wasserportal_raw_gw(station = 149, stype = \"gwq\") }"},{"path":"https://kwb-r.github.io/wasserportal/reference/wasserportal_base_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: Base Url of Berlin Wassersportal — wasserportal_base_url","title":"Helper function: Base Url of Berlin Wassersportal — wasserportal_base_url","text":"Helper function: Base Url Berlin Wassersportal","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/wasserportal_base_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: Base Url of Berlin Wassersportal — wasserportal_base_url","text":"","code":"wasserportal_base_url()"},{"path":"https://kwb-r.github.io/wasserportal/reference/wasserportal_base_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: Base Url of Berlin Wassersportal — wasserportal_base_url","text":"string base url Berlin Wasserportal","code":""},{"path":"https://kwb-r.github.io/wasserportal/news/index.html","id":"wasserportal-011-2022-06-09","dir":"Changelog","previous_headings":"","what":"wasserportal 0.1.1 2022-06-09","title":"wasserportal 0.1.1 2022-06-09","text":"Fix bug get_wasserportal_stations_table() now correctly naming parameter temperature (formerly incorrectly level) Fix Surface Water article Adapt Zenodo DOI badge cite always latest release","code":""},{"path":"https://kwb-r.github.io/wasserportal/news/index.html","id":"wasserportal-010-2022-06-01","dir":"Changelog","previous_headings":"","what":"wasserportal 0.1.0 2022-06-01","title":"wasserportal 0.1.0 2022-06-01","text":"R package scraping groundwater data (groundwater level quality) Wasserportal Berlin. Please note support scraping surface water monitoring stations currently limited! Functions: get_stations(): returns metadata available monitoring stations get_wasserportal_masters_data(): get master data selected station_ids read_wasserportal_raw_gw(): enables download groundwater data. Checkout Tutorial article use downloading one multiple stations . read_wasserportal(): works surface water monitoring stations, outdated, based outdated static file station/variable names (.e. 11 instead 82 stations currently provided!) instead relying new metadata provided online. fixed within next release. progress issue checkout #21 Workflows: Tutorial article download groundwater level quality data Usage combining previously scraped (see tutorial ) data performing analysis: Groundwater, e.g. creating map GW level trends Two workflows (REACH UBA, Norman List) created within project PROMISCES assessing prevalence spatial distribution persistent, mobile toxic (PMT) substances Berlin groundwater, based different PMT lists, .e. REACH UBA Norman List.","code":""},{"path":"https://kwb-r.github.io/wasserportal/news/index.html","id":"wasserportal-0009000","dir":"Changelog","previous_headings":"","what":"wasserportal 0.0.0.9000","title":"wasserportal 0.0.0.9000","text":"Added NEWS.md file track changes package. see https://style.tidyverse.org/news.html writing good NEWS.md","code":""}]
