[{"path":"https://kwb-r.github.io/wasserportal/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021-2022 Kompetenzzentrum Wasser Berlin gGmbH (KWB) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kwb-r.github.io/wasserportal/articles/groundwater.html","id":"define-urls-and-helper-functions","dir":"Articles","previous_headings":"","what":"Define URLs and Helper Functions","title":"Groundwater","text":"","code":"`%>%` <- magrittr::`%>%`  urls <- kwb.utils::resolve(list(   gh_wasserportal = \"https://kwb-r.github.io/wasserportal\",   stations_gwl_meta = \"<gh_wasserportal>/stations_gwl_master.json\",   stations_gwl_data = \"<gh_wasserportal>/stations_gwl_data.json\",   stations_gwq_meta = \"<gh_wasserportal>/stations_gwq_master.json\",   stations_gwq_data = \"<gh_wasserportal>/stations_gwq_data.json\",   stations_crosstable = \"<gh_wasserportal>/stations_crosstable.json\" ))  top_filter_data_table <- function(data) {   DT::datatable(data, filter = \"top\") }  cat_file_enumeration <- function(base_url, files) {   cat(paste0(     sprintf(\"- [%s](%s/%s)\", files, base_url, files),     collapse = \"\\n\\n\"   )) }"},{"path":"https://kwb-r.github.io/wasserportal/articles/groundwater.html","id":"master-data","dir":"Articles","previous_headings":"","what":"Master Data","title":"Groundwater","text":"following groundwater master data .csv files available download: stations_groundwater_level.csv stations_groundwater_quality.csv","code":"stations <- wasserportal::get_stations() #> Importing 9 station overviews from Wasserportal Berlin ... ok. (6.88 secs)  is_gw <- stringr::str_detect(names(stations$overview_list), \"groundwater\")  files <- wasserportal::list_masters_data_to_csv(stations$overview_list[is_gw]) #> Writing 'stations_groundwater_level.csv' ... ok. (0.24 secs)  #> Writing 'stations_groundwater_quality.csv' ... ok. (0.03 secs)"},{"path":"https://kwb-r.github.io/wasserportal/articles/groundwater.html","id":"get-groundwater-data","dir":"Articles","previous_headings":"","what":"Get Groundwater Data","title":"Groundwater","text":"following groundwater data .zip files available download: groundwater_level.zip groundwater_quality.zip","code":"if (use_random_subset_of_stations) {   stations_bak <- stations   x <- stations$overview_list$groundwater.level[sample(876, 10), ]   stations$overview_list$groundwater.level <- x   x <- stations$overview_list$groundwater.quality[sample(208, 10), ]   stations$overview_list$groundwater.quality <- x }  gw_data_list <- wasserportal::get_groundwater_data(stations, debug = TRUE) #> Importing 'groundwater.level' data (1/2) ... Downloading Messstellennummer '1' (1/893) ... ok. (1.39 secs)  #> Downloading Messstellennummer '2' (2/893) ... ok. (0.90 secs)  #> Downloading Messstellennummer '3' (3/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '4' (4/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '9' (5/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '21' (6/893) ... ok. (0.94 secs)  #> Downloading Messstellennummer '24' (7/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '25' (8/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '26' (9/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '30' (10/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '31' (11/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '32' (12/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '34' (13/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '35' (14/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '39' (15/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '40' (16/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '44' (17/893) ... ok. (1.85 secs)  #> Downloading Messstellennummer '45' (18/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '47' (19/893) ... ok. (1.74 secs)  #> Downloading Messstellennummer '50' (20/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '51' (21/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '52' (22/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '53' (23/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '55' (24/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '58' (25/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '60' (26/893) ... ok. (0.94 secs)  #> Downloading Messstellennummer '62' (27/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '64' (28/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '66' (29/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '68' (30/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '70' (31/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '71' (32/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '73' (33/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '74' (34/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '75' (35/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '76' (36/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '79' (37/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '80' (38/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '82' (39/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '86' (40/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '87' (41/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '88' (42/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '89' (43/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '90' (44/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '91' (45/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '92' (46/893) ... ok. (1.74 secs)  #> Downloading Messstellennummer '93' (47/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '94' (48/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '95' (49/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '96' (50/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '97' (51/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '100' (52/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '101' (53/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '102' (54/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '103' (55/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '105' (56/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '106' (57/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '107' (58/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '108' (59/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '109' (60/893) ... ok. (1.83 secs)  #> Downloading Messstellennummer '110' (61/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '114' (62/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '115' (63/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '120' (64/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '124' (65/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '125' (66/893) ... ok. (0.95 secs)  #> Downloading Messstellennummer '128' (67/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '129' (68/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '130' (69/893) ... ok. (1.75 secs)  #> Downloading Messstellennummer '132' (70/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '136' (71/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '137' (72/893) ... ok. (1.49 secs)  #> Downloading Messstellennummer '138' (73/893) ... ok. (0.64 secs)  #> Downloading Messstellennummer '139' (74/893) ... ok. (0.94 secs)  #> Downloading Messstellennummer '144' (75/893) ... ok. (0.46 secs)  #> Downloading Messstellennummer '145' (76/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '146' (77/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '147' (78/893) ... ok. (0.92 secs)  #> Downloading Messstellennummer '149' (79/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '150' (80/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '152' (81/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '153' (82/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '154' (83/893) ... ok. (0.86 secs)  #> Downloading Messstellennummer '155' (84/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '157' (85/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '161' (86/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '162' (87/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '164' (88/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '165' (89/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '169' (90/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '173' (91/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '176' (92/893) ... ok. (0.87 secs)  #> Downloading Messstellennummer '178' (93/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '181' (94/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '182' (95/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '185' (96/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '200' (97/893) ... ok. (0.98 secs)  #> Downloading Messstellennummer '201' (98/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '202' (99/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '204' (100/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '205' (101/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '206' (102/893) ... ok. (1.11 secs)  #> Downloading Messstellennummer '208' (103/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '209' (104/893) ... ok. (0.87 secs)  #> Downloading Messstellennummer '211' (105/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '214' (106/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '221' (107/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '230' (108/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '231' (109/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '232' (110/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '237' (111/893) ... ok. (1.86 secs)  #> Downloading Messstellennummer '241' (112/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '243' (113/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '247' (114/893) ... ok. (0.91 secs)  #> Downloading Messstellennummer '248' (115/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '249' (116/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '251' (117/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '252' (118/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '253' (119/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '258' (120/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '259' (121/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '262' (122/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '268' (123/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '282' (124/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '293' (125/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '294' (126/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '305' (127/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '312' (128/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '319' (129/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '325' (130/893) ... ok. (1.74 secs)  #> Downloading Messstellennummer '326' (131/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '328' (132/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '330' (133/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '340' (134/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '343' (135/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '344' (136/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '345' (137/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '358' (138/893) ... ok. (1.76 secs)  #> Downloading Messstellennummer '363' (139/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '366' (140/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '370' (141/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '377' (142/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '380' (143/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '384' (144/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '399' (145/893) ... ok. (0.92 secs)  #> Downloading Messstellennummer '401' (146/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '404' (147/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '405' (148/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '407' (149/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '425' (150/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '426' (151/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '429' (152/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '430' (153/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '432' (154/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '439' (155/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '440' (156/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '446' (157/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '492' (158/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '496' (159/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '499' (160/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '500' (161/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '501' (162/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '510' (163/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '511' (164/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '513' (165/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '516' (166/893) ... ok. (1.85 secs)  #> Downloading Messstellennummer '518' (167/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '520' (168/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '522' (169/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '552' (170/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '554' (171/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '558' (172/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '561' (173/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '562' (174/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '563' (175/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '564' (176/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '569' (177/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '576' (178/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '577' (179/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '580' (180/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '581' (181/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '583' (182/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '584' (183/893) ... ok. (0.94 secs)  #> Downloading Messstellennummer '585' (184/893) ... ok. (1.80 secs)  #> Downloading Messstellennummer '587' (185/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '591' (186/893) ... ok. (1.83 secs)  #> Downloading Messstellennummer '594' (187/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '595' (188/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '596' (189/893) ... ok. (0.94 secs)  #> Downloading Messstellennummer '597' (190/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '603' (191/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '604' (192/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '605' (193/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '606' (194/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '607' (195/893) ... ok. (1.78 secs)  #> Downloading Messstellennummer '608' (196/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '609' (197/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '610' (198/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '621' (199/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '622' (200/893) ... ok. (0.95 secs)  #> Downloading Messstellennummer '628' (201/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '642' (202/893) ... ok. (1.03 secs)  #> Downloading Messstellennummer '645' (203/893) ... ok. (1.20 secs)  #> Downloading Messstellennummer '648' (204/893) ... ok. (1.03 secs)  #> Downloading Messstellennummer '652' (205/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '654' (206/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '658' (207/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '662' (208/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '667' (209/893) ... ok. (0.86 secs)  #> Downloading Messstellennummer '669' (210/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '671' (211/893) ... ok. (1.87 secs)  #> Downloading Messstellennummer '672' (212/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '674' (213/893) ... ok. (0.91 secs)  #> Downloading Messstellennummer '676' (214/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '677' (215/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '678' (216/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '683' (217/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '684' (218/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '685' (219/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '693' (220/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '694' (221/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '697' (222/893) ... ok. (1.77 secs)  #> Downloading Messstellennummer '698' (223/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '700' (224/893) ... ok. (0.96 secs)  #> Downloading Messstellennummer '702' (225/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '703' (226/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '710' (227/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '711' (228/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '712' (229/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '720' (230/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '721' (231/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '725' (232/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '726' (233/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '729' (234/893) ... ok. (0.91 secs)  #> Downloading Messstellennummer '731' (235/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '738' (236/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '741' (237/893) ... ok. (1.77 secs)  #> Downloading Messstellennummer '742' (238/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '744' (239/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '746' (240/893) ... ok. (1.80 secs)  #> Downloading Messstellennummer '747' (241/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '749' (242/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '750' (243/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '751' (244/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '752' (245/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '753' (246/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '754' (247/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '755' (248/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '756' (249/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '757' (250/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '760' (251/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '762' (252/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '765' (253/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '767' (254/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '768' (255/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '769' (256/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '770' (257/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '772' (258/893) ... ok. (1.71 secs)  #> Downloading Messstellennummer '773' (259/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '774' (260/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '775' (261/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '776' (262/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '777' (263/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '785' (264/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '791' (265/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '793' (266/893) ... ok. (1.81 secs)  #> Downloading Messstellennummer '795' (267/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '796' (268/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '797' (269/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '798' (270/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '799' (271/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '800' (272/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '801' (273/893) ... ok. (0.86 secs)  #> Downloading Messstellennummer '802' (274/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '803' (275/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '806' (276/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '807' (277/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '808' (278/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '809' (279/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '810' (280/893) ... ok. (2.91 secs)  #> Downloading Messstellennummer '811' (281/893) ... ok. (2.94 secs)  #> Downloading Messstellennummer '812' (282/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '813' (283/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '816' (284/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '817' (285/893) ... ok. (1.77 secs)  #> Downloading Messstellennummer '819' (286/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '830' (287/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '833' (288/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '1305' (289/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '1306' (290/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '1311' (291/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '1318' (292/893) ... ok. (0.67 secs)  #> Downloading Messstellennummer '1320' (293/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '1325' (294/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '1339' (295/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '1349' (296/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '1359' (297/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '2606' (298/893) ... ok. (0.51 secs)  #> Downloading Messstellennummer '2607' (299/893) ... ok. (0.53 secs)  #> Downloading Messstellennummer '3024' (300/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '3025' (301/893) ... ok. (0.66 secs)  #> Downloading Messstellennummer '3033' (302/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '3063' (303/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '3097' (304/893) ... ok. (1.07 secs)  #> Downloading Messstellennummer '3133' (305/893) ... ok. (0.49 secs)  #> Downloading Messstellennummer '3137' (306/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '3144' (307/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '3154' (308/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '3155' (309/893) ... ok. (0.48 secs)  #> Downloading Messstellennummer '3156' (310/893) ... ok. (0.46 secs)  #> Downloading Messstellennummer '3211' (311/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '3212' (312/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '3213' (313/893) ... ok. (0.90 secs)  #> Downloading Messstellennummer '3215' (314/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '3315' (315/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '3316' (316/893) ... ok. (0.66 secs)  #> Downloading Messstellennummer '3354' (317/893) ... ok. (0.64 secs)  #> Downloading Messstellennummer '3355' (318/893) ... ok. (1.83 secs)  #> Downloading Messstellennummer '3356' (319/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '3357' (320/893) ... ok. (0.64 secs)  #> Downloading Messstellennummer '3358' (321/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '4003' (322/893) ... ok. (0.67 secs)  #> Downloading Messstellennummer '4005' (323/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '4006' (324/893) ... ok. (0.66 secs)  #> Downloading Messstellennummer '4008' (325/893) ... ok. (0.65 secs)  #> Downloading Messstellennummer '4013' (326/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '4015' (327/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '4059' (328/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '4061' (329/893) ... ok. (0.67 secs)  #> Downloading Messstellennummer '4098' (330/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '4102' (331/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '4105' (332/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '4304' (333/893) ... ok. (0.64 secs)  #> Downloading Messstellennummer '4458' (334/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '4460' (335/893) ... ok. (1.71 secs)  #> Downloading Messstellennummer '4461' (336/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '4519' (337/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '4521' (338/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '4588' (339/893) ... ok. (0.64 secs)  #> Downloading Messstellennummer '4611' (340/893) ... ok. (0.37 secs)  #> Downloading Messstellennummer '4612' (341/893) ... ok. (0.43 secs)  #> Downloading Messstellennummer '4631' (342/893) ... ok. (0.67 secs)  #> Downloading Messstellennummer '4632' (343/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '4640' (344/893) ... ok. (0.88 secs)  #> Downloading Messstellennummer '4641' (345/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '4643' (346/893) ... ok. (0.59 secs)  #> Downloading Messstellennummer '4727' (347/893) ... ok. (0.37 secs)  #> Downloading Messstellennummer '4788' (348/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '4799' (349/893) ... ok. (1.74 secs)  #> Downloading Messstellennummer '4800' (350/893) ... ok. (0.65 secs)  #> Downloading Messstellennummer '4805' (351/893) ... ok. (0.67 secs)  #> Downloading Messstellennummer '4846' (352/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '4851' (353/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '4874' (354/893) ... ok. (0.37 secs)  #> Downloading Messstellennummer '4875' (355/893) ... ok. (0.40 secs)  #> Downloading Messstellennummer '4882' (356/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '4885' (357/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '4890' (358/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '4895' (359/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '4897' (360/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '4928' (361/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '4930' (362/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '5001' (363/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '5002' (364/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '5004' (365/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '5005' (366/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '5006' (367/893) ... ok. (0.99 secs)  #> Downloading Messstellennummer '5008' (368/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '5009' (369/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '5011' (370/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '5013' (371/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '5014' (372/893) ... ok. (0.94 secs)  #> Downloading Messstellennummer '5017' (373/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '5018' (374/893) ... ok. (0.49 secs)  #> Downloading Messstellennummer '5019' (375/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '5020' (376/893) ... ok. (0.94 secs)  #> Downloading Messstellennummer '5022' (377/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5025' (378/893) ... ok. (0.56 secs)  #> Downloading Messstellennummer '5026' (379/893) ... ok. (1.77 secs)  #> Downloading Messstellennummer '5027' (380/893) ... ok. (0.96 secs)  #> Downloading Messstellennummer '5029' (381/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '5031' (382/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '5033' (383/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '5036' (384/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '5039' (385/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '5040' (386/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '5042' (387/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '5043' (388/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '5044' (389/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5045' (390/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '5049' (391/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '5052' (392/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '5057' (393/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5058' (394/893) ... ok. (1.68 secs)  #> Downloading Messstellennummer '5059' (395/893) ... ok. (0.46 secs)  #> Downloading Messstellennummer '5060' (396/893) ... ok. (1.74 secs)  #> Downloading Messstellennummer '5066' (397/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '5068' (398/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5071' (399/893) ... ok. (0.88 secs)  #> Downloading Messstellennummer '5072' (400/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5073' (401/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '5074' (402/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5075' (403/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '5076' (404/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '5077' (405/893) ... ok. (1.10 secs)  #> Downloading Messstellennummer '5078' (406/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5086' (407/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5090' (408/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5091' (409/893) ... ok. (1.72 secs)  #> Downloading Messstellennummer '5092' (410/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '5097' (411/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5118' (412/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '5138' (413/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '5139' (414/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '5140' (415/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '5141' (416/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '5142' (417/893) ... ok. (0.39 secs)  #> Downloading Messstellennummer '5144' (418/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '5147' (419/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '5148' (420/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '5149' (421/893) ... ok. (0.65 secs)  #> Downloading Messstellennummer '5150' (422/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5152' (423/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5154' (424/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '5155' (425/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5156' (426/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '5161' (427/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '5162' (428/893) ... ok. (0.61 secs)  #> Downloading Messstellennummer '5167' (429/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '5168' (430/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5169' (431/893) ... ok. (0.40 secs)  #> Downloading Messstellennummer '5176' (432/893) ... ok. (1.80 secs)  #> Downloading Messstellennummer '5202' (433/893) ... ok. (0.40 secs)  #> Downloading Messstellennummer '5207' (434/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '5217' (435/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5231' (436/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '5233' (437/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '5253' (438/893) ... ok. (0.65 secs)  #> Downloading Messstellennummer '5270' (439/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '5277' (440/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '5289' (441/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5297' (442/893) ... ok. (0.65 secs)  #> Downloading Messstellennummer '5304' (443/893) ... ok. (1.73 secs)  #> Downloading Messstellennummer '5306' (444/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '5308' (445/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5311' (446/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5316' (447/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5320' (448/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '5333' (449/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5337' (450/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5342' (451/893) ... ok. (0.41 secs)  #> Downloading Messstellennummer '5351' (452/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '5355' (453/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '5366' (454/893) ... ok. (0.64 secs)  #> Downloading Messstellennummer '5372' (455/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5382' (456/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5388' (457/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '5389' (458/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '5390' (459/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '5393' (460/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5404' (461/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5405' (462/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '5412' (463/893) ... ok. (0.38 secs)  #> Downloading Messstellennummer '5420' (464/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5422' (465/893) ... ok. (0.94 secs)  #> Downloading Messstellennummer '5424' (466/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5427' (467/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '5428' (468/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5430' (469/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '5431' (470/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5462' (471/893) ... ok. (1.46 secs)  #> Downloading Messstellennummer '5471' (472/893) ... ok. (0.58 secs)  #> Downloading Messstellennummer '5472' (473/893) ... ok. (0.58 secs)  #> Downloading Messstellennummer '5473' (474/893) ... ok. (0.60 secs)  #> Downloading Messstellennummer '5475' (475/893) ... ok. (0.39 secs)  #> Downloading Messstellennummer '5476' (476/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '5573' (477/893) ... ok. (0.60 secs)  #> Downloading Messstellennummer '5581' (478/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '5600' (479/893) ... ok. (0.64 secs)  #> Downloading Messstellennummer '5998' (480/893) ... ok. (1.80 secs)  #> Downloading Messstellennummer '5999' (481/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '6004' (482/893) ... ok. (2.00 secs)  #> Downloading Messstellennummer '6007' (483/893) ... ok. (1.02 secs)  #> Downloading Messstellennummer '6010' (484/893) ... ok. (1.00 secs)  #> Downloading Messstellennummer '6011' (485/893) ... ok. (1.09 secs)  #> Downloading Messstellennummer '6012' (486/893) ... ok. (1.03 secs)  #> Downloading Messstellennummer '6013' (487/893) ... ok. (1.12 secs)  #> Downloading Messstellennummer '6014' (488/893) ... ok. (1.07 secs)  #> Downloading Messstellennummer '6016' (489/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '6017' (490/893) ... ok. (1.02 secs)  #> Downloading Messstellennummer '6020' (491/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '6021' (492/893) ... ok. (0.94 secs)  #> Downloading Messstellennummer '6022' (493/893) ... ok. (1.03 secs)  #> Downloading Messstellennummer '6023' (494/893) ... ok. (0.90 secs)  #> Downloading Messstellennummer '6024' (495/893) ... ok. (1.02 secs)  #> Downloading Messstellennummer '6025' (496/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '6026' (497/893) ... ok. (1.05 secs)  #> Downloading Messstellennummer '6027' (498/893) ... ok. (0.97 secs)  #> Downloading Messstellennummer '6029' (499/893) ... ok. (1.11 secs)  #> Downloading Messstellennummer '6034' (500/893) ... ok. (0.95 secs)  #> Downloading Messstellennummer '6035' (501/893) ... ok. (1.12 secs)  #> Downloading Messstellennummer '6038' (502/893) ... ok. (1.01 secs)  #> Downloading Messstellennummer '6040' (503/893) ... ok. (0.97 secs)  #> Downloading Messstellennummer '6043' (504/893) ... ok. (0.86 secs)  #> Downloading Messstellennummer '6044' (505/893) ... ok. (0.96 secs)  #> Downloading Messstellennummer '6047' (506/893) ... ok. (1.10 secs)  #> Downloading Messstellennummer '6056' (507/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '6057' (508/893) ... ok. (0.98 secs)  #> Downloading Messstellennummer '6059' (509/893) ... ok. (1.01 secs)  #> Downloading Messstellennummer '6060' (510/893) ... ok. (0.92 secs)  #> Downloading Messstellennummer '6063' (511/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '6064' (512/893) ... ok. (0.89 secs)  #> Downloading Messstellennummer '6066' (513/893) ... ok. (0.95 secs)  #> Downloading Messstellennummer '6067' (514/893) ... ok. (1.73 secs)  #> Downloading Messstellennummer '6069' (515/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '6075' (516/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '6076' (517/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '6080' (518/893) ... ok. (1.00 secs)  #> Downloading Messstellennummer '6082' (519/893) ... ok. (0.93 secs)  #> Downloading Messstellennummer '6084' (520/893) ... ok. (1.00 secs)  #> Downloading Messstellennummer '6089' (521/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '6092' (522/893) ... ok. (0.95 secs)  #> Downloading Messstellennummer '6093' (523/893) ... ok. (1.92 secs)  #> Downloading Messstellennummer '6095' (524/893) ... ok. (0.97 secs)  #> Downloading Messstellennummer '6097' (525/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '6102' (526/893) ... ok. (0.95 secs)  #> Downloading Messstellennummer '6108' (527/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '6110' (528/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '6111' (529/893) ... ok. (1.02 secs)  #> Downloading Messstellennummer '6112' (530/893) ... ok. (1.02 secs)  #> Downloading Messstellennummer '6113' (531/893) ... ok. (1.08 secs)  #> Downloading Messstellennummer '6114' (532/893) ... ok. (1.03 secs)  #> Downloading Messstellennummer '6115' (533/893) ... ok. (0.99 secs)  #> Downloading Messstellennummer '6119' (534/893) ... ok. (0.92 secs)  #> Downloading Messstellennummer '6121' (535/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '6125' (536/893) ... ok. (0.96 secs)  #> Downloading Messstellennummer '6127' (537/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '6501' (538/893) ... ok. (0.90 secs)  #> Downloading Messstellennummer '6504' (539/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '6510' (540/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '6511' (541/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '6515' (542/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '6516' (543/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '6518' (544/893) ... ok. (0.41 secs)  #> Downloading Messstellennummer '6520' (545/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '6522' (546/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '6532' (547/893) ... ok. (0.63 secs)  #> Downloading Messstellennummer '6533' (548/893) ... ok. (0.47 secs)  #> Downloading Messstellennummer '6534' (549/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '6535' (550/893) ... ok. (0.44 secs)  #> Downloading Messstellennummer '6548' (551/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '6560' (552/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '6567' (553/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '6568' (554/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '6743' (555/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '6961' (556/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '6962' (557/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '6963' (558/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '6964' (559/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '6965' (560/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '6967' (561/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '6968' (562/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '7003' (563/893) ... ok. (0.93 secs)  #> Downloading Messstellennummer '7014' (564/893) ... ok. (0.86 secs)  #> Downloading Messstellennummer '7015' (565/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '7016' (566/893) ... ok. (0.91 secs)  #> Downloading Messstellennummer '7018' (567/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '7021' (568/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '7027' (569/893) ... ok. (0.91 secs)  #> Downloading Messstellennummer '7028' (570/893) ... ok. (3.28 secs)  #> Downloading Messstellennummer '7029' (571/893) ... ok. (0.91 secs)  #> Downloading Messstellennummer '7030' (572/893) ... ok. (0.87 secs)  #> Downloading Messstellennummer '7039' (573/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '7040' (574/893) ... ok. (0.56 secs)  #> Downloading Messstellennummer '7041' (575/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '7042' (576/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '7044' (577/893) ... ok. (0.86 secs)  #> Downloading Messstellennummer '7045' (578/893) ... ok. (0.98 secs)  #> Downloading Messstellennummer '7048' (579/893) ... ok. (0.88 secs)  #> Downloading Messstellennummer '7049' (580/893) ... ok. (0.90 secs)  #> Downloading Messstellennummer '7050' (581/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '7054' (582/893) ... ok. (0.87 secs)  #> Downloading Messstellennummer '7055' (583/893) ... ok. (0.89 secs)  #> Downloading Messstellennummer '7056' (584/893) ... ok. (0.89 secs)  #> Downloading Messstellennummer '7057' (585/893) ... ok. (0.88 secs)  #> Downloading Messstellennummer '7058' (586/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '7066' (587/893) ... ok. (0.93 secs)  #> Downloading Messstellennummer '7067' (588/893) ... ok. (0.88 secs)  #> Downloading Messstellennummer '7076' (589/893) ... ok. (0.89 secs)  #> Downloading Messstellennummer '7078' (590/893) ... ok. (0.92 secs)  #> Downloading Messstellennummer '7079' (591/893) ... ok. (0.88 secs)  #> Downloading Messstellennummer '7081' (592/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '7082' (593/893) ... ok. (0.86 secs)  #> Downloading Messstellennummer '7083' (594/893) ... ok. (0.86 secs)  #> Downloading Messstellennummer '7084' (595/893) ... ok. (0.93 secs)  #> Downloading Messstellennummer '7085' (596/893) ... ok. (0.88 secs)  #> Downloading Messstellennummer '7092' (597/893) ... ok. (1.78 secs)  #> Downloading Messstellennummer '7098' (598/893) ... ok. (0.87 secs)  #> Downloading Messstellennummer '7099' (599/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '7104' (600/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '7106' (601/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '7107' (602/893) ... ok. (1.00 secs)  #> Downloading Messstellennummer '7109' (603/893) ... ok. (0.91 secs)  #> Downloading Messstellennummer '7110' (604/893) ... ok. (0.86 secs)  #> Downloading Messstellennummer '7111' (605/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '7112' (606/893) ... ok. (0.88 secs)  #> Downloading Messstellennummer '7114' (607/893) ... ok. (1.25 secs)  #> Downloading Messstellennummer '7117' (608/893) ... ok. (0.89 secs)  #> Downloading Messstellennummer '7118' (609/893) ... ok. (0.86 secs)  #> Downloading Messstellennummer '7119' (610/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '7125' (611/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '7126' (612/893) ... ok. (1.09 secs)  #> Downloading Messstellennummer '7127' (613/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '7128' (614/893) ... ok. (1.00 secs)  #> Downloading Messstellennummer '7132' (615/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '7136' (616/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '7137' (617/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '7144' (618/893) ... ok. (1.86 secs)  #> Downloading Messstellennummer '7145' (619/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '7146' (620/893) ... ok. (3.02 secs)  #> Downloading Messstellennummer '7147' (621/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '7161' (622/893) ... ok. (0.90 secs)  #> Downloading Messstellennummer '7168' (623/893) ... ok. (0.87 secs)  #> Downloading Messstellennummer '7171' (624/893) ... ok. (1.00 secs)  #> Downloading Messstellennummer '7172' (625/893) ... ok. (0.95 secs)  #> Downloading Messstellennummer '7173' (626/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '7178' (627/893) ... ok. (0.87 secs)  #> Downloading Messstellennummer '7180' (628/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '7182' (629/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '7192' (630/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '7193' (631/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '7194' (632/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '7195' (633/893) ... ok. (1.79 secs)  #> Downloading Messstellennummer '7196' (634/893) ... ok. (0.95 secs)  #> Downloading Messstellennummer '7206' (635/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '7207' (636/893) ... ok. (0.85 secs)  #> Downloading Messstellennummer '7208' (637/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '7210' (638/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '7214' (639/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '7215' (640/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '7216' (641/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '7218' (642/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '7219' (643/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '7228' (644/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '7229' (645/893) ... ok. (1.94 secs)  #> Downloading Messstellennummer '7231' (646/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '7233' (647/893) ... ok. (0.66 secs)  #> Downloading Messstellennummer '7237' (648/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '7240' (649/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '7241' (650/893) ... ok. (0.81 secs)  #> Downloading Messstellennummer '7248' (651/893) ... ok. (1.05 secs)  #> Downloading Messstellennummer '7249' (652/893) ... ok. (1.45 secs)  #> Downloading Messstellennummer '7250' (653/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '7251' (654/893) ... ok. (0.86 secs)  #> Downloading Messstellennummer '7253' (655/893) ... ok. (0.84 secs)  #> Downloading Messstellennummer '7254' (656/893) ... ok. (0.59 secs)  #> Downloading Messstellennummer '7255' (657/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '7259' (658/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '7261' (659/893) ... ok. (0.97 secs)  #> Downloading Messstellennummer '7264' (660/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '7269' (661/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '7275' (662/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '7277' (663/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '7278' (664/893) ... ok. (0.95 secs)  #> Downloading Messstellennummer '7281' (665/893) ... ok. (2.88 secs)  #> Downloading Messstellennummer '7286' (666/893) ... ok. (0.86 secs)  #> Downloading Messstellennummer '7290' (667/893) ... ok. (0.92 secs)  #> Downloading Messstellennummer '7291' (668/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '7292' (669/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '7293' (670/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '7295' (671/893) ... ok. (0.96 secs)  #> Downloading Messstellennummer '7299' (672/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '7301' (673/893) ... ok. (1.80 secs)  #> Downloading Messstellennummer '7323' (674/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '7324' (675/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '7340' (676/893) ... ok. (0.49 secs)  #> Downloading Messstellennummer '7347' (677/893) ... ok. (0.42 secs)  #> Downloading Messstellennummer '7502' (678/893) ... ok. (1.44 secs)  #> Downloading Messstellennummer '7518' (679/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '7578' (680/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '7706' (681/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '7713' (682/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '7722' (683/893) ... ok. (0.78 secs)  #> Downloading Messstellennummer '7723' (684/893) ... ok. (0.42 secs)  #> Downloading Messstellennummer '7728' (685/893) ... ok. (0.42 secs)  #> Downloading Messstellennummer '7742' (686/893) ... ok. (0.92 secs)  #> Downloading Messstellennummer '7745' (687/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '7746' (688/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '7750' (689/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '7751' (690/893) ... ok. (0.40 secs)  #> Downloading Messstellennummer '7752' (691/893) ... ok. (0.41 secs)  #> Downloading Messstellennummer '7845' (692/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '7882' (693/893) ... ok. (0.63 secs)  #> Downloading Messstellennummer '7883' (694/893) ... ok. (0.67 secs)  #> Downloading Messstellennummer '7884' (695/893) ... ok. (0.66 secs)  #> Downloading Messstellennummer '7885' (696/893) ... ok. (0.39 secs)  #> Downloading Messstellennummer '7886' (697/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '7892' (698/893) ... ok. (0.38 secs)  #> Downloading Messstellennummer '8018' (699/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '8044' (700/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '8045' (701/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '8047' (702/893) ... ok. (0.39 secs)  #> Downloading Messstellennummer '8048' (703/893) ... ok. (1.43 secs)  #> Downloading Messstellennummer '8050' (704/893) ... ok. (0.39 secs)  #> Downloading Messstellennummer '8053' (705/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '8054' (706/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '8056' (707/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '8058' (708/893) ... ok. (1.05 secs)  #> Downloading Messstellennummer '8059' (709/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '8063' (710/893) ... ok. (0.57 secs)  #> Downloading Messstellennummer '8118' (711/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '8197' (712/893) ... ok. (0.56 secs)  #> Downloading Messstellennummer '8199' (713/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '8213' (714/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '8214' (715/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '8215' (716/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '8221' (717/893) ... ok. (1.02 secs)  #> Downloading Messstellennummer '8224' (718/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '8225' (719/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '8226' (720/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '8349' (721/893) ... ok. (1.40 secs)  #> Downloading Messstellennummer '8350' (722/893) ... ok. (0.42 secs)  #> Downloading Messstellennummer '8351' (723/893) ... ok. (0.46 secs)  #> Downloading Messstellennummer '8355' (724/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '8367' (725/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '8378' (726/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '8408' (727/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '8411' (728/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '8412' (729/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '8414' (730/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '8415' (731/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '8437' (732/893) ... ok. (0.36 secs)  #> Downloading Messstellennummer '8438' (733/893) ... ok. (0.65 secs)  #> Downloading Messstellennummer '8440' (734/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '8441' (735/893) ... ok. (0.41 secs)  #> Downloading Messstellennummer '8443' (736/893) ... ok. (0.42 secs)  #> Downloading Messstellennummer '8445' (737/893) ... ok. (0.41 secs)  #> Downloading Messstellennummer '8448' (738/893) ... ok. (0.38 secs)  #> Downloading Messstellennummer '8450' (739/893) ... ok. (0.40 secs)  #> Downloading Messstellennummer '8456' (740/893) ... ok. (0.48 secs)  #> Downloading Messstellennummer '8458' (741/893) ... ok. (0.61 secs)  #> Downloading Messstellennummer '8459' (742/893) ... ok. (0.41 secs)  #> Downloading Messstellennummer '8464' (743/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '8468' (744/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '8469' (745/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '8472' (746/893) ... ok. (0.50 secs)  #> Downloading Messstellennummer '8473' (747/893) ... ok. (0.44 secs)  #> Downloading Messstellennummer '8476' (748/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '8481' (749/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '8484' (750/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '8485' (751/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '8693' (752/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '8947' (753/893) ... ok. (0.63 secs)  #> Downloading Messstellennummer '8949' (754/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '8950' (755/893) ... ok. (0.79 secs)  #> Downloading Messstellennummer '8964' (756/893) ... ok. (0.64 secs)  #> Downloading Messstellennummer '8974' (757/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '8977' (758/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '8979' (759/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '8997' (760/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '9058' (761/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '9083' (762/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '9092' (763/893) ... ok. (0.60 secs)  #> Downloading Messstellennummer '9348' (764/893) ... ok. (0.41 secs)  #> Downloading Messstellennummer '9401' (765/893) ... ok. (1.69 secs)  #> Downloading Messstellennummer '9408' (766/893) ... ok. (0.89 secs)  #> Downloading Messstellennummer '9416' (767/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '9424' (768/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '9445' (769/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '9451' (770/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '9458' (771/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '9485' (772/893) ... ok. (0.73 secs)  #> Downloading Messstellennummer '9491' (773/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '9492' (774/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '9503' (775/893) ... ok. (1.07 secs)  #> Downloading Messstellennummer '9612' (776/893) ... ok. (0.71 secs)  #> Downloading Messstellennummer '9614' (777/893) ... ok. (0.75 secs)  #> Downloading Messstellennummer '9859' (778/893) ... ok. (0.63 secs)  #> Downloading Messstellennummer '9874' (779/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '9931' (780/893) ... ok. (0.65 secs)  #> Downloading Messstellennummer '9932' (781/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '9987' (782/893) ... ok. (0.61 secs)  #> Downloading Messstellennummer '10034' (783/893) ... ok. (0.64 secs)  #> Downloading Messstellennummer '10035' (784/893) ... ok. (0.72 secs)  #> Downloading Messstellennummer '10038' (785/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '10414' (786/893) ... ok. (0.67 secs)  #> Downloading Messstellennummer '10417' (787/893) ... ok. (0.61 secs)  #> Downloading Messstellennummer '10420' (788/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '10421' (789/893) ... ok. (0.59 secs)  #> Downloading Messstellennummer '10709' (790/893) ... ok. (1.65 secs)  #> Downloading Messstellennummer '15001' (791/893) ... ok. (0.88 secs)  #> Downloading Messstellennummer '15012' (792/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '15049' (793/893) ... ok. (0.69 secs)  #> Downloading Messstellennummer '15062' (794/893) ... ok. (0.66 secs)  #> Downloading Messstellennummer '15063' (795/893) ... ok. (1.66 secs)  #> Downloading Messstellennummer '15065' (796/893) ... ok. (0.97 secs)  #> Downloading Messstellennummer '15101' (797/893) ... ok. (0.80 secs)  #> Downloading Messstellennummer '15104' (798/893) ... ok. (0.83 secs)  #> Downloading Messstellennummer '15106' (799/893) ... ok. (0.77 secs)  #> Downloading Messstellennummer '15147' (800/893) ... ok. (0.74 secs)  #> Downloading Messstellennummer '15150' (801/893) ... ok. (0.57 secs)  #> Downloading Messstellennummer '15152' (802/893) ... ok. (0.70 secs)  #> Downloading Messstellennummer '15153' (803/893) ... ok. (0.63 secs)  #> Downloading Messstellennummer '15156' (804/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '15160' (805/893) ... ok. (1.64 secs)  #> Downloading Messstellennummer '15161' (806/893) ... ok. (0.64 secs)  #> Downloading Messstellennummer '15162' (807/893) ... ok. (0.61 secs)  #> Downloading Messstellennummer '15163' (808/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '15165' (809/893) ... ok. (1.99 secs)  #> Downloading Messstellennummer '15166' (810/893) ... ok. (0.65 secs)  #> Downloading Messstellennummer '15167' (811/893) ... ok. (0.65 secs)  #> Downloading Messstellennummer '15168' (812/893) ... ok. (0.66 secs)  #> Downloading Messstellennummer '15169' (813/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '15170' (814/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '15171' (815/893) ... ok. (0.66 secs)  #> Downloading Messstellennummer '15172' (816/893) ... ok. (1.63 secs)  #> Downloading Messstellennummer '15173' (817/893) ... ok. (0.64 secs)  #> Downloading Messstellennummer '15174' (818/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '15175' (819/893) ... ok. (0.64 secs)  #> Downloading Messstellennummer '15176' (820/893) ... ok. (0.63 secs)  #> Downloading Messstellennummer '15177' (821/893) ... ok. (0.61 secs)  #> Downloading Messstellennummer '15178' (822/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '15179' (823/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '15180' (824/893) ... ok. (0.63 secs)  #> Downloading Messstellennummer '15181' (825/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '15183' (826/893) ... ok. (0.49 secs)  #> Downloading Messstellennummer '15184' (827/893) ... ok. (0.50 secs)  #> Downloading Messstellennummer '15185' (828/893) ... ok. (0.51 secs)  #> Downloading Messstellennummer '15189' (829/893) ... ok. (0.47 secs)  #> Downloading Messstellennummer '15190' (830/893) ... ok. (0.48 secs)  #> Downloading Messstellennummer '15192' (831/893) ... ok. (0.49 secs)  #> Downloading Messstellennummer '15193' (832/893) ... ok. (0.52 secs)  #> Downloading Messstellennummer '15195' (833/893) ... ok. (1.48 secs)  #> Downloading Messstellennummer '15196' (834/893) ... ok. (0.46 secs)  #> Downloading Messstellennummer '15197' (835/893) ... ok. (1.60 secs)  #> Downloading Messstellennummer '15198' (836/893) ... ok. (1.50 secs)  #> Downloading Messstellennummer '15199' (837/893) ... ok. (0.67 secs)  #> Downloading Messstellennummer '15201' (838/893) ... ok. (1.48 secs)  #> Downloading Messstellennummer '17299' (839/893) ... ok. (0.53 secs)  #> Downloading Messstellennummer '17300' (840/893) ... ok. (1.50 secs)  #> Downloading Messstellennummer '17301' (841/893) ... ok. (0.43 secs)  #> Downloading Messstellennummer '17302' (842/893) ... ok. (0.48 secs)  #> Downloading Messstellennummer '17303' (843/893) ... ok. (0.48 secs)  #> Downloading Messstellennummer '17304' (844/893) ... ok. (0.50 secs)  #> Downloading Messstellennummer '17305' (845/893) ... ok. (0.50 secs)  #> Downloading Messstellennummer '17306' (846/893) ... ok. (0.49 secs)  #> Downloading Messstellennummer '17308' (847/893) ... ok. (0.46 secs)  #> Downloading Messstellennummer '17319' (848/893) ... ok. (0.39 secs)  #> Downloading Messstellennummer '17900' (849/893) ... ok. (0.57 secs)  #> Downloading Messstellennummer '17901' (850/893) ... ok. (0.59 secs)  #> Downloading Messstellennummer '17903' (851/893) ... ok. (0.53 secs)  #> Downloading Messstellennummer '17904' (852/893) ... ok. (0.57 secs)  #> Downloading Messstellennummer '17905' (853/893) ... ok. (0.54 secs)  #> Downloading Messstellennummer '17907' (854/893) ... ok. (0.54 secs)  #> Downloading Messstellennummer '17908' (855/893) ... ok. (1.59 secs)  #> Downloading Messstellennummer '17909' (856/893) ... ok. (0.54 secs)  #> Downloading Messstellennummer '17910' (857/893) ... ok. (0.54 secs)  #> Downloading Messstellennummer '17911' (858/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '21101' (859/893) ... ok. (2.23 secs)  #> Downloading Messstellennummer '23101' (860/893) ... ok. (0.76 secs)  #> Downloading Messstellennummer '23201' (861/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '23208' (862/893) ... ok. (0.59 secs)  #> Downloading Messstellennummer '23701' (863/893) ... ok. (0.62 secs)  #> Downloading Messstellennummer '23702' (864/893) ... ok. (0.56 secs)  #> Downloading Messstellennummer '23703' (865/893) ... ok. (0.58 secs)  #> Downloading Messstellennummer '23704' (866/893) ... ok. (1.60 secs)  #> Downloading Messstellennummer '23705' (867/893) ... ok. (0.57 secs)  #> Downloading Messstellennummer '23707' (868/893) ... ok. (0.88 secs)  #> Downloading Messstellennummer '23719' (869/893) ... ok. (0.54 secs)  #> Downloading Messstellennummer '23748' (870/893) ... ok. (0.54 secs)  #> Downloading Messstellennummer '23749' (871/893) ... ok. (0.57 secs)  #> Downloading Messstellennummer '23750' (872/893) ... ok. (0.60 secs)  #> Downloading Messstellennummer '23751' (873/893) ... ok. (0.55 secs)  #> Downloading Messstellennummer '23752' (874/893) ... ok. (0.53 secs)  #> Downloading Messstellennummer '23753' (875/893) ... ok. (0.53 secs)  #> Downloading Messstellennummer '30201' (876/893) ... ok. (0.58 secs)  #> Downloading Messstellennummer '90203' (877/893) ... ok. (0.50 secs)  #> Downloading Messstellennummer '90267' (878/893) ... ok. (0.68 secs)  #> Downloading Messstellennummer '93143' (879/893) ... ok. (0.47 secs)  #> Downloading Messstellennummer '95242' (880/893) ... ok. (0.51 secs)  #> Downloading Messstellennummer '95391' (881/893) ... ok. (0.52 secs)  #> Downloading Messstellennummer '95580' (882/893) ... ok. (0.50 secs)  #> Downloading Messstellennummer '97175' (883/893) ... ok. (0.82 secs)  #> Downloading Messstellennummer '97766' (884/893) ... ok. (0.67 secs)  #> Downloading Messstellennummer '97894' (885/893) ... ok. (0.58 secs)  #> Downloading Messstellennummer '98345' (886/893) ... ok. (0.55 secs)  #> Downloading Messstellennummer '99003' (887/893) ... ok. (0.49 secs)  #> Downloading Messstellennummer '99085' (888/893) ... ok. (0.61 secs)  #> Downloading Messstellennummer '99619' (889/893) ... ok. (1.50 secs)  #> Downloading Messstellennummer '99620' (890/893) ... ok. (0.53 secs)  #> Downloading Messstellennummer '99721' (891/893) ... ok. (0.47 secs)  #> Downloading Messstellennummer '99729' (892/893) ... ok. (0.50 secs)  #> Downloading Messstellennummer '99868' (893/893) ... ok. (0.63 secs)  #> ok. (12.28 mins)  #> Importing 'groundwater.quality' data (2/2) ... Downloading Messstellennummer '3' (1/213) ... ok. (0.74 secs)  #> Downloading Messstellennummer '145' (2/213) ... ok. (0.74 secs)  #> Downloading Messstellennummer '149' (3/213) ... ok. (0.72 secs)  #> Downloading Messstellennummer '282' (4/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '344' (5/213) ... ok. (0.76 secs)  #> Downloading Messstellennummer '358' (6/213) ... ok. (0.76 secs)  #> Downloading Messstellennummer '499' (7/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '580' (8/213) ... ok. (1.77 secs)  #> Downloading Messstellennummer '604' (9/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '645' (10/213) ... ok. (1.83 secs)  #> Downloading Messstellennummer '762' (11/213) ... ok. (0.81 secs)  #> Downloading Messstellennummer '775' (12/213) ... ok. (0.76 secs)  #> Downloading Messstellennummer '1359' (13/213) ... ok. (0.71 secs)  #> Downloading Messstellennummer '3215' (14/213) ... ok. (0.76 secs)  #> Downloading Messstellennummer '3354' (15/213) ... ok. (0.64 secs)  #> Downloading Messstellennummer '4061' (16/213) ... ok. (0.63 secs)  #> Downloading Messstellennummer '4105' (17/213) ... ok. (1.05 secs)  #> Downloading Messstellennummer '4233' (18/213) ... ok. (0.37 secs)  #> Downloading Messstellennummer '4304' (19/213) ... ok. (1.65 secs)  #> Downloading Messstellennummer '4521' (20/213) ... ok. (0.68 secs)  #> Downloading Messstellennummer '4611' (21/213) ... ok. (0.38 secs)  #> Downloading Messstellennummer '4612' (22/213) ... ok. (0.36 secs)  #> Downloading Messstellennummer '4640' (23/213) ... ok. (0.80 secs)  #> Downloading Messstellennummer '4727' (24/213) ... ok. (0.35 secs)  #> Downloading Messstellennummer '4846' (25/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '4875' (26/213) ... ok. (0.36 secs)  #> Downloading Messstellennummer '5002' (27/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '5003' (28/213) ... ok. (0.35 secs)  #> Downloading Messstellennummer '5005' (29/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '5008' (30/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '5009' (31/213) ... ok. (0.79 secs)  #> Downloading Messstellennummer '5010' (32/213) ... ok. (0.35 secs)  #> Downloading Messstellennummer '5013' (33/213) ... ok. (0.80 secs)  #> Downloading Messstellennummer '5020' (34/213) ... ok. (1.14 secs)  #> Downloading Messstellennummer '5022' (35/213) ... ok. (0.71 secs)  #> Downloading Messstellennummer '5025' (36/213) ... ok. (0.54 secs)  #> Downloading Messstellennummer '5026' (37/213) ... ok. (0.95 secs)  #> Downloading Messstellennummer '5027' (38/213) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5032' (39/213) ... ok. (0.35 secs)  #> Downloading Messstellennummer '5036' (40/213) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5039' (41/213) ... ok. (0.68 secs)  #> Downloading Messstellennummer '5040' (42/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5042' (43/213) ... ok. (0.72 secs)  #> Downloading Messstellennummer '5044' (44/213) ... ok. (0.67 secs)  #> Downloading Messstellennummer '5049' (45/213) ... ok. (0.71 secs)  #> Downloading Messstellennummer '5058' (46/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5060' (47/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5066' (48/213) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5073' (49/213) ... ok. (0.67 secs)  #> Downloading Messstellennummer '5074' (50/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5075' (51/213) ... ok. (0.71 secs)  #> Downloading Messstellennummer '5076' (52/213) ... ok. (0.67 secs)  #> Downloading Messstellennummer '5078' (53/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5086' (54/213) ... ok. (0.69 secs)  #> Downloading Messstellennummer '5090' (55/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5095' (56/213) ... ok. (0.36 secs)  #> Downloading Messstellennummer '5097' (57/213) ... ok. (0.69 secs)  #> Downloading Messstellennummer '5130' (58/213) ... ok. (0.35 secs)  #> Downloading Messstellennummer '5138' (59/213) ... ok. (0.76 secs)  #> Downloading Messstellennummer '5140' (60/213) ... ok. (0.80 secs)  #> Downloading Messstellennummer '5150' (61/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5155' (62/213) ... ok. (0.68 secs)  #> Downloading Messstellennummer '5167' (63/213) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5207' (64/213) ... ok. (0.74 secs)  #> Downloading Messstellennummer '5297' (65/213) ... ok. (0.63 secs)  #> Downloading Messstellennummer '5306' (66/213) ... ok. (1.67 secs)  #> Downloading Messstellennummer '5351' (67/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5355' (68/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5366' (69/213) ... ok. (0.64 secs)  #> Downloading Messstellennummer '5404' (70/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '5999' (71/213) ... ok. (0.75 secs)  #> Downloading Messstellennummer '6010' (72/213) ... ok. (1.00 secs)  #> Downloading Messstellennummer '6014' (73/213) ... ok. (1.00 secs)  #> Downloading Messstellennummer '6016' (74/213) ... ok. (0.79 secs)  #> Downloading Messstellennummer '6017' (75/213) ... ok. (1.05 secs)  #> Downloading Messstellennummer '6020' (76/213) ... ok. (0.79 secs)  #> Downloading Messstellennummer '6023' (77/213) ... ok. (0.89 secs)  #> Downloading Messstellennummer '6026' (78/213) ... ok. (1.03 secs)  #> Downloading Messstellennummer '6028' (79/213) ... ok. (0.35 secs)  #> Downloading Messstellennummer '6038' (80/213) ... ok. (0.96 secs)  #> Downloading Messstellennummer '6047' (81/213) ... ok. (0.73 secs)  #> Downloading Messstellennummer '6056' (82/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '6058' (83/213) ... ok. (0.36 secs)  #> Downloading Messstellennummer '6063' (84/213) ... ok. (0.87 secs)  #> Downloading Messstellennummer '6066' (85/213) ... ok. (0.92 secs)  #> Downloading Messstellennummer '6067' (86/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '6069' (87/213) ... ok. (0.95 secs)  #> Downloading Messstellennummer '6075' (88/213) ... ok. (0.95 secs)  #> Downloading Messstellennummer '6080' (89/213) ... ok. (1.10 secs)  #> Downloading Messstellennummer '6081' (90/213) ... ok. (0.34 secs)  #> Downloading Messstellennummer '6084' (91/213) ... ok. (1.07 secs)  #> Downloading Messstellennummer '6089' (92/213) ... ok. (0.71 secs)  #> Downloading Messstellennummer '6097' (93/213) ... ok. (0.78 secs)  #> Downloading Messstellennummer '6113' (94/213) ... ok. (1.03 secs)  #> Downloading Messstellennummer '6121' (95/213) ... ok. (0.94 secs)  #> Downloading Messstellennummer '6504' (96/213) ... ok. (0.73 secs)  #> Downloading Messstellennummer '6510' (97/213) ... ok. (0.71 secs)  #> Downloading Messstellennummer '6511' (98/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '6515' (99/213) ... ok. (0.70 secs)  #> Downloading Messstellennummer '6518' (100/213) ... ok. (0.42 secs)  #> Downloading Messstellennummer '6520' (101/213) ... ok. (0.88 secs)  #> Downloading Messstellennummer '6522' (102/213) ... ok. (0.86 secs)  #> Downloading Messstellennummer '6533' (103/213) ... ok. (0.43 secs)  #> Downloading Messstellennummer '6534' (104/213) ... ok. (0.71 secs)  #> Downloading Messstellennummer '6535' (105/213) ... ok. (0.44 secs)  #> Downloading Messstellennummer '6548' (106/213) ... ok. (0.78 secs)  #> Downloading Messstellennummer '6963' (107/213) ... ok. (0.67 secs)  #> Downloading Messstellennummer '7014' (108/213) ... ok. (0.86 secs)  #> Downloading Messstellennummer '7015' (109/213) ... ok. (0.85 secs)  #> Downloading Messstellennummer '7018' (110/213) ... ok. (0.73 secs)  #> Downloading Messstellennummer '7019' (111/213) ... ok. (0.47 secs)  #> Downloading Messstellennummer '7027' (112/213) ... ok. (0.91 secs)  #> Downloading Messstellennummer '7030' (113/213) ... ok. (0.85 secs)  #> Downloading Messstellennummer '7033' (114/213) ... ok. (0.36 secs)  #> Downloading Messstellennummer '7034' (115/213) ... ok. (0.39 secs)  #> Downloading Messstellennummer '7035' (116/213) ... ok. (1.37 secs)  #> Downloading Messstellennummer '7039' (117/213) ... ok. (0.79 secs)  #> Downloading Messstellennummer '7042' (118/213) ... ok. (1.13 secs)  #> Downloading Messstellennummer '7044' (119/213) ... ok. (0.85 secs)  #> Downloading Messstellennummer '7045' (120/213) ... ok. (0.81 secs)  #> Downloading Messstellennummer '7057' (121/213) ... ok. (1.88 secs)  #> Downloading Messstellennummer '7062' (122/213) ... ok. (0.34 secs)  #> Downloading Messstellennummer '7063' (123/213) ... ok. (0.36 secs)  #> Downloading Messstellennummer '7064' (124/213) ... ok. (0.35 secs)  #> Downloading Messstellennummer '7072' (125/213) ... ok. (0.37 secs)  #> Downloading Messstellennummer '7078' (126/213) ... ok. (0.88 secs)  #> Downloading Messstellennummer '7079' (127/213) ... ok. (0.85 secs)  #> Downloading Messstellennummer '7081' (128/213) ... ok. (0.86 secs)  #> Downloading Messstellennummer '7084' (129/213) ... ok. (0.83 secs)  #> Downloading Messstellennummer '7086' (130/213) ... ok. (0.38 secs)  #> Downloading Messstellennummer '7092' (131/213) ... ok. (0.75 secs)  #> Downloading Messstellennummer '7098' (132/213) ... ok. (0.89 secs)  #> Downloading Messstellennummer '7108' (133/213) ... ok. (0.35 secs)  #> Downloading Messstellennummer '7109' (134/213) ... ok. (0.87 secs)  #> Downloading Messstellennummer '7111' (135/213) ... ok. (0.83 secs)  #> Downloading Messstellennummer '7121' (136/213) ... ok. (0.38 secs)  #> Downloading Messstellennummer '7123' (137/213) ... ok. (0.37 secs)  #> Downloading Messstellennummer '7124' (138/213) ... ok. (0.36 secs)  #> Downloading Messstellennummer '7132' (139/213) ... ok. (0.99 secs)  #> Downloading Messstellennummer '7136' (140/213) ... ok. (0.74 secs)  #> Downloading Messstellennummer '7137' (141/213) ... ok. (0.92 secs)  #> Downloading Messstellennummer '7144' (142/213) ... ok. (0.81 secs)  #> Downloading Messstellennummer '7161' (143/213) ... ok. (0.81 secs)  #> Downloading Messstellennummer '7165' (144/213) ... ok. (0.35 secs)  #> Downloading Messstellennummer '7168' (145/213) ... ok. (0.84 secs)  #> Downloading Messstellennummer '7171' (146/213) ... ok. (0.75 secs)  #> Downloading Messstellennummer '7172' (147/213) ... ok. (0.83 secs)  #> Downloading Messstellennummer '7173' (148/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '7176' (149/213) ... ok. (0.36 secs)  #> Downloading Messstellennummer '7180' (150/213) ... ok. (0.79 secs)  #> Downloading Messstellennummer '7195' (151/213) ... ok. (0.80 secs)  #> Downloading Messstellennummer '7206' (152/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '7207' (153/213) ... ok. (0.79 secs)  #> Downloading Messstellennummer '7209' (154/213) ... ok. (0.34 secs)  #> Downloading Messstellennummer '7210' (155/213) ... ok. (0.78 secs)  #> Downloading Messstellennummer '7215' (156/213) ... ok. (0.81 secs)  #> Downloading Messstellennummer '7218' (157/213) ... ok. (0.87 secs)  #> Downloading Messstellennummer '7219' (158/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '7229' (159/213) ... ok. (1.79 secs)  #> Downloading Messstellennummer '7237' (160/213) ... ok. (0.98 secs)  #> Downloading Messstellennummer '7248' (161/213) ... ok. (1.77 secs)  #> Downloading Messstellennummer '7250' (162/213) ... ok. (0.76 secs)  #> Downloading Messstellennummer '7255' (163/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '7257' (164/213) ... ok. (0.36 secs)  #> Downloading Messstellennummer '7258' (165/213) ... ok. (0.38 secs)  #> Downloading Messstellennummer '7259' (166/213) ... ok. (0.79 secs)  #> Downloading Messstellennummer '7264' (167/213) ... ok. (1.78 secs)  #> Downloading Messstellennummer '7268' (168/213) ... ok. (0.34 secs)  #> Downloading Messstellennummer '7285' (169/213) ... ok. (0.36 secs)  #> Downloading Messstellennummer '7286' (170/213) ... ok. (0.74 secs)  #> Downloading Messstellennummer '7290' (171/213) ... ok. (0.75 secs)  #> Downloading Messstellennummer '7291' (172/213) ... ok. (0.73 secs)  #> Downloading Messstellennummer '7292' (173/213) ... ok. (0.76 secs)  #> Downloading Messstellennummer '7295' (174/213) ... ok. (0.76 secs)  #> Downloading Messstellennummer '7298' (175/213) ... ok. (0.37 secs)  #> Downloading Messstellennummer '7301' (176/213) ... ok. (1.83 secs)  #> Downloading Messstellennummer '8469' (177/213) ... ok. (0.72 secs)  #> Downloading Messstellennummer '8472' (178/213) ... ok. (0.49 secs)  #> Downloading Messstellennummer '8481' (179/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '8949' (180/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '8950' (181/213) ... ok. (0.77 secs)  #> Downloading Messstellennummer '8957' (182/213) ... ok. (0.36 secs)  #> Downloading Messstellennummer '8964' (183/213) ... ok. (0.68 secs)  #> Downloading Messstellennummer '9092' (184/213) ... ok. (0.54 secs)  #> Downloading Messstellennummer '9401' (185/213) ... ok. (0.64 secs)  #> Downloading Messstellennummer '10421' (186/213) ... ok. (0.61 secs)  #> Downloading Messstellennummer '10790' (187/213) ... ok. (0.35 secs)  #> Downloading Messstellennummer '15000' (188/213) ... ok. (0.35 secs)  #> Downloading Messstellennummer '15001' (189/213) ... ok. (0.80 secs)  #> Downloading Messstellennummer '15049' (190/213) ... ok. (0.76 secs)  #> Downloading Messstellennummer '15065' (191/213) ... ok. (0.66 secs)  #> Downloading Messstellennummer '15101' (192/213) ... ok. (0.79 secs)  #> Downloading Messstellennummer '15109' (193/213) ... ok. (1.37 secs)  #> Downloading Messstellennummer '15147' (194/213) ... ok. (1.64 secs)  #> Downloading Messstellennummer '15150' (195/213) ... ok. (0.50 secs)  #> Downloading Messstellennummer '15152' (196/213) ... ok. (0.62 secs)  #> Downloading Messstellennummer '15153' (197/213) ... ok. (0.63 secs)  #> Downloading Messstellennummer '15156' (198/213) ... ok. (0.64 secs)  #> Downloading Messstellennummer '15160' (199/213) ... ok. (0.63 secs)  #> Downloading Messstellennummer '15162' (200/213) ... ok. (0.65 secs)  #> Downloading Messstellennummer '15163' (201/213) ... ok. (0.62 secs)  #> Downloading Messstellennummer '15174' (202/213) ... ok. (0.59 secs)  #> Downloading Messstellennummer '17303' (203/213) ... ok. (0.46 secs)  #> Downloading Messstellennummer '17304' (204/213) ... ok. (0.46 secs)  #> Downloading Messstellennummer '17306' (205/213) ... ok. (0.48 secs)  #> Downloading Messstellennummer '17309' (206/213) ... ok. (0.36 secs)  #> Downloading Messstellennummer '23701' (207/213) ... ok. (0.57 secs)  #> Downloading Messstellennummer '23703' (208/213) ... ok. (0.55 secs)  #> Downloading Messstellennummer '23704' (209/213) ... ok. (0.59 secs)  #> Downloading Messstellennummer '23750' (210/213) ... ok. (0.57 secs)  #> Downloading Messstellennummer '95580' (211/213) ... ok. (0.46 secs)  #> Downloading Messstellennummer '97766' (212/213) ... ok. (0.67 secs)  #> Downloading Messstellennummer '97894' (213/213) ... ok. (0.55 secs)  #> ok. (2.63 mins)  files <- wasserportal::list_timeseries_data_to_zip(gw_data_list) #> Writing 'groundwater_level.zip' ... ok. (19.29 secs)  #> Writing 'groundwater_quality.zip' ... ok. (3.33 secs)  files #> [1] \"groundwater_level.zip\"   \"groundwater_quality.zip\"  # Data availability per parameter gw_data_list %>%   dplyr::bind_rows() %>%    dplyr::count(Parameter, Einheit) %>%    dplyr::arrange(dplyr::desc(.data$n)) #>              Parameter   Einheit       n #> 1:            GW-Stand m ü. NHN) 7910965 #> 2: GW-Stand (m ü. NHN)      <NA> 1643403"},{"path":"https://kwb-r.github.io/wasserportal/articles/groundwater.html","id":"do-your-own-analysis","dir":"Articles","previous_headings":"","what":"Do Your Own Analysis!","title":"Groundwater","text":"Download CSV/JSON/ZIP files scraped prepared day 5 .m. UTC re-use R. following data available: Data availability stations_crosstable.json: available parameters per station (see wasserportal::get_overview_options() available options). Note: includes also surface monitoring stations! Master Data stations_gwl_master.json: GW level stations stations_gwq_master.json: GW quality stations Measurements stations_gwl_data.json: GW level measurements stations stations_gwq_data.json: GW quality measurements available parameters stations Please find example merging information single data frame:","code":"library(wasserportal)  stations_crosstable <- jsonlite::fromJSON(urls$stations_crosstable)  str(stations_crosstable) #> 'data.frame':    1054 obs. of  11 variables: #>  $ Messstellennummer: chr  \"5865900\" \"5827103\" \"5870400\" \"5865300\" ... #>  $ Messstellenname  : chr  \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>  $ ows              : chr  \"x\" \"x\" \"x\" \"x\" ... #>  $ odf              : chr  NA \"x\" \"x\" \"x\" ... #>  $ owt              : chr  NA NA NA \"x\" ... #>  $ olf              : chr  NA NA NA NA ... #>  $ oph              : chr  NA NA NA NA ... #>  $ oog              : chr  NA NA NA NA ... #>  $ oos              : chr  NA NA NA NA ... #>  $ gws              : chr  NA NA NA NA ... #>  $ gwq              : chr  NA NA NA NA ... library(wasserportal)  site_number_to_character <- function(data) {   data %>%     dplyr::mutate(       Messstellennummer = as.character(.data$Messstellennummer)     ) }  left_join_by_site <- function(data, master_data) {   data %>%     dplyr::left_join(master_data, by = c(\"Messstellennummer\" = \"Nummer\")) }  ### GW levels gwl_master <- jsonlite::fromJSON(urls$stations_gwl_meta) gwl_data <- jsonlite::fromJSON(urls$stations_gwl_data) %>%     site_number_to_character() %>%    left_join_by_site(gwl_master)  str(gwl_data) #> 'data.frame':    48806 obs. of  15 variables: #>  $ Messstellennummer             : chr  \"1\" \"1\" \"1\" \"1\" ... #>  $ Datum                         : chr  \"1970-01-02\" \"1970-01-16\" \"1970-02-02\" \"1970-02-16\" ... #>  $ Parameter                     : chr  \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" ... #>  $ Einheit                       : chr  \"m ü. NHN\" \"m ü. NHN\" \"m ü. NHN\" \"m ü. NHN\" ... #>  $ Messwert                      : num  35.2 35.2 35.2 35.2 35.2 ... #>  $ Bezirk                        : chr  \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>  $ Betreiber                     : chr  \"Senat\" \"Senat\" \"Senat\" \"Senat\" ... #>  $ Auspraegung                   : chr  \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" ... #>  $ Grundwasserleiter             : chr  \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>  $ Gelaendeoberkante_GOK_m_ue_NHN: chr  \"49.20\" \"49.20\" \"49.20\" \"49.20\" ... #>  $ Rohroberkante_m_ue_NHN        : chr  \"49.49\" \"49.49\" \"49.49\" \"49.49\" ... #>  $ Filteroberkante_m_u_GOK       : chr  \"37.34\" \"37.34\" \"37.34\" \"37.34\" ... #>  $ Filterunterkante_m_u_GOK      : chr  \"39.34\" \"39.34\" \"39.34\" \"39.34\" ... #>  $ Rechtswert_UTM_33_N           : chr  \"384416\" \"384416\" \"384416\" \"384416\" ... #>  $ Hochwert_UTM_33_N             : chr  \"5831712\" \"5831712\" \"5831712\" \"5831712\" ...  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(urls$stations_gwq_meta) gwq_data <- jsonlite::fromJSON(urls$stations_gwq_data) %>%     site_number_to_character() %>%    left_join_by_site(gwq_master)  str(gwq_data) #> 'data.frame':    713955 obs. of  15 variables: #>  $ Messstellennummer             : chr  \"3\" \"3\" \"3\" \"3\" ... #>  $ Datum                         : chr  \"2020-07-01\" \"2020-07-01\" \"2020-07-01\" \"2020-07-01\" ... #>  $ Parameter                     : chr  \"Temperatur (Luft)\" \"pH-Wert (Feld)\" \"Temperatur (Wasser)\" \"Leitfähigkeit 25°C vor Ort\" ... #>  $ Einheit                       : chr  \"grd Celsius\" \"ohne Einheit\" \"grd C\" \"µS/cm\" ... #>  $ Messwert                      : num  19 7.1 12.2 939 4.91 5 6 0.25 453 0 ... #>  $ Bezirk                        : chr  \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>  $ Betreiber                     : chr  \"Senat\" \"Senat\" \"Senat\" \"Senat\" ... #>  $ Auspraegung                   : chr  \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" \"GW-Stand + GW-Güte\" ... #>  $ Grundwasserleiter             : chr  \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>  $ Gelaendeoberkante_GOK_m_ue_NHN: chr  \"37.87\" \"37.87\" \"37.87\" \"37.87\" ... #>  $ Rohroberkante_m_ue_NHN        : chr  \"38.65\" \"38.65\" \"38.65\" \"38.65\" ... #>  $ Filteroberkante_m_u_GOK       : chr  \"12.27\" \"12.27\" \"12.27\" \"12.27\" ... #>  $ Filterunterkante_m_u_GOK      : chr  \"13.27\" \"13.27\" \"13.27\" \"13.27\" ... #>  $ Rechtswert_UTM_33_N           : chr  \"385789\" \"385789\" \"385789\" \"385789\" ... #>  $ Hochwert_UTM_33_N             : chr  \"5830677\" \"5830677\" \"5830677\" \"5830677\" ...  ### Merge GW level and quality into one data frame gw_data <- dplyr::bind_rows(gwl_data, gwq_data)  str(gw_data) #> 'data.frame':    762761 obs. of  15 variables: #>  $ Messstellennummer             : chr  \"1\" \"1\" \"1\" \"1\" ... #>  $ Datum                         : chr  \"1970-01-02\" \"1970-01-16\" \"1970-02-02\" \"1970-02-16\" ... #>  $ Parameter                     : chr  \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" ... #>  $ Einheit                       : chr  \"m ü. NHN\" \"m ü. NHN\" \"m ü. NHN\" \"m ü. NHN\" ... #>  $ Messwert                      : num  35.2 35.2 35.2 35.2 35.2 ... #>  $ Bezirk                        : chr  \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>  $ Betreiber                     : chr  \"Senat\" \"Senat\" \"Senat\" \"Senat\" ... #>  $ Auspraegung                   : chr  \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" \"GW-Stand\" ... #>  $ Grundwasserleiter             : chr  \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>  $ Gelaendeoberkante_GOK_m_ue_NHN: chr  \"49.20\" \"49.20\" \"49.20\" \"49.20\" ... #>  $ Rohroberkante_m_ue_NHN        : chr  \"49.49\" \"49.49\" \"49.49\" \"49.49\" ... #>  $ Filteroberkante_m_u_GOK       : chr  \"37.34\" \"37.34\" \"37.34\" \"37.34\" ... #>  $ Filterunterkante_m_u_GOK      : chr  \"39.34\" \"39.34\" \"39.34\" \"39.34\" ... #>  $ Rechtswert_UTM_33_N           : chr  \"384416\" \"384416\" \"384416\" \"384416\" ... #>  $ Hochwert_UTM_33_N             : chr  \"5831712\" \"5831712\" \"5831712\" \"5831712\" ..."},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/groundwater.html","id":"gw-quality","dir":"Articles","previous_headings":"Data Availability","what":"GW Quality","title":"Groundwater","text":"","code":"# Helper functions to be reused in different data summaries select_main_columns <- function(data) {   data %>%     dplyr::select(dplyr::all_of(c(       \"Messstellennummer\",       \"Parameter\",       \"Datum\",       \"Messwert\"     ))) }  summarise_min_max_n_arrange <- function(data) {   data %>%     dplyr::summarise(       date_min = min(.data$Datum),       date_max = max(.data$Datum),       n = dplyr::n(),        .groups = \"drop\"     ) %>%     dplyr::arrange(dplyr::desc(.data$n)) } gwq_data_by_parameter <- gwq_data %>%     select_main_columns() %>%     dplyr::group_by(.data$Parameter) %>%     summarise_min_max_n_arrange()  top_filter_data_table(gwq_data_by_parameter) gwq_data_by_parameter_and_station <- gwq_data %>%   select_main_columns() %>%   dplyr::group_by(.data$Parameter, .data$Messstellennummer) %>%   summarise_min_max_n_arrange()  top_filter_data_table(gwq_data_by_parameter_and_station) #> Warning in instance$preRenderHook(instance): It seems your data is too big for #> client-side DataTables. You may consider server-side processing: #> https://rstudio.github.io/DT/server.html"},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/groundwater.html","id":"gw-quality-1","dir":"Articles","previous_headings":"Export","what":"GW Quality","title":"Groundwater","text":"","code":"openxlsx::write.xlsx(   x = list(   gwq_by_parameter = gwq_data_by_parameter,   gwq_by_parameter_and_station = gwq_data_by_parameter_and_station,   gwq_data = gwq_data,   gwq_master = gwq_master ),   file = \"wasserportal_gwq_data.xlsx\",   overwrite = TRUE )"},{"path":"https://kwb-r.github.io/wasserportal/articles/norman_lists.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"Norman Lists","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package install.packages('wasserportal')"},{"path":"https://kwb-r.github.io/wasserportal/articles/norman_lists.html","id":"get-norman-lists","dir":"Articles","previous_headings":"","what":"Get Norman Lists","title":"Norman Lists","text":"","code":"library(wasserportal)  download_file <- function(url,                              tdir = tempdir() ) { filename <- basename(url) t_path <- file.path(tdir, filename) download.file(url, dest= t_path, mode=\"wb\")  t_path }  ### Download S0 | SUSDAT | Merged NORMAN Suspect List: SusDat ### Version: NORMAN-SLE-S0.0.4.1 (2021-01-18) ### DOI: 10.5281/zenodo.5873975  #norman_s0_path  <- download_file(\"https://zenodo.org/record/5873975/files/susdat_2022-01-18-104316.csv\") #norman_s0 <- readr::read_csv(norman_s0_path)  ### Download S36 | UBAPMT | Potential Persistent, Mobile and Toxic (PMT) substances ### Version: NORMAN-SLE-S36.0.2.1 (2020-12-15) ### DOI: \"10.5281/zenodo.4323239\"  norman_s36_ubapmt_path  <- download_file(\"https://zenodo.org/record/4323239/files/S36_UBAPMT_Dec2020.csv\") norman_s36_ubapmt <- readr::read_csv(norman_s36_ubapmt_path) #> Rows: 258 Columns: 35 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (33): CAS_Number, Name, List, ProtectedCAS, REACH_Emission_Likelihood, P... #> dbl  (2): Largest_Fragment_mass, PubChemCID_largestFragment #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.   ### Download S90 | ZEROPMBOX1 | ZeroPM Box 1 Substances ### Version: Version NORMAN-SLE-S90.0.1.0 (2021-01-15) ### DOI: 10.5281/zenodo.5854252  norman_s90_zeropm_path  <- download_file(\"https://zenodo.org/record/5854252/files/ZeroPM_Box1.csv\") norman_s90_zeropm <- readr::read_csv(norman_s90_zeropm_path) #> New names: #> * Synonym -> Synonym...11 #> * Synonym -> Synonym...12 #> * Synonym -> Synonym...13 #> Rows: 38 Columns: 13── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (11): CAS, Name, DTXSID, InChIKey, SMILES, InChI, MolecularFormula, IUPA... #> dbl  (2): PubChem_CID, MonoisotopicMass #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.   cas_wasserportal <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\",                                                   encoding = \"UTF-8\") cas_reach <- wasserportal::readPackageFile(file = \"cas_reach.csv\")  ubapmt_publication <- cas_reach %>%   dplyr::filter(.data$cas_number %in% unique(cas_wasserportal$cas_number))   ubapmt_zenodo <- norman_s36_ubapmt %>%   dplyr::filter(.data$CAS_Number %in% unique(cas_wasserportal$cas_number)) %>%   dplyr::rename(cas_number = .data$CAS_Number)  missing_on_zenodo <- cas_reach %>%   dplyr::mutate(zenodo = dplyr::if_else(.data$cas_number %in% unique(ubapmt_zenodo$cas_number),                                         \"yes\",                                         NA_character_),                 publication = dplyr::if_else(.data$cas_number %in% unique(ubapmt_publication$cas_number),                                         \"yes\",                                         NA_character_)) %>%   dplyr::filter(publication == \"yes\" | zenodo == \"yes\") %>%   dplyr::relocate(tidyselect::all_of(c(\"publication\", \"zenodo\")), .before = .data$emission_likelihood)   DT::datatable(missing_on_zenodo, filter = \"top\", rownames = FALSE)"},{"path":"https://kwb-r.github.io/wasserportal/articles/norman_lists.html","id":"get-gw-quality-from-wasserportal","dir":"Articles","previous_headings":"","what":"Get GW Quality from Wasserportal","title":"Norman Lists","text":"","code":"# Load R package library(wasserportal)  ### For details see: ### https://kwb-r.github.io/wasserportal/articles/groundwater.html ### JSON files (see below) are build every day automatically at 5a.m. with ### continious integration, for build status, see here: ### https://github.com/KWB-R/wasserportal/actions/workflows/pkgdown.yaml  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%   dplyr::filter(Parameter %in% cas_wasserportal$Parameter) %>%   dplyr::inner_join(cas_wasserportal, by = \"Parameter\") %>%   dplyr::inner_join(norman_s0_in_wasserportal, by = \"cas_number\") %>%    dplyr::mutate(Messstellennummer = as.character(Messstellennummer), ## CensorCode: either \"below\" (less than) for concentration below detection limit ## (value is detection limit) or \"nc\" (not censored) for concentration above ## detection limit                 CensorCode = dplyr::case_when(Messwert <= 0 ~ \"lt\",                                               TRUE ~ \"nc\"),                 Messwert = dplyr::case_when(Messwert < 0 ~ abs(Messwert), ### Only two decimal numbers are exported by Wasserportal, but some sustances ### have lower detection limit, e.g. 0.002 which results in -0.00 export, thus ### the dummy detection limit 0.00999 was introduced (until fixed by Senate: ### Christoph will sent a email to Matthias Schröder)                                             Messwert == 0 ~ 0.009999,                                             TRUE ~ Messwert)) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  gwq_subs <- gwq_data %>%   dplyr::count(.data$cas_number, .data$CensorCode) %>%   tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%   dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                 nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                 percent_nc = 100*nc/n_total) %>%   dplyr::rename(n_lt = lt,                 n_nc = nc) %>%   dplyr::left_join(norman_s0_in_wasserportal) %>%   dplyr::rename(name_norman = .data$Name_Dashboard)   readr::write_csv(gwq_subs, \"gwq_subs.csv\")  DT::datatable(gwq_subs, filter = \"top\", rownames = FALSE)  samples <- gwq_data %>%    dplyr::rename(name_norman = .data$Name_Dashboard) %>%    dplyr::select(name_norman,                  cas_number,                  Messstellennummer,                  Datum,                  CensorCode,                  Messwert,                  Einheit)   samples_by_para_and_station <- gwq_data %>%   dplyr::count(.data$cas_number,                   .data$Messstellennummer,                   .data$CensorCode) %>%   tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%   dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                 nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                 percent_nc = 100*nc/n_total) %>%   dplyr::rename(n_lt = lt,                 n_nc = nc) %>%   dplyr::left_join(norman_s0_in_wasserportal) %>%   dplyr::rename(name_norman = .data$Name_Dashboard) %>%   dplyr::left_join(gwq_master, by = c(Messstellennummer = \"Nummer\")) %>%   dplyr::arrange(dplyr::desc(percent_nc))   # samples_by_category_and_station <- samples_by_para_and_station  %>% #   dplyr::group_by(.data$category, #                   .data$category_name, #                   .data$Messstellennummer) %>% #   dplyr::summarise(n_lt = sum(n_lt), #                    n_nc = sum(n_nc), #                    n_total = sum(n_total)) %>% #   dplyr::mutate(percent_nc = 100*n_nc/n_total) %>% #   dplyr::arrange(dplyr::desc(percent_nc))  gwq_subs_stations_n_abovedetection <- samples_by_para_and_station  %>%   dplyr::filter(n_nc > 0) %>%   dplyr::group_by(.data$cas_number) %>%   dplyr::summarise(n_stations_abovedetection = dplyr::n())  gwq_subs_stations_n_paras_abovedetection <- samples_by_para_and_station  %>%   dplyr::filter(n_nc > 0) %>%   dplyr::group_by(#.data$category,                   #.data$category_name,                   .data$Messstellennummer) %>%   dplyr::summarise(n_paras_abovedetection = dplyr::n()) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  # gwq_subs_stations_n_paras_abovedetection_wide <- gwq_subs_stations_n_paras_abovedetection %>% #   dplyr::ungroup() %>% #   dplyr::select(Messstellennummer, category, n_paras_abovedetection) %>% #   tidyr::pivot_wider(names_from = \"category\", #                      names_prefix = \"cat_\", #                      values_from = \"n_paras_abovedetection\") %>% #   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))   samples_by_para_and_station_n <- samples_by_para_and_station %>%   dplyr::group_by(name_norman,                   cas_number) %>%   dplyr::summarise(n_stations_sampled = dplyr::n(),                    n_stations_total = length(unique(gwq_master$Nummer)),                    n_lt = sum(n_lt),                    n_nc = sum(n_nc),                    n_total = sum(n_total)) %>%   dplyr::left_join(gwq_subs_stations_n_abovedetection) %>%   dplyr::mutate(n_stations_abovedetection = ifelse(is.na(n_stations_abovedetection),                                                    0,                                                    n_stations_abovedetection),                 n_abovedetection = ifelse(is.na(n_nc), 0, n_nc),                 n_belowdetection = ifelse(is.na(n_lt), 0, n_lt),                 percent_samples_abovedetection = 100*n_nc/n_total,                 percent_stations_abovedetection = 100*n_stations_abovedetection/n_stations_total,                 percent_stations_sampled = 100*n_stations_sampled/n_stations_total) %>%   dplyr::select(name_norman,                 cas_number,                 n_stations_abovedetection,                 n_stations_sampled,                 n_stations_total,                 percent_stations_abovedetection,                 percent_stations_sampled,                 n_belowdetection,                 n_abovedetection,                 n_total,                 percent_samples_abovedetection) %>%   dplyr::arrange(dplyr::desc(percent_stations_abovedetection),                  dplyr::desc(percent_samples_abovedetection))      ### Export data to EXCEL gwq_data_list <- list(norman_lists_table = norman_lists_table,                        cas_wasserportal = cas_wasserportal,                       cas_reach = cas_reach,                        ubapmt_missing_on_zenodo = missing_on_zenodo,                       norman_s0_in_wasserportal = norman_s0_in_wasserportal,                       samples = samples,                       samples_by_para = gwq_subs %>%                         dplyr::arrange(dplyr::desc(percent_nc)),                       samples_by_para_and_station = samples_by_para_and_station,                       samples_by_para_and_station_n = samples_by_para_and_station_n)                       #samples_by_stations_para_above = gwq_subs_stations_n_paras_abovedetection_wide)                       #samples_by_category_and_station = samples_by_category_and_station)    openxlsx::write.xlsx(x = gwq_data_list,                      file = \"wasserportal_gwq_norman-list_s0_v1.0.0.xlsx\",                      overwrite = TRUE)"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_norman-lists.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"PROMISCES: Norman Lists","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package install.packages('wasserportal')"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_norman-lists.html","id":"get-norman-lists","dir":"Articles","previous_headings":"","what":"Get Norman Lists","title":"PROMISCES: Norman Lists","text":"","code":"library(wasserportal)  download_file <- function(url,                              tdir = tempdir() ) { filename <- basename(url) t_path <- file.path(tdir, filename) download.file(url, dest= t_path, mode=\"wb\")  t_path }  ### Download S0 | SUSDAT | Merged NORMAN Suspect List: SusDat ### Version: NORMAN-SLE-S0.0.4.1 (2021-01-18) ### DOI: 10.5281/zenodo.5873975  norman_s0_path  <- download_file(\"https://zenodo.org/record/5873975/files/susdat_2022-01-18-104316.csv\") norman_s0 <- readr::read_csv(norman_s0_path) #> Warning: One or more parsing issues, see `problems()` for details #> Rows: 109631 Columns: 68 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (41): Norman_SusDat_ID, Name, Name_Dashboard, Name_ChemSpider, Name_IUPA... #> dbl (27): PubChem_CID, Monoiso_Mass, M+H+, M-H-, Pred_RTI_Positive_ESI, Pred... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  ### Download S36 | UBAPMT | Potential Persistent, Mobile and Toxic (PMT) substances ### Version: NORMAN-SLE-S36.0.2.1 (2020-12-15) ### DOI: \"10.5281/zenodo.4323239\"  norman_s36_ubapmt_path  <- download_file(\"https://zenodo.org/record/4323239/files/S36_UBAPMT_Dec2020.csv\") norman_s36_ubapmt <- readr::read_csv(norman_s36_ubapmt_path) #> Rows: 258 Columns: 35 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (33): CAS_Number, Name, List, ProtectedCAS, REACH_Emission_Likelihood, P... #> dbl  (2): Largest_Fragment_mass, PubChemCID_largestFragment #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.   ### Download S90 | ZEROPMBOX1 | ZeroPM Box 1 Substances ### Version: Version NORMAN-SLE-S90.0.1.0 (2021-01-15) ### DOI: 10.5281/zenodo.5854252  norman_s90_zeropm_path  <- download_file(\"https://zenodo.org/record/5854252/files/ZeroPM_Box1.csv\") norman_s90_zeropm <- readr::read_csv(norman_s90_zeropm_path) #> New names: #> Rows: 38 Columns: 13 #> ── Column specification #> ──────────────────────────────────────────────────────── Delimiter: \",\" chr #> (11): CAS, Name, DTXSID, InChIKey, SMILES, InChI, MolecularFormula, IUPA... dbl #> (2): PubChem_CID, MonoisotopicMass #> ℹ Use `spec()` to retrieve the full column specification for this data. ℹ #> Specify the column types or set `show_col_types = FALSE` to quiet this message. #> • `Synonym` -> `Synonym...11` #> • `Synonym` -> `Synonym...12` #> • `Synonym` -> `Synonym...13`   cas_wasserportal <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\",                                                   encoding = \"UTF-8\") cas_reach <- wasserportal::readPackageFile(file = \"cas_reach.csv\")  ubapmt_publication <- cas_reach %>%   dplyr::filter(.data$cas_number %in% unique(cas_wasserportal$cas_number))   ubapmt_zenodo <- norman_s36_ubapmt %>%   dplyr::filter(.data$CAS_Number %in% unique(cas_wasserportal$cas_number)) %>%   dplyr::rename(cas_number = .data$CAS_Number)  missing_on_zenodo <- cas_reach %>%   dplyr::mutate(zenodo = dplyr::if_else(.data$cas_number %in% unique(ubapmt_zenodo$cas_number),                                         \"yes\",                                         NA_character_),                 publication = dplyr::if_else(.data$cas_number %in% unique(ubapmt_publication$cas_number),                                         \"yes\",                                         NA_character_)) %>%   dplyr::filter(publication == \"yes\" | zenodo == \"yes\") %>%   dplyr::relocate(tidyselect::all_of(c(\"publication\", \"zenodo\")), .before = .data$emission_likelihood)   DT::datatable(missing_on_zenodo, filter = \"top\", rownames = FALSE)"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_norman-lists.html","id":"get-gw-quality-from-wasserportal","dir":"Articles","previous_headings":"","what":"Get GW Quality from Wasserportal","title":"PROMISCES: Norman Lists","text":"","code":"# Load R package  ### For details see: ### https://kwb-r.github.io/wasserportal/articles/groundwater.html ### JSON files (see below) are build every day automatically at 5a.m. with ### continious integration, for build status, see here: ### https://github.com/KWB-R/wasserportal/actions/workflows/pkgdown.yaml  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%   dplyr::filter(.data$Parameter %in% cas_wasserportal$Parameter) %>%   dplyr::inner_join(cas_wasserportal, by = \"Parameter\") %>%   dplyr::inner_join(norman_s0_in_wasserportal, by = \"cas_number\") %>%    dplyr::filter(.data$logKow_EPISuite <= 4.5,                 !is.na(.data$`LC50_48_hr_ug/L`)) %>%    dplyr::mutate(Messstellennummer = as.character(Messstellennummer), ## CensorCode: either \"below\" (less than) for concentration below detection limit ## (value is detection limit) or \"nc\" (not censored) for concentration above ## detection limit                 CensorCode = dplyr::case_when(Messwert <= 0 ~ \"lt\",                                               TRUE ~ \"nc\"),                 Messwert = dplyr::case_when(Messwert < 0 ~ abs(Messwert), ### Only two decimal numbers are exported by Wasserportal, but some sustances ### have lower detection limit, e.g. 0.002 which results in -0.00 export, thus ### the dummy detection limit 0.00999 was introduced (until fixed by Senate: ### Christoph will sent a email to Matthias Schröder)                                             Messwert == 0 ~ 0.009999,                                             TRUE ~ Messwert)) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  gwq_subs <- gwq_data %>%   dplyr::count(.data$cas_number, .data$CensorCode) %>%   tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%   dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                 nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                 percent_nc = 100*nc/n_total) %>%   dplyr::rename(n_lt = lt,                 n_nc = nc) %>%   dplyr::left_join(norman_s0_in_wasserportal) %>%   dplyr::rename(name_norman = .data$Name_Dashboard) #> Joining, by = \"cas_number\"   readr::write_csv(gwq_subs, \"gwq_subs.csv\")  DT::datatable(gwq_subs, filter = \"top\", rownames = FALSE)"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_norman-lists.html","id":"norman-substances-in-wasserportal","dir":"Articles","previous_headings":"","what":"Norman Substances in Wasserportal","title":"PROMISCES: Norman Lists","text":"Filter criteria: - log Kow (column logKow_EPISuite <= 4.5) - toxicity value (column LC50_48_hr_ug/ NA)","code":"gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::filter(.data$percent_samples_abovedetection > 0) %>%    dplyr::left_join(norman_s0_in_wasserportal) %>%   dplyr::arrange(.data$`LC50_48_hr_ug/L`) %>%    dplyr::mutate(label = sprintf(\"%s (%s, LC50_48_hr_ug/L: %.1f, logKow_EPISuite: %.1f : \",                                  .data$name_norman,                                  .data$cas_number,                                 .data$`LC50_48_hr_ug/L`,                                 .data$logKow_EPISuite                                 )) #> Joining, by = \"cas_number\"  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$percent_samples_abovedetection,                                 y = forcats::fct_reorder(.data$label, .data$percent_samples_abovedetection, .desc = TRUE),                                label = sprintf(\"%2.2f %% (n_samples = %d, n_stations = %d)\", .data$percent_samples_abovedetection,.data$n_total, .data$n_stations_sampled),                                fill = .data$logKow_EPISuite)) +                                #ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 1.8, hjust = -0.01) +   ggplot2::xlim(c(0,120)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(#subtitle = sprintf(\"%d / %d substances (>= 1 value above detection limit)\",                 #                sum(gwq_subs_plot$n_abovedetection > 0),                 #                   nrow(gwq_subs_plot)),                                          y = \"\",                  x = \"Percent of Samples above Detection Limit (%)\")  g1 ggplot2::ggsave(filename = \"wasserportal_norman-s0-substances_only-above-detection-limit.jpeg\",                    plot = g1,                   width = 40,                    height = 20,                   units = \"cm\")"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_reach-uba.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"PROMISCES: Reach (UBA)","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package install.packages('wasserportal')"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_reach-uba.html","id":"get-gw-quality-from-wasserportal","dir":"Articles","previous_headings":"","what":"Get GW Quality from Wasserportal","title":"PROMISCES: Reach (UBA)","text":"","code":"# Load R package library(wasserportal)  categories <- wasserportal::readPackageFile(file = \"categories.csv\")   cas_reach <- wasserportal::readPackageFile(file = \"cas_reach.csv\") %>%    dplyr::left_join(categories) #> Joining, by = \"category\"  cas_wasserportal <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\",                                                   encoding = \"UTF-8\") %>%     dplyr::inner_join(cas_reach, by = \"cas_number\")   ### Remove duplicated Wasserportal substances (same CAS number but different, names!) cas_wasserportal_clean <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\") %>%     dplyr::count(cas_number) %>%   dplyr::select(-n) %>%    dplyr::filter(!is.na(cas_number)) %>%    dplyr::inner_join(cas_reach, by = \"cas_number\")    ### For details see: ### https://kwb-r.github.io/wasserportal/articles/groundwater.html ### JSON files (see below) are build every day automatically at 5a.m. with ### continious integration, for build status, see here: ### https://github.com/KWB-R/wasserportal/actions/workflows/pkgdown.yaml  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%   #dplyr::filter(Parameter %in% cas_wasserportal$Parameter) %>%    dplyr::inner_join(cas_wasserportal, by = \"Parameter\") %>%   dplyr::mutate(Messstellennummer = as.character(Messstellennummer), ## CensorCode: either \"below\" (less than) for concentration below detection limit  ## (value is detection limit) or \"nc\" (not censored) for concentration above  ## detection limit                 CensorCode = dplyr::case_when(Messwert <= 0 ~ \"lt\",                                               TRUE ~ \"nc\"),                 Messwert = dplyr::case_when(Messwert < 0 ~ abs(Messwert), ### Only two decimal numbers are exported by Wasserportal, but some sustances  ### have lower detection limit, e.g. 0.002 which results in -0.00 export, thus  ### the dummy detection limit 0.00999 was introduced (until fixed by Senate:  ### Christoph will sent a email to Matthias Schröder)                                             Messwert == 0 ~ 0.009999,                                              TRUE ~ Messwert)) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  gwq_subs <- gwq_data %>%     dplyr::count(.data$cas_number, .data$CensorCode) %>%    tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%    dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                  nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                  percent_nc = 100*nc/n_total) %>%    dplyr::rename(n_lt = lt,                  n_nc = nc) %>%    dplyr::left_join(cas_reach[, c(\"category\", \"category_name\", \"name\", \"cas_number\")]) %>%   dplyr::rename(name_uba = name) %>%    dplyr::select(category, category_name, name_uba, cas_number,n_lt, n_nc, n_total, percent_nc) #> Joining, by = \"cas_number\"   readr::write_csv(gwq_subs, \"gwq_subs.csv\")  DT::datatable(gwq_subs, filter = \"top\", rownames = FALSE)"},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_reach-uba.html","id":"total","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"Total","title":"PROMISCES: Reach (UBA)","text":"","code":"g <- cas_reach %>%   dplyr::mutate(source = sprintf(\"UBA (n = %d)\", nrow(cas_reach))) %>%    dplyr::bind_rows(cas_wasserportal_clean %>%                     dplyr::mutate(source = sprintf(\"Wasserportal (n = %d)\",                                                    nrow(cas_wasserportal_clean)))) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = forcats::as_factor(.data$category),                                           fill = .data$source,                                          col = .data$source)) +    ggplot2::geom_histogram(stat = \"count\", alpha = 0.5) +   ggplot2::geom_text(stat=\"count\", ggplot2::aes(label=..count..), vjust=-0.5, position=\"stack\") +   ggplot2::scale_x_discrete() +   ggplot2::theme_bw() +   ggplot2::theme(legend.position=\"top\") +   ggplot2::labs(y = \"Number of Substances\", x = \"Category\") #> Warning: Ignoring unknown parameters: binwidth, bins, pad    g ggplot2::ggsave(filename = \"wasserportal_number-of-reach-substances.jpeg\",                    plot = g,                   width = 14,                    height = 11,                   units = \"cm\")    #plotly::ggplotly(g)"},{"path":"https://kwb-r.github.io/wasserportal/articles/promisces_reach-uba.html","id":"by-station","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"By Station","title":"PROMISCES: Reach (UBA)","text":"","code":"by_stations <- samples_by_para_and_station_n %>%    dplyr::select(.data$name_uba, .data$n_stations_sampled) #> Adding missing grouping variables: `category`, `category_name`  wasserportal_substances <- samples_by_para_and_station_n %>%    dplyr::arrange(.data$category,                   dplyr::desc(.data$n_total),                   dplyr::desc(.data$n_stations_sampled),                   .data$name_uba) %>%    dplyr::select(.data$category,                  .data$name_uba,                 .data$cas_number,                  .data$n_total,                 .data$n_stations_sampled) #> Adding missing grouping variables: `category_name`   DT::datatable(wasserportal_substances, filter = \"top\", rownames = FALSE) wasserportal_substances_plot <- wasserportal_substances %>%   dplyr::mutate(label = sprintf(\"%s (%s, stations: %d)\",                                  .data$name_uba,                                  .data$cas_number,                                  .data$n_stations_sampled),                 category = forcats::as_factor(.data$category))  wasserportal_substances_plot$label <- factor(wasserportal_substances_plot$label,                                               levels = wasserportal_substances_plot$label) wasserportal_substances_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$n_total,                                 y = .data$label,                                 label = .data$n_total,                                fill = .data$category)) +   ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 2, nudge_x = -1) +   ggplot2::theme_bw() +   ggplot2::labs(subtitle = sprintf(\"%d Wasserportal substances (listed in UBA table)\",                                 nrow(wasserportal_substances_plot)),                 y = \"\",                  x = \"Number of Samples\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::arrange(.data$category) %>%    dplyr::mutate(label = sprintf(\"cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$percent_samples_abovedetection,                                 y = forcats::fct_reorder(.data$label, .data$percent_samples_abovedetection, .desc = TRUE),                                label = sprintf(\"%2.2f %% (n_samples = %d, n_stations = %d)\", .data$percent_samples_abovedetection,.data$n_total, .data$n_stations_sampled),                                fill = as.factor(.data$category))) +                                ggplot2::scale_fill_brewer(palette=\"RdYlGn\", name = \"Category\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 1.8, hjust = -0.01) +   ggplot2::xlim(c(0,40)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = sprintf(\"%d / %d substances (>= 1 value above detection limit)\",                                 sum(gwq_subs_plot$n_abovedetection > 0),                                    nrow(gwq_subs_plot)),                                          y = \"\",                  x = \"Percent of Samples above Detection Limit (%)\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") n_cat <- samples_by_category_and_station %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_samples_abovedetection = sum(n_nc),                    n_samples_total = sum(n_total),                    n_samples_percent_abovedetection = 100*sum(n_nc)/sum(n_total)) %>%    dplyr::arrange(dplyr::desc(.data$n_samples_abovedetection))  g1 <- samples_by_category_and_station %>%    dplyr::left_join(n_cat) %>%    dplyr::filter(n_nc > 0)  %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_nc,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),                                label = .data$n_nc,                                fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::geom_text(mapping = ggplot2::aes(     x = .data$n_samples_abovedetection,     y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),     label = sprintf(\"%3.1f %% (n_samples = %d)\", .data$n_samples_percent_abovedetection, .data$n_samples_total)),                      inherit.aes = FALSE,                      size = 1.8,                       position = ggplot2::position_nudge(x = 20),     fontface = \"bold\") +   ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Samples Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") n_cat <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_paras_abovedetection_total = sum(n_paras_abovedetection)) %>%    dplyr::arrange(dplyr::desc(.data$n_paras_abovedetection_total))  g1 <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::left_join(n_cat) %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_paras_abovedetection,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_paras_abovedetection_total, .desc = TRUE),                              label = .data$n_paras_abovedetection,                              fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +    #ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Parameters Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_paras-by-station_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::mutate(n_stations_belowdetection = .data$n_stations_sampled - .data$n_stations_abovedetection,                  n_stations_notsampled = .data$n_stations_total - .data$n_stations_sampled) %>%    dplyr::select(\"category\",                 \"category_name\",                 \"name_uba\",                 \"cas_number\",                 \"n_stations_abovedetection\",                  \"n_stations_belowdetection\",                 \"n_stations_notsampled\") %>%    tidyr::pivot_longer(cols = tidyselect::starts_with(\"n_stations\"),                       names_to = \"station_type\",                       values_to = \"station_value\") %>%    dplyr::filter(.data$station_value > 0) %>%    dplyr::mutate(station_type = stringr::str_remove(.data$station_type,                                                     \"n_stations_\")) %>%   dplyr::mutate(station_type = kwb.utils::multiSubstitute(.data$station_type,                                                           list(\"abovedetection\" = \"above detection\",                                                                \"belowdetection\" = \"below detection\",                                                                 \"notsampled\" = \"not sampled\"))) %>%    dplyr::mutate(label = sprintf(\"Cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number),                 category = forcats::as_factor(.data$category))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$station_value,                                 y = .data$label,                                label = .data$station_value,                                fill = forcats::fct_rev(.data$station_type))) +   ggplot2::scale_fill_manual(values = c(\"lightgrey\", \"darkgreen\", \"red\")) +    ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col(alpha = 0.75) +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(title = \"Groundwater Quality by Station\",                  fill = \"\",                  caption = \"above detection: number of stations with at least 1 sample above detection limit\\nbelow detection: number of station with all samples below detection limit\\nnot sampled: number of stations not sampled\",                 subtitle = sprintf(\"for %d GW quality stations\",                                    length(unique(gwq_master$Nummer))),                 y = \"\",                  x = \"Number of Monitoring Stations\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_by-monitoring-station.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") stations_abovedetection <- samples_by_para_and_station %>%    dplyr::filter(.data$n_nc > 0) %>%    dplyr::select(cas_number, Messstellennummer, n_nc, n_lt) %>%    dplyr::arrange(.data$n_nc)  g1_data <- gwq_data %>%    dplyr::right_join(y = stations_abovedetection,                      by = c(\"cas_number\", \"Messstellennummer\")) %>%    dplyr::mutate(Datum = as.Date(Datum),                  CensorCode = kwb.utils::multiSubstitute(.data$CensorCode,                                                           list(\"nc\" = \"above detection\",                                                                 \"lt\" = \"below detection\")),                  label = sprintf(\"%s (%s): %s (n_above = %d, n_below = %d)\",                                  .data$name,                                  .data$cas_number,                                 .data$Messstellennummer,                                 .data$n_nc,                                 .data$n_lt))   labels <- unique(g1_data$label)  plot_timeseries <- function(sel_label) {   g1_data %>%    dplyr::filter(.data$label == sel_label) %>%    dplyr::arrange(.data$n_nc, .data$label, .data$Datum) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = .data$Datum,                                           y = .data$Messwert,                                          col = .data$CensorCode                                          )) +   ggplot2::scale_color_manual(values = c(\"red\", \"darkgreen\")) +   ggplot2::geom_point() +   ggplot2::theme_bw() +   ggplot2::labs(title = sel_label) }  g_plots <- lapply(labels, function(sel_label) {plot_timeseries(sel_label)})  pdff <- \"wasserportal_reach-substances_timeseries.pdf\" mp <- gridExtra::marrangeGrob(g_plots, nrow=1, ncol=1) ggplot2::ggsave(pdff,                 plot = mp,                  width = 30,                 height = 20,                  units = \"cm\") n_samples_all <- samples %>%    dplyr::count(.data$name_uba) %>%    dplyr::rename(n_all = \"n\")   n_samples_above <- samples %>%    dplyr::filter(CensorCode == \"nc\") %>%    dplyr::count(.data$name_uba) %>%    dplyr::rename(n_above = \"n\")  n_samples <- dplyr::left_join(n_samples_all, n_samples_above) %>%    dplyr::mutate(label = as.factor(sprintf(\"%s (n_above = %d, n_samples = %d)\",                                  .data$name_uba,                                 .data$n_above,                                 .data$n_all))   ) #> Joining, by = \"name_uba\"  substances_above <- samples %>%  dplyr::filter(CensorCode == \"nc\") %>%  dplyr::pull(.data$name_uba) %>%  unique()  detection_limits <- samples %>%   dplyr::filter(CensorCode == \"lt\",                 name_uba %in% substances_above) %>%    dplyr::mutate(Messwert = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = .data$Messwert * 1000,                                           false = .data$Messwert),                 Einheit = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = \"\\u00B5g/l\",                                           false = .data$Einheit),                 year = as.integer(format(as.Date(.data$Datum), format = \"%Y\"))) %>%    dplyr::count(.data$name_uba, .data$year, .data$Messwert) %>%    dplyr::left_join(n_samples)  #> Joining, by = \"name_uba\"   plot_detection_limits <- function(sel_sub) {   g1 <- detection_limits %>%    dplyr::filter(name_uba == sel_sub) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = .data$year,                                          y = .data$n,                                          col = forcats::fct_rev(as.factor(.data$Messwert)))) +   ggplot2::scale_color_brewer(palette=\"RdYlGn\") +   ggplot2::geom_point() +    ggplot2::labs(title = sprintf(\"%s\", sel_sub),                 x = \"Year\",                  y = \"Number of Samples below Detection Limit\",                 col = \"Detection Limit (\\u00B5g/l)\") +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") g1 }  g_plots <- lapply(substances_above, function(sel_sub) {plot_detection_limits(sel_sub)})  pdff <- \"wasserportal_reach-substances_detection-limits.pdf\" mp <- gridExtra::marrangeGrob(g_plots, nrow=1, ncol=1) ggplot2::ggsave(pdff,                 plot = mp,                  width = 20,                 height = 15,                  units = \"cm\")   g1 <- samples %>%   dplyr::left_join(n_samples) %>%    dplyr::filter(CensorCode == \"nc\") %>%    dplyr::mutate(Messwert = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = .data$Messwert * 1000,                                           false = .data$Messwert),                 Einheit = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = \"\\u00B5g/l\",                                           false = .data$Einheit),                 category = as.factor(category)) %>%    ggplot2::ggplot(mapping = ggplot2::aes(y = forcats::fct_reorder(.data$label,                                                                    .data$n_above,                                                                    .desc = TRUE),                                          x = .data$Messwert,                                          fill = .data$category)) +   ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +     ggplot2::scale_y_discrete(limits = rev) +   ggplot2::scale_x_log10() +   ggplot2::geom_boxplot() +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Substance\",                  x = \"Concentration (\\u00B5g / l)\") +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") #> Joining, by = \"name_uba\"  g1 pdff <- \"wasserportal_reach-substances_boxplot.pdf\" ggplot2::ggsave(pdff,                 plot = g1,                  width = 25,                 height = 15,                  units = \"cm\")"},{"path":"https://kwb-r.github.io/wasserportal/articles/reach.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"Reach","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package install.packages('wasserportal')"},{"path":"https://kwb-r.github.io/wasserportal/articles/reach.html","id":"get-gw-quality-from-wasserportal","dir":"Articles","previous_headings":"","what":"Get GW Quality from Wasserportal","title":"Reach","text":"","code":"# Load R package library(wasserportal)  categories <- wasserportal::readPackageFile(file = \"categories.csv\")   cas_reach <- wasserportal::readPackageFile(file = \"cas_reach.csv\") %>%    dplyr::left_join(categories) #> Joining, by = \"category\"  cas_wasserportal <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\") %>%     dplyr::inner_join(cas_reach, by = \"cas_number\")   ### Remove duplicated Wasserportal substances (same CAS number but different, names!) cas_wasserportal_clean <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\") %>%     dplyr::count(cas_number) %>%   dplyr::select(-n) %>%    dplyr::filter(!is.na(cas_number)) %>%    dplyr::inner_join(cas_reach, by = \"cas_number\")    ### For details see: ### https://kwb-r.github.io/wasserportal/articles/groundwater.html ### JSON files (see below) are build every day automatically at 5a.m. with ### continious integration, for build status, see here: ### https://github.com/KWB-R/wasserportal/actions/workflows/pkgdown.yaml  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%   #dplyr::filter(Parameter %in% cas_wasserportal$Parameter) %>%    dplyr::inner_join(cas_wasserportal, by = \"Parameter\") %>%   dplyr::mutate(Messstellennummer = as.character(Messstellennummer), ## CensorCode: either \"below\" (less than) for concentration below detection limit  ## (value is detection limit) or \"nc\" (not censored) for concentration above  ## detection limit                 CensorCode = dplyr::case_when(Messwert <= 0 ~ \"lt\",                                               TRUE ~ \"nc\"),                 Messwert = dplyr::case_when(Messwert < 0 ~ abs(Messwert), ### Only two decimal numbers are exported by Wasserportal, but some sustances  ### have lower detection limit, e.g. 0.002 which results in -0.00 export, thus  ### the dummy detection limit 0.00999 was introduced (until fixed by Senate:  ### Christoph will sent a email to Matthias Schröder)                                             Messwert == 0 ~ 0.009999,                                              TRUE ~ Messwert)) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  gwq_subs <- gwq_data %>%     dplyr::count(.data$cas_number, .data$CensorCode) %>%    tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%    dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                  nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                  percent_nc = 100*nc/n_total) %>%    dplyr::rename(n_lt = lt,                  n_nc = nc) %>%    dplyr::left_join(cas_reach[, c(\"category\", \"category_name\", \"name\", \"cas_number\")]) %>%   dplyr::rename(name_uba = name) %>%    dplyr::select(category, category_name, name_uba, cas_number,n_lt, n_nc, n_total, percent_nc) #> Joining, by = \"cas_number\"   readr::write_csv(gwq_subs, \"gwq_subs.csv\")  DT::datatable(gwq_subs, filter = \"top\", rownames = FALSE)"},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/reach.html","id":"total","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"Total","title":"Reach","text":"","code":"g <- cas_reach %>%   dplyr::mutate(source = sprintf(\"UBA (n = %d)\", nrow(cas_reach))) %>%    dplyr::bind_rows(cas_wasserportal_clean %>%                     dplyr::mutate(source = sprintf(\"Wasserportal (n = %d)\",                                                    nrow(cas_wasserportal_clean)))) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = forcats::as_factor(.data$category),                                           fill = .data$source,                                          col = .data$source)) +    ggplot2::geom_histogram(stat = \"count\", alpha = 0.5) +   ggplot2::geom_text(stat=\"count\", ggplot2::aes(label=..count..), vjust=-0.5, position=\"stack\") +   ggplot2::scale_x_discrete() +   ggplot2::theme_bw() +   ggplot2::theme(legend.position=\"top\") +   ggplot2::labs(y = \"Number of Substances\", x = \"Category\") #> Warning: Ignoring unknown parameters: binwidth, bins, pad    g ggplot2::ggsave(filename = \"wasserportal_number-of-reach-substances.jpeg\",                    plot = g,                   width = 14,                    height = 11,                   units = \"cm\")    #plotly::ggplotly(g)"},{"path":"https://kwb-r.github.io/wasserportal/articles/reach.html","id":"by-station","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"By Station","title":"Reach","text":"","code":"by_stations <- samples_by_para_and_station_n %>%    dplyr::select(.data$name_uba, .data$n_stations_sampled) #> Adding missing grouping variables: `category`, `category_name`  wasserportal_substances <- samples_by_para_and_station_n %>%    dplyr::arrange(.data$category,                   dplyr::desc(.data$n_total),                   dplyr::desc(.data$n_stations_sampled),                   .data$name_uba) %>%    dplyr::select(.data$category,                  .data$name_uba,                 .data$cas_number,                  .data$n_total,                 .data$n_stations_sampled) #> Adding missing grouping variables: `category_name`   DT::datatable(wasserportal_substances, filter = \"top\", rownames = FALSE) wasserportal_substances_plot <- wasserportal_substances %>%   dplyr::mutate(label = sprintf(\"%s (%s, stations: %d)\",                                  .data$name_uba,                                  .data$cas_number,                                  .data$n_stations_sampled),                 category = forcats::as_factor(.data$category))  wasserportal_substances_plot$label <- factor(wasserportal_substances_plot$label,                                               levels = wasserportal_substances_plot$label) wasserportal_substances_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$n_total,                                 y = .data$label,                                 label = .data$n_total,                                fill = .data$category)) +   ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 2, nudge_x = -1) +   ggplot2::theme_bw() +   ggplot2::labs(subtitle = sprintf(\"%d Wasserportal substances (listed in UBA table)\",                                 nrow(wasserportal_substances_plot)),                 y = \"\",                  x = \"Number of Samples\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::mutate(label = sprintf(\"Cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number),                 category = forcats::as_factor(.data$category))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$percent_samples_abovedetection,                                 y = forcats::fct_reorder(.data$label, .data$percent_samples_abovedetection, .desc = TRUE),                                label = sprintf(\"%2.2f %% (n_samples = %d, n_stations = %d)\", .data$percent_samples_abovedetection,.data$n_total, .data$n_stations_sampled),                                fill = .data$category)) +                             ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 1.8, hjust = -0.01) +   ggplot2::xlim(c(0,40)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = sprintf(\"%d / %d substances (>= 1 value above detection limit)\",                                 sum(gwq_subs_plot$n_abovedetection > 0),                                    nrow(gwq_subs_plot)),                                          y = \"\",                  x = \"Percent of Samples above Detection Limit (%)\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") n_cat <- samples_by_category_and_station %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_samples_abovedetection = sum(n_nc),                    n_samples_total = sum(n_total),                    n_samples_percent_abovedetection = 100*sum(n_nc)/sum(n_total)) %>%    dplyr::arrange(dplyr::desc(.data$n_samples_abovedetection))  g1 <- samples_by_category_and_station %>%    dplyr::left_join(n_cat) %>%    dplyr::filter(n_nc > 0)  %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_nc,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),                                label = .data$n_nc,                                fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::geom_text(mapping = ggplot2::aes(     x = .data$n_samples_abovedetection,     y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),     label = sprintf(\"%3.1f %% (n_samples = %d)\", .data$n_samples_percent_abovedetection, .data$n_samples_total)),                      inherit.aes = FALSE,                      size = 1.8,                       position = ggplot2::position_nudge(x = 20),     fontface = \"bold\") +   ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Samples Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") n_cat <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_paras_abovedetection_total = sum(n_paras_abovedetection)) %>%    dplyr::arrange(dplyr::desc(.data$n_paras_abovedetection_total))  g1 <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::left_join(n_cat) %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_paras_abovedetection,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_paras_abovedetection_total, .desc = TRUE),                              label = .data$n_paras_abovedetection,                              fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +    #ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Parameters Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_paras-by-station_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::mutate(n_stations_belowdetection = .data$n_stations_sampled - .data$n_stations_abovedetection,                  n_stations_notsampled = .data$n_stations_total - .data$n_stations_sampled) %>%    dplyr::select(\"category\",                 \"category_name\",                 \"name_uba\",                 \"cas_number\",                 \"n_stations_abovedetection\",                  \"n_stations_belowdetection\",                 \"n_stations_notsampled\") %>%    tidyr::pivot_longer(cols = tidyselect::starts_with(\"n_stations\"),                       names_to = \"station_type\",                       values_to = \"station_value\") %>%    dplyr::filter(.data$station_value > 0) %>%    dplyr::mutate(station_type = stringr::str_remove(.data$station_type,                                                     \"n_stations_\")) %>%   dplyr::mutate(station_type = kwb.utils::multiSubstitute(.data$station_type,                                                           list(\"abovedetection\" = \"above detection\",                                                                \"belowdetection\" = \"below detection\",                                                                 \"notsampled\" = \"not sampled\"))) %>%    dplyr::mutate(label = sprintf(\"Cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number),                 category = forcats::as_factor(.data$category))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$station_value,                                 y = .data$label,                                label = .data$station_value,                                fill = forcats::fct_rev(.data$station_type))) +   ggplot2::scale_fill_manual(values = c(\"lightgrey\", \"darkgreen\", \"red\")) +    ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col(alpha = 0.75) +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(title = \"Groundwater Quality by Station\",                  fill = \"\",                  caption = \"above detection: number of stations with at least 1 sample above detection limit\\nbelow detection: number of station with all samples below detection limit\\nnot sampled: number of stations not sampled\",                 subtitle = sprintf(\"for %d GW quality stations\",                                    length(unique(gwq_master$Nummer))),                 y = \"\",                  x = \"Number of Monitoring Stations\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_by-monitoring-station.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") stations_abovedetection <- samples_by_para_and_station %>%    dplyr::filter(.data$n_nc > 0) %>%    dplyr::select(cas_number, Messstellennummer, n_nc, n_lt) %>%    dplyr::arrange(.data$n_nc)  g1_data <- gwq_data %>%    dplyr::right_join(y = stations_abovedetection,                      by = c(\"cas_number\", \"Messstellennummer\")) %>%    dplyr::mutate(Datum = as.Date(Datum),                  CensorCode = kwb.utils::multiSubstitute(.data$CensorCode,                                                           list(\"nc\" = \"above detection\",                                                                 \"lt\" = \"below detection\")),                  label = sprintf(\"%s (%s): %s (n_above = %d, n_below = %d)\",                                  .data$name,                                  .data$cas_number,                                 .data$Messstellennummer,                                 .data$n_nc,                                 .data$n_lt))   labels <- unique(g1_data$label)  plot_timeseries <- function(sel_label) {   g1_data %>%    dplyr::filter(.data$label == sel_label) %>%    dplyr::arrange(.data$n_nc, .data$label, .data$Datum) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = .data$Datum,                                           y = .data$Messwert,                                          col = .data$CensorCode                                          )) +   ggplot2::scale_color_manual(values = c(\"red\", \"darkgreen\")) +   ggplot2::geom_point() +   ggplot2::theme_bw() +   ggplot2::labs(title = sel_label) }  g_plots <- lapply(labels, function(sel_label) {plot_timeseries(sel_label)})  pdff <- \"wasserportal_reach-substances_timeseries.pdf\" mp <- gridExtra::marrangeGrob(g_plots, nrow=1, ncol=1) ggplot2::ggsave(pdff,                 plot = mp,                  width = 30,                 height = 20,                  units = \"cm\") n_samples <- samples %>%    dplyr::count(.data$name_uba)  g1 <- samples %>%   dplyr::left_join(n_samples) %>%    dplyr::filter(CensorCode == \"nc\") %>%    dplyr::mutate(label = sprintf(\"%s (n=%d)\",                                  .data$name_uba,                                  .data$n),                 Messwert = dplyr::if_else(.data$Einheit == \"\\u00B5g/l\",                                           true = .data$Messwert / 1000,                                           false = .data$Messwert),                 Einheit = dplyr::if_else(.data$Einheit == \"\\u00B5g/l\",                                           true = \"mg/l\",                                           false = .data$Einheit),                 category = as.factor(category)) %>%    ggplot2::ggplot(mapping = ggplot2::aes_string(y = \"label\",                                                  x = \"Messwert\",                                                 fill = \"category\" )) +   ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +     ggplot2::scale_x_log10() +   ggplot2::geom_boxplot() +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Substance\",                  x = \"Concentration (mg/l)\") +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") #> Joining, by = \"name_uba\"  g1 pdff <- \"wasserportal_reach-substances_boxplot.pdf\" ggplot2::ggsave(pdff,                 plot = g1,                  width = 20,                 height = 15,                  units = \"cm\")"},{"path":"https://kwb-r.github.io/wasserportal/articles/reach_uba.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"Reach (UBA)","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package install.packages('wasserportal')"},{"path":"https://kwb-r.github.io/wasserportal/articles/reach_uba.html","id":"get-gw-quality-from-wasserportal","dir":"Articles","previous_headings":"","what":"Get GW Quality from Wasserportal","title":"Reach (UBA)","text":"","code":"# Load R package library(wasserportal)  categories <- wasserportal::readPackageFile(file = \"categories.csv\")   cas_reach <- wasserportal::readPackageFile(file = \"cas_reach.csv\") %>%    dplyr::left_join(categories) #> Joining, by = \"category\"  cas_wasserportal <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\",                                                   encoding = \"UTF-8\") %>%     dplyr::inner_join(cas_reach, by = \"cas_number\")   ### Remove duplicated Wasserportal substances (same CAS number but different, names!) cas_wasserportal_clean <- wasserportal::readPackageFile(file = \"cas_wasserportal.csv\") %>%     dplyr::count(cas_number) %>%   dplyr::select(-n) %>%    dplyr::filter(!is.na(cas_number)) %>%    dplyr::inner_join(cas_reach, by = \"cas_number\")    ### For details see: ### https://kwb-r.github.io/wasserportal/articles/groundwater.html ### JSON files (see below) are build every day automatically at 5a.m. with ### continious integration, for build status, see here: ### https://github.com/KWB-R/wasserportal/actions/workflows/pkgdown.yaml  ### GW quality (all available parameters!) gwq_master <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_master.json\") gwq_data <- jsonlite::fromJSON(\"https://kwb-r.github.io/wasserportal/stations_gwq_data.json\") %>%   #dplyr::filter(Parameter %in% cas_wasserportal$Parameter) %>%    dplyr::inner_join(cas_wasserportal, by = \"Parameter\") %>%   dplyr::mutate(Messstellennummer = as.character(Messstellennummer), ## CensorCode: either \"below\" (less than) for concentration below detection limit  ## (value is detection limit) or \"nc\" (not censored) for concentration above  ## detection limit                 CensorCode = dplyr::case_when(Messwert <= 0 ~ \"lt\",                                               TRUE ~ \"nc\"),                 Messwert = dplyr::case_when(Messwert < 0 ~ abs(Messwert), ### Only two decimal numbers are exported by Wasserportal, but some sustances  ### have lower detection limit, e.g. 0.002 which results in -0.00 export, thus  ### the dummy detection limit 0.00999 was introduced (until fixed by Senate:  ### Christoph will sent a email to Matthias Schröder)                                             Messwert == 0 ~ 0.009999,                                              TRUE ~ Messwert)) %>%   dplyr::left_join(gwq_master, by = c(\"Messstellennummer\" = \"Nummer\"))  gwq_subs <- gwq_data %>%     dplyr::count(.data$cas_number, .data$CensorCode) %>%    tidyr::pivot_wider(names_from = CensorCode, values_from = n) %>%    dplyr::mutate(lt = ifelse(is.na(lt), 0, lt),                  nc = ifelse(is.na(nc), 0, nc),                 n_total = lt + nc,                  percent_nc = 100*nc/n_total) %>%    dplyr::rename(n_lt = lt,                  n_nc = nc) %>%    dplyr::left_join(cas_reach[, c(\"category\", \"category_name\", \"name\", \"cas_number\")]) %>%   dplyr::rename(name_uba = name) %>%    dplyr::select(category, category_name, name_uba, cas_number,n_lt, n_nc, n_total, percent_nc) #> Joining, by = \"cas_number\"   readr::write_csv(gwq_subs, \"gwq_subs.csv\")  DT::datatable(gwq_subs, filter = \"top\", rownames = FALSE)"},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/reach_uba.html","id":"total","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"Total","title":"Reach (UBA)","text":"","code":"g <- cas_reach %>%   dplyr::mutate(source = sprintf(\"UBA (n = %d)\", nrow(cas_reach))) %>%    dplyr::bind_rows(cas_wasserportal_clean %>%                     dplyr::mutate(source = sprintf(\"Wasserportal (n = %d)\",                                                    nrow(cas_wasserportal_clean)))) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = forcats::as_factor(.data$category),                                           fill = .data$source,                                          col = .data$source)) +    ggplot2::geom_histogram(stat = \"count\", alpha = 0.5) +   ggplot2::geom_text(stat=\"count\", ggplot2::aes(label=..count..), vjust=-0.5, position=\"stack\") +   ggplot2::scale_x_discrete() +   ggplot2::theme_bw() +   ggplot2::theme(legend.position=\"top\") +   ggplot2::labs(y = \"Number of Substances\", x = \"Category\") #> Warning: Ignoring unknown parameters: binwidth, bins, pad    g ggplot2::ggsave(filename = \"wasserportal_number-of-reach-substances.jpeg\",                    plot = g,                   width = 14,                    height = 11,                   units = \"cm\")    #plotly::ggplotly(g)"},{"path":"https://kwb-r.github.io/wasserportal/articles/reach_uba.html","id":"by-station","dir":"Articles","previous_headings":"Reach Substances in Wasserportal","what":"By Station","title":"Reach (UBA)","text":"","code":"by_stations <- samples_by_para_and_station_n %>%    dplyr::select(.data$name_uba, .data$n_stations_sampled) #> Adding missing grouping variables: `category`, `category_name`  wasserportal_substances <- samples_by_para_and_station_n %>%    dplyr::arrange(.data$category,                   dplyr::desc(.data$n_total),                   dplyr::desc(.data$n_stations_sampled),                   .data$name_uba) %>%    dplyr::select(.data$category,                  .data$name_uba,                 .data$cas_number,                  .data$n_total,                 .data$n_stations_sampled) #> Adding missing grouping variables: `category_name`   DT::datatable(wasserportal_substances, filter = \"top\", rownames = FALSE) wasserportal_substances_plot <- wasserportal_substances %>%   dplyr::mutate(label = sprintf(\"%s (%s, stations: %d)\",                                  .data$name_uba,                                  .data$cas_number,                                  .data$n_stations_sampled),                 category = forcats::as_factor(.data$category))  wasserportal_substances_plot$label <- factor(wasserportal_substances_plot$label,                                               levels = wasserportal_substances_plot$label) wasserportal_substances_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$n_total,                                 y = .data$label,                                 label = .data$n_total,                                fill = .data$category)) +   ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 2, nudge_x = -1) +   ggplot2::theme_bw() +   ggplot2::labs(subtitle = sprintf(\"%d Wasserportal substances (listed in UBA table)\",                                 nrow(wasserportal_substances_plot)),                 y = \"\",                  x = \"Number of Samples\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::mutate(label = sprintf(\"Cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number),                 category = forcats::as_factor(.data$category))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$percent_samples_abovedetection,                                 y = forcats::fct_reorder(.data$label, .data$percent_samples_abovedetection, .desc = TRUE),                                label = sprintf(\"%2.2f %% (n_samples = %d, n_stations = %d)\", .data$percent_samples_abovedetection,.data$n_total, .data$n_stations_sampled),                                fill = .data$category)) +                             ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::geom_text(size = 1.8, hjust = -0.01) +   ggplot2::xlim(c(0,40)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = sprintf(\"%d / %d substances (>= 1 value above detection limit)\",                                 sum(gwq_subs_plot$n_abovedetection > 0),                                    nrow(gwq_subs_plot)),                                          y = \"\",                  x = \"Percent of Samples above Detection Limit (%)\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") n_cat <- samples_by_category_and_station %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_samples_abovedetection = sum(n_nc),                    n_samples_total = sum(n_total),                    n_samples_percent_abovedetection = 100*sum(n_nc)/sum(n_total)) %>%    dplyr::arrange(dplyr::desc(.data$n_samples_abovedetection))  g1 <- samples_by_category_and_station %>%    dplyr::left_join(n_cat) %>%    dplyr::filter(n_nc > 0)  %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_nc,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),                                label = .data$n_nc,                                fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::geom_text(mapping = ggplot2::aes(     x = .data$n_samples_abovedetection,     y = forcats::fct_reorder(.data$Messstellennummer, .data$n_samples_abovedetection, .desc = TRUE),     label = sprintf(\"%3.1f %% (n_samples = %d)\", .data$n_samples_percent_abovedetection, .data$n_samples_total)),                      inherit.aes = FALSE,                      size = 1.8,                       position = ggplot2::position_nudge(x = 20),     fontface = \"bold\") +   ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Samples Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") n_cat <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::group_by(Messstellennummer) %>%     dplyr::summarise(n_paras_abovedetection_total = sum(n_paras_abovedetection)) %>%    dplyr::arrange(dplyr::desc(.data$n_paras_abovedetection_total))  g1 <- gwq_subs_stations_n_paras_abovedetection %>%    dplyr::left_join(n_cat) %>%    dplyr::mutate(Messstellennummer = as.factor(Messstellennummer),                 category = as.factor(category)) %>%   ggplot2::ggplot(ggplot2::aes(x = .data$n_paras_abovedetection,                               y = forcats::fct_reorder(.data$Messstellennummer, .data$n_paras_abovedetection_total, .desc = TRUE),                              label = .data$n_paras_abovedetection,                              fill = .data$category)) +      ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +         ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col() +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +    #ggplot2::xlim(c(0,215)) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Monitoring Station\",                  x = \"Number of Parameters Above Detection Limit\") #> Joining, by = \"Messstellennummer\"  g1 ggplot2::ggsave(filename = \"wasserportal_reach-categories_paras-by-station_above-detection-limit.jpeg\",                    plot = g1,                   width = 17,                    height = 40,                   units = \"cm\") gwq_subs_plot <- samples_by_para_and_station_n %>%    dplyr::mutate(n_stations_belowdetection = .data$n_stations_sampled - .data$n_stations_abovedetection,                  n_stations_notsampled = .data$n_stations_total - .data$n_stations_sampled) %>%    dplyr::select(\"category\",                 \"category_name\",                 \"name_uba\",                 \"cas_number\",                 \"n_stations_abovedetection\",                  \"n_stations_belowdetection\",                 \"n_stations_notsampled\") %>%    tidyr::pivot_longer(cols = tidyselect::starts_with(\"n_stations\"),                       names_to = \"station_type\",                       values_to = \"station_value\") %>%    dplyr::filter(.data$station_value > 0) %>%    dplyr::mutate(station_type = stringr::str_remove(.data$station_type,                                                     \"n_stations_\")) %>%   dplyr::mutate(station_type = kwb.utils::multiSubstitute(.data$station_type,                                                           list(\"abovedetection\" = \"above detection\",                                                                \"belowdetection\" = \"below detection\",                                                                 \"notsampled\" = \"not sampled\"))) %>%    dplyr::mutate(label = sprintf(\"Cat %d: %s (%s)\",                                  .data$category,                                 .data$name_uba,                                  .data$cas_number),                 category = forcats::as_factor(.data$category))  gwq_subs_plot$label <- as.factor(gwq_subs_plot$label) g1 <- gwq_subs_plot %>%    ggplot2::ggplot(ggplot2::aes(x = .data$station_value,                                 y = .data$label,                                label = .data$station_value,                                fill = forcats::fct_rev(.data$station_type))) +   ggplot2::scale_fill_manual(values = c(\"lightgrey\", \"darkgreen\", \"red\")) +    ggplot2::scale_y_discrete(limits = rev) +   ggplot2::geom_col(alpha = 0.75) +   ggplot2::geom_text(size = 1.8,                       position = ggplot2::position_stack(vjust = 0.5 )) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::labs(title = \"Groundwater Quality by Station\",                  fill = \"\",                  caption = \"above detection: number of stations with at least 1 sample above detection limit\\nbelow detection: number of station with all samples below detection limit\\nnot sampled: number of stations not sampled\",                 subtitle = sprintf(\"for %d GW quality stations\",                                    length(unique(gwq_master$Nummer))),                 y = \"\",                  x = \"Number of Monitoring Stations\")  g1 ggplot2::ggsave(filename = \"wasserportal_reach-substances_by-monitoring-station.jpeg\",                    plot = g1,                   width = 17,                    height = 17,                   units = \"cm\") stations_abovedetection <- samples_by_para_and_station %>%    dplyr::filter(.data$n_nc > 0) %>%    dplyr::select(cas_number, Messstellennummer, n_nc, n_lt) %>%    dplyr::arrange(.data$n_nc)  g1_data <- gwq_data %>%    dplyr::right_join(y = stations_abovedetection,                      by = c(\"cas_number\", \"Messstellennummer\")) %>%    dplyr::mutate(Datum = as.Date(Datum),                  CensorCode = kwb.utils::multiSubstitute(.data$CensorCode,                                                           list(\"nc\" = \"above detection\",                                                                 \"lt\" = \"below detection\")),                  label = sprintf(\"%s (%s): %s (n_above = %d, n_below = %d)\",                                  .data$name,                                  .data$cas_number,                                 .data$Messstellennummer,                                 .data$n_nc,                                 .data$n_lt))   labels <- unique(g1_data$label)  plot_timeseries <- function(sel_label) {   g1_data %>%    dplyr::filter(.data$label == sel_label) %>%    dplyr::arrange(.data$n_nc, .data$label, .data$Datum) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = .data$Datum,                                           y = .data$Messwert,                                          col = .data$CensorCode                                          )) +   ggplot2::scale_color_manual(values = c(\"red\", \"darkgreen\")) +   ggplot2::geom_point() +   ggplot2::theme_bw() +   ggplot2::labs(title = sel_label) }  g_plots <- lapply(labels, function(sel_label) {plot_timeseries(sel_label)})  pdff <- \"wasserportal_reach-substances_timeseries.pdf\" mp <- gridExtra::marrangeGrob(g_plots, nrow=1, ncol=1) ggplot2::ggsave(pdff,                 plot = mp,                  width = 30,                 height = 20,                  units = \"cm\") n_samples_all <- samples %>%    dplyr::count(.data$name_uba) %>%    dplyr::rename(n_all = \"n\")   n_samples_above <- samples %>%    dplyr::filter(CensorCode == \"nc\") %>%    dplyr::count(.data$name_uba) %>%    dplyr::rename(n_above = \"n\")  n_samples <- dplyr::left_join(n_samples_all, n_samples_above) %>%    dplyr::mutate(label = as.factor(sprintf(\"%s (n_above = %d, n_samples = %d)\",                                  .data$name_uba,                                 .data$n_above,                                 .data$n_all))   ) #> Joining, by = \"name_uba\"  substances_above <- samples %>%  dplyr::filter(CensorCode == \"nc\") %>%  dplyr::pull(.data$name_uba) %>%  unique()  detection_limits <- samples %>%   dplyr::filter(CensorCode == \"lt\",                 name_uba %in% substances_above) %>%    dplyr::mutate(Messwert = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = .data$Messwert * 1000,                                           false = .data$Messwert),                 Einheit = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = \"\\u00B5g/l\",                                           false = .data$Einheit),                 year = as.integer(format(as.Date(.data$Datum), format = \"%Y\"))) %>%    dplyr::count(.data$name_uba, .data$year, .data$Messwert) %>%    dplyr::left_join(n_samples)  #> Joining, by = \"name_uba\"   plot_detection_limits <- function(sel_sub) {   g1 <- detection_limits %>%    dplyr::filter(name_uba == sel_sub) %>%    ggplot2::ggplot(mapping = ggplot2::aes(x = .data$year,                                          y = .data$n,                                          col = forcats::fct_rev(as.factor(.data$Messwert)))) +   ggplot2::scale_color_brewer(palette=\"RdYlGn\") +   ggplot2::geom_point() +    ggplot2::labs(title = sprintf(\"%s\", sel_sub),                 x = \"Year\",                  y = \"Number of Samples below Detection Limit\",                 col = \"Detection Limit (\\u00B5g/l)\") +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") g1 }  g_plots <- lapply(substances_above, function(sel_sub) {plot_detection_limits(sel_sub)})  pdff <- \"wasserportal_reach-substances_detection-limits.pdf\" mp <- gridExtra::marrangeGrob(g_plots, nrow=1, ncol=1) ggplot2::ggsave(pdff,                 plot = mp,                  width = 20,                 height = 15,                  units = \"cm\")   g1 <- samples %>%   dplyr::left_join(n_samples) %>%    dplyr::filter(CensorCode == \"nc\") %>%    dplyr::mutate(Messwert = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = .data$Messwert * 1000,                                           false = .data$Messwert),                 Einheit = dplyr::if_else(.data$Einheit == \"mg/l\",                                           true = \"\\u00B5g/l\",                                           false = .data$Einheit),                 category = as.factor(category)) %>%    ggplot2::ggplot(mapping = ggplot2::aes(y = forcats::fct_reorder(.data$label,                                                                    .data$n_above,                                                                    .desc = TRUE),                                          x = .data$Messwert,                                          fill = .data$category)) +   ggplot2::scale_fill_brewer(palette=\"RdYlGn\") +     ggplot2::scale_y_discrete(limits = rev) +   ggplot2::scale_x_log10() +   ggplot2::geom_boxplot() +   ggplot2::labs(subtitle = \"\",                                         fill = \"Category\",                 y = \"Substance\",                  x = \"Concentration (\\u00B5g / l)\") +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") #> Joining, by = \"name_uba\"  g1 pdff <- \"wasserportal_reach-substances_boxplot.pdf\" ggplot2::ggsave(pdff,                 plot = g1,                  width = 25,                 height = 15,                  units = \"cm\")"},{"path":"https://kwb-r.github.io/wasserportal/articles/surface-water.html","id":"define-helper-functions","dir":"Articles","previous_headings":"","what":"Define Helper Functions","title":"Surface Water","text":"","code":"cat_file_enumeration <- function(files) {   cat(paste0(collapse = \"\\n\\n\", sprintf(     \"- [%s](%s/%s)\",      files,      \"https://kwb-r.github.io/wasserportal\",     files   ))) }"},{"path":"https://kwb-r.github.io/wasserportal/articles/surface-water.html","id":"master-data","dir":"Articles","previous_headings":"","what":"Master Data","title":"Surface Water","text":"following surface water master data .csv files available download: stations_surface-water_water-level.csv stations_surface-water_flow.csv stations_surface-water_temperature.csv stations_surface-water_conductivity.csv stations_surface-water_ph.csv stations_surface-water_oxygen-concentration.csv stations_surface-water_oxygen-saturation.csv","code":"library(wasserportal)  stations <- wasserportal::get_stations() #> Importing 9 station overviews from Wasserportal Berlin ... ok. (7.73 secs)  is_sw <- stringr::str_detect(names(stations$overview_list), \"surface\")  files <- wasserportal::list_masters_data_to_csv(stations$overview_list[is_sw]) #> Writing 'stations_surface-water_water-level.csv' ... ok. (0.12 secs)  #> Writing 'stations_surface-water_flow.csv' ... ok. (0.01 secs)  #> Writing 'stations_surface-water_temperature.csv' ... ok. (0.01 secs)  #> Writing 'stations_surface-water_conductivity.csv' ... ok. (0.00 secs)  #> Writing 'stations_surface-water_ph.csv' ... ok. (0.00 secs)  #> Writing 'stations_surface-water_oxygen-concentration.csv' ... ok. (0.00 secs)  #> Writing 'stations_surface-water_oxygen-saturation.csv' ... ok. (0.00 secs)"},{"path":"https://kwb-r.github.io/wasserportal/articles/surface-water.html","id":"daily-surface-water-data","dir":"Articles","previous_headings":"","what":"Daily Surface Water Data","title":"Surface Water","text":"running code available daily surface water data monitoring stations Wasserportal Berlin downloaded exported one .json file parameter available monitoring stations. following .zip files available download: daily_surface-water_water-level.zip daily_surface-water_flow.zip daily_surface-water_temperature.zip daily_surface-water_conductivity.zip daily_surface-water_ph.zip daily_surface-water_oxygen-concentration.zip daily_surface-water_oxygen-saturation.zip","code":"variables <- wasserportal::get_surfacewater_variables()  variables #>          surface_water.water_level                 surface_water.flow  #>                              \"ows\"                              \"odf\"  #>          surface_water.temperature         surface_water.conductivity  #>                              \"owt\"                              \"olf\"  #>                   surface_water.ph surface_water.oxygen_concentration  #>                              \"oph\"                              \"oog\"  #>    surface_water.oxygen_saturation  #>                              \"oos\"  sw_data_daily_list <- wasserportal::get_daily_surfacewater_data(   stations,   variables ) #> Importing 'surface_water.water_level' ... Station id: 5865900 (1/63) #> Reading 'NA' for station 5865900 (station_5865900) ... ok. (1.32 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5827103 (2/63) #> Reading 'NA' for station 5827103 (station_5827103) ... ok. (0.72 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5870400 (3/63) #> Reading 'NA' for station 5870400 (station_5870400) ... ok. (0.81 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5865300 (4/63) #> Reading 'NA' for station 5865300 (station_5865300) ... ok. (0.77 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5819900 (5/63) #> Reading 'NA' for station 5819900 (station_5819900) ... ok. (1.54 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5864801 (6/63) #> Reading 'NA' for station 5864801 (station_5864801) ... ok. (0.49 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5861101 (7/63) #> Reading 'NA' for station 5861101 (station_5861101) ... ok. (0.57 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800107 (8/63) #> Reading 'NA' for station 5800107 (station_5800107) ... ok. (1.52 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800317 (9/63) #> Reading 'NA' for station 5800317 (station_5800317) ... ok. (0.74 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867003 (10/63) #> Reading 'NA' for station 5867003 (station_5867003) ... ok. (0.54 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867401 (11/63) #> Reading 'NA' for station 5867401 (station_5867401) ... ok. (0.70 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800301 (12/63) #> Reading 'NA' for station 5800301 (station_5800301) ... ok. (0.56 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800302 (13/63) #> Reading 'NA' for station 5800302 (station_5800302) ... ok. (0.57 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5863000 (14/63) #> Reading 'NA' for station 5863000 (station_5863000) ... ok. (0.52 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867900 (15/63) #> Reading 'NA' for station 5867900 (station_5867900) ... ok. (0.84 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5827101 (16/63) #> Reading 'NA' for station 5827101 (station_5827101) ... ok. (0.91 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800320 (17/63) #> Reading 'NA' for station 5800320 (station_5800320) ... ok. (0.50 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800313 (18/63) #> Reading 'NA' for station 5800313 (station_5800313) ... ok. (0.48 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5860900 (19/63) #> Reading 'NA' for station 5860900 (station_5860900) ... ok. (0.49 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867101 (20/63) #> Reading 'NA' for station 5867101 (station_5867101) ... ok. (0.55 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800303 (21/63) #> Reading 'NA' for station 5800303 (station_5800303) ... ok. (0.53 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5826702 (22/63) #> Reading 'NA' for station 5826702 (station_5826702) ... ok. (0.84 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800305 (23/63) #> Reading 'NA' for station 5800305 (station_5800305) ... ok. (1.53 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800304 (24/63) #> Reading 'NA' for station 5800304 (station_5800304) ... ok. (0.59 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800306 (25/63) #> Reading 'NA' for station 5800306 (station_5800306) ... ok. (0.63 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5861000 (26/63) #> Reading 'NA' for station 5861000 (station_5861000) ... ok. (0.98 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867300 (27/63) #> Reading 'NA' for station 5867300 (station_5867300) ... ok. (0.88 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5864700 (28/63) #> Reading 'NA' for station 5864700 (station_5864700) ... ok. (0.42 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5865000 (29/63) #> Reading 'NA' for station 5865000 (station_5865000) ... ok. (0.47 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5865200 (30/63) #> Reading 'NA' for station 5865200 (station_5865200) ... ok. (0.50 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800308 (31/63) #> Reading 'NA' for station 5800308 (station_5800308) ... ok. (0.74 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867100 (32/63) #> Reading 'NA' for station 5867100 (station_5867100) ... ok. (0.82 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5869700 (33/63) #> Reading 'NA' for station 5869700 (station_5869700) ... ok. (0.55 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867500 (34/63) #> Reading 'NA' for station 5867500 (station_5867500) ... ok. (1.11 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5870100 (35/63) #> Reading 'NA' for station 5870100 (station_5870100) ... ok. (1.44 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800309 (36/63) #> Reading 'NA' for station 5800309 (station_5800309) ... ok. (1.31 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5819901 (37/63) #> Reading 'NA' for station 5819901 (station_5819901) ... ok. (0.72 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800318 (38/63) #> Reading 'NA' for station 5800318 (station_5800318) ... ok. (0.57 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5826701 (39/63) #> Reading 'NA' for station 5826701 (station_5826701) ... ok. (0.84 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800315 (40/63) #> Reading 'NA' for station 5800315 (station_5800315) ... ok. (0.60 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800316 (41/63) #> Reading 'NA' for station 5800316 (station_5800316) ... ok. (0.56 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867700 (42/63) #> Reading 'NA' for station 5867700 (station_5867700) ... ok. (0.72 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5803500 (43/63) #> Reading 'NA' for station 5803500 (station_5803500) ... ok. (2.56 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800312 (44/63) #> Reading 'NA' for station 5800312 (station_5800312) ... ok. (1.57 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867000 (45/63) #> Reading 'NA' for station 5867000 (station_5867000) ... ok. (0.91 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800106 (46/63) #> Reading 'NA' for station 5800106 (station_5800106) ... ok. (0.60 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5866700 (47/63) #> Reading 'NA' for station 5866700 (station_5866700) ... ok. (0.78 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5866800 (48/63) #> Reading 'NA' for station 5866800 (station_5866800) ... ok. (1.73 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5862811 (49/63) #> Reading 'NA' for station 5862811 (station_5862811) ... ok. (0.73 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867600 (50/63) #> Reading 'NA' for station 5867600 (station_5867600) ... ok. (0.41 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5827700 (51/63) #> Reading 'NA' for station 5827700 (station_5827700) ... ok. (1.55 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5820000 (52/63) #> Reading 'NA' for station 5820000 (station_5820000) ... ok. (1.13 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5815911 (53/63) #> Reading 'NA' for station 5815911 (station_5815911) ... ok. (0.77 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5803200 (54/63) #> Reading 'NA' for station 5803200 (station_5803200) ... ok. (1.51 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867301 (55/63) #> Reading 'NA' for station 5867301 (station_5867301) ... ok. (0.54 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867201 (56/63) #> Reading 'NA' for station 5867201 (station_5867201) ... ok. (0.83 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867202 (57/63) #> Reading 'NA' for station 5867202 (station_5867202) ... ok. (0.81 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800310 (58/63) #> Reading 'NA' for station 5800310 (station_5800310) ... ok. (0.59 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800314 (59/63) #> Reading 'NA' for station 5800314 (station_5800314) ... ok. (0.93 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5861200 (60/63) #> Reading 'NA' for station 5861200 (station_5861200) ... ok. (1.01 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867001 (61/63) #> Reading 'NA' for station 5867001 (station_5867001) ... ok. (0.45 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5864800 (62/63) #> Reading 'NA' for station 5864800 (station_5864800) ... ok. (0.72 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5866301 (63/63) #> Reading 'NA' for station 5866301 (station_5866301) ... ok. (0.80 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> ok. (58.82 secs)  #> Importing 'surface_water.flow' ... Station id: 5827103 (1/16) #> Reading 'NA' for station 5827103 (station_5827103) ... ok. (0.69 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5870400 (2/16) #> Reading 'NA' for station 5870400 (station_5870400) ... ok. (0.52 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5865300 (3/16) #> Reading 'NA' for station 5865300 (station_5865300) ... ok. (0.76 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5864801 (4/16) #> Reading 'NA' for station 5864801 (station_5864801) ... ok. (0.46 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867401 (5/16) #> Reading 'NA' for station 5867401 (station_5867401) ... ok. (0.63 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867900 (6/16) #> Reading 'NA' for station 5867900 (station_5867900) ... ok. (0.76 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5827101 (7/16) #> Reading 'NA' for station 5827101 (station_5827101) ... ok. (0.46 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5870100 (8/16) #> Reading 'NA' for station 5870100 (station_5870100) ... ok. (0.78 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5826701 (9/16) #> Reading 'NA' for station 5826701 (station_5826701) ... ok. (0.53 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5862811 (10/16) #> Reading 'NA' for station 5862811 (station_5862811) ... ok. (0.68 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5827700 (11/16) #> Reading 'NA' for station 5827700 (station_5827700) ... ok. (1.51 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5815911 (12/16) #> Reading 'NA' for station 5815911 (station_5815911) ... ok. (0.72 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5803200 (13/16) #> Reading 'NA' for station 5803200 (station_5803200) ... ok. (1.02 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5861200 (14/16) #> Reading 'NA' for station 5861200 (station_5861200) ... ok. (0.76 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5864800 (15/16) #> Reading 'NA' for station 5864800 (station_5864800) ... ok. (0.70 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5866301 (16/16) #> Reading 'NA' for station 5866301 (station_5866301) ... ok. (0.85 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> ok. (13.11 secs)  #> Importing 'surface_water.temperature' ... Station id: 601 (1/59) #> Reading 'NA' for station 601 (station_601) ... ok. (1.03 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 151 (2/59) #> Reading 'NA' for station 151 (station_151) ... ok. (0.97 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 153 (3/59) #> Reading 'NA' for station 153 (station_153) ... ok. (0.72 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 509 (4/59) #> Reading 'NA' for station 509 (station_509) ... ok. (1.07 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 504 (5/59) #> Reading 'NA' for station 504 (station_504) ... ok. (1.04 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 414 (6/59) #> Reading 'NA' for station 414 (station_414) ... ok. (1.05 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 141 (7/59) #> Reading 'NA' for station 141 (station_141) ... ok. (1.33 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 111 (8/59) #> Reading 'NA' for station 111 (station_111) ... ok. (1.28 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 211 (9/59) #> Reading 'NA' for station 211 (station_211) ... ok. (1.32 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 161 (10/59) #> Reading 'NA' for station 161 (station_161) ... ok. (1.62 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 421 (11/59) #> Reading 'NA' for station 421 (station_421) ... ok. (1.71 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5865300 (12/59) #> Reading 'NA' for station 5865300 (station_5865300) ... ok. (0.58 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5861101 (13/59) #> Reading 'NA' for station 5861101 (station_5861101) ... ok. (0.48 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800107 (14/59) #> Reading 'NA' for station 5800107 (station_5800107) ... ok. (0.57 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800317 (15/59) #> Reading 'NA' for station 5800317 (station_5800317) ... ok. (0.67 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867003 (16/59) #> Reading 'NA' for station 5867003 (station_5867003) ... ok. (0.65 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867401 (17/59) #> Reading 'NA' for station 5867401 (station_5867401) ... ok. (0.61 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800302 (18/59) #> Reading 'NA' for station 5800302 (station_5800302) ... ok. (0.69 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5863000 (19/59) #> Reading 'NA' for station 5863000 (station_5863000) ... ok. (0.64 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867900 (20/59) #> Reading 'NA' for station 5867900 (station_5867900) ... ok. (1.65 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5827101 (21/59) #> Reading 'NA' for station 5827101 (station_5827101) ... ok. (0.67 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800320 (22/59) #> Reading 'NA' for station 5800320 (station_5800320) ... ok. (0.59 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867101 (23/59) #> Reading 'NA' for station 5867101 (station_5867101) ... ok. (1.03 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800303 (24/59) #> Reading 'NA' for station 5800303 (station_5800303) ... ok. (0.69 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800305 (25/59) #> Reading 'NA' for station 5800305 (station_5800305) ... ok. (0.68 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800304 (26/59) #> Reading 'NA' for station 5800304 (station_5800304) ... ok. (0.68 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800306 (27/59) #> Reading 'NA' for station 5800306 (station_5800306) ... ok. (0.66 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867300 (28/59) #> Reading 'NA' for station 5867300 (station_5867300) ... ok. (0.68 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5864700 (29/59) #> Reading 'NA' for station 5864700 (station_5864700) ... ok. (0.46 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5865000 (30/59) #> Reading 'NA' for station 5865000 (station_5865000) ... ok. (0.49 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5865200 (31/59) #> Reading 'NA' for station 5865200 (station_5865200) ... ok. (0.55 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800308 (32/59) #> Reading 'NA' for station 5800308 (station_5800308) ... ok. (0.34 secs)  #> Removing 1 elements that are empty or failed ... ok. (0.00 secs) #> No remaining data frames. Returning NULL. #> Station id: 5867100 (33/59) #> Reading 'NA' for station 5867100 (station_5867100) ... ok. (0.73 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5869700 (34/59) #> Reading 'NA' for station 5869700 (station_5869700) ... ok. (0.67 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867500 (35/59) #> Reading 'NA' for station 5867500 (station_5867500) ... ok. (0.62 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5870100 (36/59) #> Reading 'NA' for station 5870100 (station_5870100) ... ok. (0.65 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800309 (37/59) #> Reading 'NA' for station 5800309 (station_5800309) ... ok. (0.62 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5819901 (38/59) #> Reading 'NA' for station 5819901 (station_5819901) ... ok. (0.54 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800318 (39/59) #> Reading 'NA' for station 5800318 (station_5800318) ... ok. (0.67 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5826701 (40/59) #> Reading 'NA' for station 5826701 (station_5826701) ... ok. (0.60 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800315 (41/59) #> Reading 'NA' for station 5800315 (station_5800315) ... ok. (0.68 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800316 (42/59) #> Reading 'NA' for station 5800316 (station_5800316) ... ok. (0.66 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867700 (43/59) #> Reading 'NA' for station 5867700 (station_5867700) ... ok. (0.64 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5803500 (44/59) #> Reading 'NA' for station 5803500 (station_5803500) ... ok. (0.69 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800312 (45/59) #> Reading 'NA' for station 5800312 (station_5800312) ... ok. (0.65 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867000 (46/59) #> Reading 'NA' for station 5867000 (station_5867000) ... ok. (0.61 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800106 (47/59) #> Reading 'NA' for station 5800106 (station_5800106) ... ok. (0.68 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5866700 (48/59) #> Reading 'NA' for station 5866700 (station_5866700) ... ok. (0.67 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5866800 (49/59) #> Reading 'NA' for station 5866800 (station_5866800) ... ok. (0.67 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867600 (50/59) #> Reading 'NA' for station 5867600 (station_5867600) ... ok. (0.47 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5827700 (51/59) #> Reading 'NA' for station 5827700 (station_5827700) ... ok. (1.70 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5820000 (52/59) #> Reading 'NA' for station 5820000 (station_5820000) ... ok. (0.65 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5803200 (53/59) #> Reading 'NA' for station 5803200 (station_5803200) ... ok. (1.69 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867301 (54/59) #> Reading 'NA' for station 5867301 (station_5867301) ... ok. (0.69 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867201 (55/59) #> Reading 'NA' for station 5867201 (station_5867201) ... ok. (0.72 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5867202 (56/59) #> Reading 'NA' for station 5867202 (station_5867202) ... ok. (0.69 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5800310 (57/59) #> Reading 'NA' for station 5800310 (station_5800310) ... ok. (0.68 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5861200 (58/59) #> Reading 'NA' for station 5861200 (station_5861200) ... ok. (0.62 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 5864800 (59/59) #> Reading 'NA' for station 5864800 (station_5864800) ... ok. (0.66 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Empty data frame when looping through 'sw_data_list' in sw_data_list_to_df() #> Warning in min(which(stringr::str_detect(metadata, \":\"))): no non-missing #> arguments to min; returning Inf #> ok. (51.84 secs)  #> Importing 'surface_water.conductivity' ... Station id: 601 (1/11) #> Reading 'NA' for station 601 (station_601) ... ok. (1.06 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 151 (2/11) #> Reading 'NA' for station 151 (station_151) ... ok. (1.99 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 153 (3/11) #> Reading 'NA' for station 153 (station_153) ... ok. (0.80 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 509 (4/11) #> Reading 'NA' for station 509 (station_509) ... ok. (1.11 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 504 (5/11) #> Reading 'NA' for station 504 (station_504) ... ok. (1.12 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 414 (6/11) #> Reading 'NA' for station 414 (station_414) ... ok. (1.07 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 141 (7/11) #> Reading 'NA' for station 141 (station_141) ... ok. (1.36 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 111 (8/11) #> Reading 'NA' for station 111 (station_111) ... ok. (1.35 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 211 (9/11) #> Reading 'NA' for station 211 (station_211) ... ok. (1.32 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 161 (10/11) #> Reading 'NA' for station 161 (station_161) ... ok. (1.61 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 421 (11/11) #> Reading 'NA' for station 421 (station_421) ... ok. (1.77 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> ok. (16.18 secs)  #> Importing 'surface_water.ph' ... Station id: 601 (1/11) #> Reading 'NA' for station 601 (station_601) ... ok. (1.02 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 151 (2/11) #> Reading 'NA' for station 151 (station_151) ... ok. (0.92 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 153 (3/11) #> Reading 'NA' for station 153 (station_153) ... ok. (0.71 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 509 (4/11) #> Reading 'NA' for station 509 (station_509) ... ok. (1.08 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 504 (5/11) #> Reading 'NA' for station 504 (station_504) ... ok. (1.01 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 414 (6/11) #> Reading 'NA' for station 414 (station_414) ... ok. (1.01 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 141 (7/11) #> Reading 'NA' for station 141 (station_141) ... ok. (1.26 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 111 (8/11) #> Reading 'NA' for station 111 (station_111) ... ok. (1.28 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 211 (9/11) #> Reading 'NA' for station 211 (station_211) ... ok. (1.32 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 161 (10/11) #> Reading 'NA' for station 161 (station_161) ... ok. (1.64 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 421 (11/11) #> Reading 'NA' for station 421 (station_421) ... ok. (1.75 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> ok. (14.65 secs)  #> Importing 'surface_water.oxygen_concentration' ... Station id: 601 (1/11) #> Reading 'NA' for station 601 (station_601) ... ok. (1.05 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 151 (2/11) #> Reading 'NA' for station 151 (station_151) ... ok. (0.95 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 153 (3/11) #> Reading 'NA' for station 153 (station_153) ... ok. (0.68 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 509 (4/11) #> Reading 'NA' for station 509 (station_509) ... ok. (1.02 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 504 (5/11) #> Reading 'NA' for station 504 (station_504) ... ok. (1.02 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 414 (6/11) #> Reading 'NA' for station 414 (station_414) ... ok. (0.99 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 141 (7/11) #> Reading 'NA' for station 141 (station_141) ... ok. (1.28 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 111 (8/11) #> Reading 'NA' for station 111 (station_111) ... ok. (2.31 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 211 (9/11) #> Reading 'NA' for station 211 (station_211) ... ok. (1.34 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 161 (10/11) #> Reading 'NA' for station 161 (station_161) ... ok. (1.61 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 421 (11/11) #> Reading 'NA' for station 421 (station_421) ... ok. (1.71 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> ok. (15.64 secs)  #> Importing 'surface_water.oxygen_saturation' ... Station id: 601 (1/11) #> Reading 'NA' for station 601 (station_601) ... ok. (0.96 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 151 (2/11) #> Reading 'NA' for station 151 (station_151) ... ok. (0.89 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 153 (3/11) #> Reading 'NA' for station 153 (station_153) ... ok. (0.70 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 509 (4/11) #> Reading 'NA' for station 509 (station_509) ... ok. (0.95 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 504 (5/11) #> Reading 'NA' for station 504 (station_504) ... ok. (0.97 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 414 (6/11) #> Reading 'NA' for station 414 (station_414) ... ok. (0.93 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 141 (7/11) #> Reading 'NA' for station 141 (station_141) ... ok. (1.10 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 111 (8/11) #> Reading 'NA' for station 111 (station_111) ... ok. (1.15 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 211 (9/11) #> Reading 'NA' for station 211 (station_211) ... ok. (1.19 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 161 (10/11) #> Reading 'NA' for station 161 (station_161) ... ok. (1.51 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> Station id: 421 (11/11) #> Reading 'NA' for station 421 (station_421) ... ok. (1.59 secs) #> Warning in warning_not_implemented(\"merge_raw_results_daily()\"): #> merge_raw_results_daily() is not yet implemented. Returning raw data #> ok. (13.67 secs)  files <- wasserportal::list_timeseries_data_to_zip(sw_data_daily_list) #> Writing 'daily_surface-water_water-level.zip' ... ok. (1.12 secs)  #> Writing 'daily_surface-water_flow.zip' ... ok. (0.28 secs)  #> Writing 'daily_surface-water_temperature.zip' ... ok. (0.98 secs)  #> Writing 'daily_surface-water_conductivity.zip' ... ok. (0.36 secs)  #> Writing 'daily_surface-water_ph.zip' ... ok. (0.36 secs)  #> Writing 'daily_surface-water_oxygen-concentration.zip' ... ok. (0.37 secs)  #> Writing 'daily_surface-water_oxygen-saturation.zip' ... ok. (0.35 secs)  files #> [1] \"daily_surface-water_water-level.zip\"          #> [2] \"daily_surface-water_flow.zip\"                 #> [3] \"daily_surface-water_temperature.zip\"          #> [4] \"daily_surface-water_conductivity.zip\"         #> [5] \"daily_surface-water_ph.zip\"                   #> [6] \"daily_surface-water_oxygen-concentration.zip\" #> [7] \"daily_surface-water_oxygen-saturation.zip\"  # Data availability per parameter sw_data_daily_list %>%   dplyr::bind_rows() %>%    dplyr::count(Parameter, Einheit) #>             Parameter Einheit      n #> 1          Durchfluss    m³/s 119276 #> 2       Leitfähigkeit   µS/cm  83087 #> 3    Sauerstoffgehalt    mg/l  82072 #> 4 Sauerstoffsättigung       %  81605 #> 5         Wasserstand      cm 521284 #> 6   Wasssertemperatur      °C 202979 #> 7             pH-Wert          82836"},{"path":"https://kwb-r.github.io/wasserportal/articles/surface-water.html","id":"daily-surface-water-levels","dir":"Articles","previous_headings":"","what":"Daily Surface Water Levels","title":"Surface Water","text":"","code":"swl_master <- wasserportal::get_wasserportal_masters_data(   master_urls = stations$overview_list$surface_water.water_level %>%     dplyr::filter(.data$Betreiber == \"Land Berlin\") %>%     dplyr::pull(.data$stammdaten_link) ) #> Importing 63 station metadata from Wasserportal Berlin ... ok. (25.77 secs)  column_level_zero <- \"Pegelnullpunkt_m_NHN\"    swl_data <- sw_data_daily_list$surface_water.water_level %>%    dplyr::select(where(~!all(is.na(.x)))) %>%   dplyr::left_join(     kwb.utils::selectColumns(swl_master, c(\"Nummer\", column_level_zero)),     by = c(Messstellennummer = \"Nummer\")   ) %>%   dplyr::mutate(     Tagesmittelwert_Pegelstand_mNN = as.numeric(.data[[column_level_zero]]) +        .data$Tagesmittelwert / 100   ) %>%   ### remove -777 for messstellennummer 5867000 (few values in 2000) resulted by   ### step above   dplyr::filter(.data[[\"Tagesmittelwert_Pegelstand_mNN\"]] != -777) %>%   kwb.utils::removeColumns(column_level_zero)  str(swl_data) #> 'data.frame':    520202 obs. of  6 variables: #>  $ Messstellennummer             : chr  \"5865900\" \"5865900\" \"5865900\" \"5865900\" ... #>  $ Datum                         : Date, format: \"1999-11-01\" \"1999-11-02\" ... #>  $ Tagesmittelwert               : int  16 23 19 17 17 15 14 14 19 19 ... #>  $ Parameter                     : chr  \"Wasserstand\" \"Wasserstand\" \"Wasserstand\" \"Wasserstand\" ... #>  $ Einheit                       : chr  \"cm\" \"cm\" \"cm\" \"cm\" ... #>  $ Tagesmittelwert_Pegelstand_mNN: num  45.8 45.8 45.8 45.8 45.8 ... #>  - attr(*, \"metadata\")= chr [1:5] \"Stationsnummer: 5865900\" \"Stationsname: Allee der Kosmonauten\" \"Gewässer: M.-H.-Grenzgr.\" \"Wasserstand in cm\" ..."},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"define-helper-functions","dir":"Articles","previous_headings":"","what":"Define Helper Functions","title":"Tutorial","text":"","code":"write_pretty_json <- function(x, path) {   jsonlite::write_json(x, path = path, pretty = TRUE) }  top_filter_datatable <- function(x, caption = NULL) {   DT::datatable(x, filter = \"top\", caption = caption) }  create_title_text <- function(x, ncols) {   paste0(     paste0(names(x)[1L], \": \", x[1L], collapse = \", \"),     \"<br>\",     \"<sup>\",     paste0(names(x)[ncols], \": \", x[ncols], collapse =\", \"),     \"<\/sup>\"   ) }  also_available <- function(what, format, filename) {   cat(paste0(     what,      \" is also available \",      format,      \" here: \",     \"[https://kwb-r.github.io/wasserportal/\", filename, \"]\",     \"(../\", filename, \")\"   )) }  ggplot2_date_value <- function(data, col) {   ggplot2::ggplot(data, mapping = ggplot2::aes(     x = Datum,      y = Messwert,      col = col   )) }"},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"general-overview","dir":"Articles","previous_headings":"Stations","what":"General overview","title":"Tutorial","text":"crosstable data checking data availabilty monitoring stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_crosstable.json","code":"# install.packages(\"remotes\") # remotes::install_github(\"kwb-r/wasserportal\", upgrade = \"never\", force = TRUE) library(wasserportal)  overview_options <- wasserportal::get_overview_options()  str(overview_options) #> List of 2 #>  $ surface_water:List of 7 #>   ..$ water_level         : chr \"ows\" #>   ..$ flow                : chr \"odf\" #>   ..$ temperature         : chr \"owt\" #>   ..$ conductivity        : chr \"olf\" #>   ..$ ph                  : chr \"oph\" #>   ..$ oxygen_concentration: chr \"oog\" #>   ..$ oxygen_saturation   : chr \"oos\" #>  $ groundwater  :List of 2 #>   ..$ level  : chr \"gws\" #>   ..$ quality: chr \"gwq\"  system.time(stations <- wasserportal::get_stations()) #> Importing 9 station overviews from Wasserportal Berlin ... ok. (7.09 secs) #>    user  system elapsed  #>   0.057   0.007   7.351  str(stations) #> List of 3 #>  $ overview_list:List of 9 #>   ..$ surface_water.water_level         : tibble [108 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: int [1:108] 5865900 5827103 5870400 5865300 5819900 5864801 5861101 5800107 5800317 5867003 ... #>   .. ..$ Messstellenname  : chr [1:108] \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>   .. ..$ Gewaesser        : chr [1:108] \"M.-H.-Grenzgr.\" \"Müggelspree\" \"Griebnitzkanal\" \"Wuhle\" ... #>   .. ..$ Betreiber        : chr [1:108] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:108] \"07.12.2023 06:30\" \"07.12.2023 06:15\" \"07.12.2023 06:15\" \"16.02.2023 13:30\" ... #>   .. ..$ Wasserstand      : num [1:108] 6 50 52 34 89 6 24 68 76 57 ... #>   .. ..$ Einheit          : chr [1:108] \"cm\" \"cm\" \"cm\" \"cm\" ... #>   .. ..$ Ganglinien       : chr [1:108] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5865900\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5865300\" ... #>   .. ..$ Klassifikation   : chr [1:108] \"niedrig\" \"niedrig\" \"niedrig\" \"nicht aktuell\" ... #>   .. ..$ stammdaten_link  : chr [1:108] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5865900\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5865300\" ... #>   ..$ surface_water.flow                : tibble [39 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: int [1:39] 5827103 5870400 5865300 5864801 5867401 5867900 5827101 5870100 5826701 5862811 ... #>   .. ..$ Messstellenname  : chr [1:39] \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" \"Am Kienberg\" ... #>   .. ..$ Gewaesser        : chr [1:39] \"Müggelspree\" \"Griebnitzkanal\" \"Wuhle\" \"Hellersdorfer Graben\" ... #>   .. ..$ Betreiber        : chr [1:39] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:39] \"01.05.2022 00:00\" \"\" \"16.02.2023 13:30\" \"07.12.2023 06:30\" ... #>   .. ..$ Durchfluss       : num [1:39] 4.08 NA 0.165 0.017 1.42 0.286 5.92 3.54 8.73 13.7 ... #>   .. ..$ Einheit          : chr [1:39] \"m³/s\" \"m³/s\" \"m³/s\" \"m³/s\" ... #>   .. ..$ Ganglinie        : chr [1:39] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=odf&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=odf&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=odf&station=5865300\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=odf&station=5864801\" ... #>   .. ..$ Klassifikation   : chr [1:39] \"nicht aktuell\" \"nicht aktuell\" \"nicht aktuell\" \"keine\" ... #>   .. ..$ stammdaten_link  : chr [1:39] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=odf&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=odf&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=odf&station=5865300\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=odf&station=5864801\" ... #>   ..$ surface_water.temperature         : tibble [65 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:65] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:65] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:65] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:65] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:65] \"27.10.2023 09:30\" \"27.10.2023 10:15\" \"27.10.2023 10:00\" \"27.10.2023 09:15\" ... #>   .. ..$ Wassertemperatur : chr [1:65] \"12.20\" \"12.04\" \"12.05\" \"11.97\" ... #>   .. ..$ Einheit          : chr [1:65] \"°C\" \"°C\" \"°C\" \"°C\" ... #>   .. ..$ Ganglinie        : chr [1:65] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=owt&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=owt&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=owt&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=owt&station=509\" ... #>   .. ..$ Klassifikation   : chr [1:65] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   .. ..$ stammdaten_link  : chr [1:65] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=owt&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=owt&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=owt&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=owt&station=509\" ... #>   ..$ surface_water.conductivity        : tibble [17 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:17] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:17] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:17] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:17] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:17] \"27.10.2023 09:30\" \"27.10.2023 10:15\" \"27.10.2023 10:00\" \"27.10.2023 09:15\" ... #>   .. ..$ Leitfaehigkeit   : chr [1:17] \"806\" \"798\" \"804\" \"810\" ... #>   .. ..$ Einheit          : chr [1:17] \"µS/cm\" \"µS/cm\" \"µS/cm\" \"µS/cm\" ... #>   .. ..$ Ganglinie        : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=olf&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=olf&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=olf&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=olf&station=509\" ... #>   .. ..$ Klassifikation   : chr [1:17] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   .. ..$ stammdaten_link  : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=olf&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=olf&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=olf&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=olf&station=509\" ... #>   ..$ surface_water.ph                  : tibble [17 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:17] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:17] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:17] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:17] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:17] \"27.10.2023 09:30\" \"27.10.2023 10:15\" \"27.10.2023 10:00\" \"27.10.2023 09:15\" ... #>   .. ..$ pHWert           : chr [1:17] \"7.73\" \"7.64\" \"7.40\" \"7.51\" ... #>   .. ..$ Ganglinie        : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oph&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oph&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oph&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oph&station=509\" ... #>   .. ..$ Klassifikation   : chr [1:17] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   .. ..$ stammdaten_link  : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oph&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oph&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oph&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oph&station=509\" ... #>   ..$ surface_water.oxygen_concentration: tibble [17 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:17] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:17] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:17] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:17] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:17] \"27.10.2023 09:30\" \"27.10.2023 10:15\" \"27.10.2023 10:00\" \"27.10.2023 09:15\" ... #>   .. ..$ Sauerstoffgehalt : chr [1:17] \"7.67\" \"7.53\" \"7.33\" \"4.00\" ... #>   .. ..$ Einheit          : chr [1:17] \"mg/l\" \"mg/l\" \"mg/l\" \"mg/l\" ... #>   .. ..$ Ganglinie        : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oog&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oog&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oog&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oog&station=509\" ... #>   .. ..$ Klassifikation   : chr [1:17] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   .. ..$ stammdaten_link  : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oog&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oog&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oog&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oog&station=509\" ... #>   ..$ surface_water.oxygen_saturation   : tibble [17 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:17] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:17] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:17] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:17] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:17] \"27.10.2023 09:30\" \"27.10.2023 10:15\" \"27.10.2023 10:00\" \"27.10.2023 09:15\" ... #>   .. ..$ Parameterwert    : chr [1:17] \"71.71\" \"70.15\" \"68.30\" \"37.20\" ... #>   .. ..$ Einheit          : chr [1:17] \"%\" \"%\" \"%\" \"%\" ... #>   .. ..$ Ganglinie        : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oos&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oos&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oos&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oos&station=509\" ... #>   .. ..$ Klassifikation   : chr [1:17] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   .. ..$ stammdaten_link  : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oos&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oos&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oos&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oos&station=509\" ... #>   ..$ groundwater.level                 : tibble [893 × 11] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer        : int [1:893] 1 2 3 4 9 21 24 25 26 30 ... #>   .. ..$ Bezirk                   : chr [1:893] \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>   .. ..$ Auspraegung              : chr [1:893] \"GW-Stand\" \"GW-Stand\" \"GW-Stand + GW-Güte\" \"GW-Stand\" ... #>   .. ..$ Grundwasserleiter        : chr [1:893] \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>   .. ..$ Grundwasserspannung      : chr [1:893] \"gespannt\" \"ungespannt\" \"gespannt\" \"ungespannt\" ... #>   .. ..$ Datum                    : chr [1:893] \"10.11.2023\" \"10.11.2023\" \"10.11.2023\" \"10.11.2023\" ... #>   .. ..$ Grundwasserstand_m_ue_NHN: num [1:893] 33.6 35 33.6 32.4 37 ... #>   .. ..$ Flur_abstand_m_u_GOK     : chr [1:893] \"keine Angabe\" \"2.61\" \"keine Angabe\" \"7.45\" ... #>   .. ..$ Ganglinie                : chr [1:893] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gws&station=1\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gws&station=2\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gws&station=3\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gws&station=4\" ... #>   .. ..$ Klassifikation           : chr [1:893] \"extrem niedrig\" \"sehr niedrig\" \"niedrig\" \"sehr niedrig\" ... #>   .. ..$ stammdaten_link          : chr [1:893] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gws&station=1\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gws&station=2\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gws&station=3\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gws&station=4\" ... #>   ..$ groundwater.quality               : tibble [213 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: int [1:213] 3 145 149 282 344 358 499 580 604 645 ... #>   .. ..$ Bezirk           : chr [1:213] \"Reinickendorf\" \"Reinickendorf\" \"Mitte\" \"Mitte\" ... #>   .. ..$ Auspraegung      : chr [1:213] \"GW-Stand + GW-Güte 5\" \"GW-Stand + GW-Güte 5\" \"GW-Stand + GW-Güte 5\" \"GW-Stand + GW-Güte 5\" ... #>   .. ..$ Grundwasserleiter: chr [1:213] \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>   .. ..$ Datum            : chr [1:213] \"14.11.2022\" \"27.09.2022\" \"06.12.2022\" \"10.11.2022\" ... #>   .. ..$ Parameterwert    : num [1:213] 12.2 10.9 13.1 12.2 13 12.3 13 13.1 15.6 11.8 ... #>   .. ..$ Einheit          : chr [1:213] \"°C\" \"°C\" \"°C\" \"°C\" ... #>   .. ..$ Ganglinie        : chr [1:213] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gwq&station=3&nstoffid=10\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gwq&station=145&nstoffid=10\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gwq&station=149&nstoffid=10\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gwq&station=282&nstoffid=10\" ... #>   .. ..$ Klassifikation   : chr [1:213] \"keine\" \"keine\" \"keine\" \"keine\" ... #>   .. ..$ stammdaten_link  : chr [1:213] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gwq&station=3\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gwq&station=145\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gwq&station=149\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gwq&station=282\" ... #>  $ overview_df  :Classes 'data.table' and 'data.frame':  1386 obs. of  27 variables: #>   ..$ key                      : chr [1:1386] \"surface_water.water_level\" \"surface_water.water_level\" \"surface_water.water_level\" \"surface_water.water_level\" ... #>   ..$ Messstellennummer        : chr [1:1386] \"5865900\" \"5827103\" \"5870400\" \"5865300\" ... #>   ..$ Messstellenname          : chr [1:1386] \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>   ..$ Gewaesser                : chr [1:1386] \"M.-H.-Grenzgr.\" \"Müggelspree\" \"Griebnitzkanal\" \"Wuhle\" ... #>   ..$ Betreiber                : chr [1:1386] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   ..$ Datum                    : chr [1:1386] \"07.12.2023 06:30\" \"07.12.2023 06:15\" \"07.12.2023 06:15\" \"16.02.2023 13:30\" ... #>   ..$ Wasserstand              : num [1:1386] 6 50 52 34 89 6 24 68 76 57 ... #>   ..$ Einheit                  : chr [1:1386] \"cm\" \"cm\" \"cm\" \"cm\" ... #>   ..$ Ganglinien               : chr [1:1386] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5865900\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5865300\" ... #>   ..$ Klassifikation           : chr [1:1386] \"niedrig\" \"niedrig\" \"niedrig\" \"nicht aktuell\" ... #>   ..$ stammdaten_link          : chr [1:1386] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5865900\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5865300\" ... #>   ..$ Durchfluss               : num [1:1386] NA NA NA NA NA NA NA NA NA NA ... #>   ..$ Ganglinie                : chr [1:1386] NA NA NA NA ... #>   ..$ Wassertemperatur         : chr [1:1386] NA NA NA NA ... #>   ..$ Leitfaehigkeit           : chr [1:1386] NA NA NA NA ... #>   ..$ pHWert                   : chr [1:1386] NA NA NA NA ... #>   ..$ Sauerstoffgehalt         : chr [1:1386] NA NA NA NA ... #>   ..$ Parameterwert            : chr [1:1386] NA NA NA NA ... #>   ..$ Bezirk                   : chr [1:1386] NA NA NA NA ... #>   ..$ Auspraegung              : chr [1:1386] NA NA NA NA ... #>   ..$ Grundwasserleiter        : chr [1:1386] NA NA NA NA ... #>   ..$ Grundwasserspannung      : chr [1:1386] NA NA NA NA ... #>   ..$ Grundwasserstand_m_ue_NHN: num [1:1386] NA NA NA NA NA NA NA NA NA NA ... #>   ..$ Flur_abstand_m_u_GOK     : chr [1:1386] NA NA NA NA ... #>   ..$ water_body               : chr [1:1386] \"surface_water\" \"surface_water\" \"surface_water\" \"surface_water\" ... #>   ..$ variable                 : chr [1:1386] \"water_level\" \"water_level\" \"water_level\" \"water_level\" ... #>   ..$ station_type             : chr [1:1386] \"ows\" \"ows\" \"ows\" \"ows\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ crosstable   : tibble [1,054 × 11] (S3: tbl_df/tbl/data.frame) #>   ..$ Messstellennummer: chr [1:1054] \"5865900\" \"5827103\" \"5870400\" \"5865300\" ... #>   ..$ Messstellenname  : chr [1:1054] \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>   ..$ ows              : chr [1:1054] \"x\" \"x\" \"x\" \"x\" ... #>   ..$ odf              : chr [1:1054] NA \"x\" \"x\" \"x\" ... #>   ..$ owt              : chr [1:1054] NA NA NA \"x\" ... #>   ..$ olf              : chr [1:1054] NA NA NA NA ... #>   ..$ oph              : chr [1:1054] NA NA NA NA ... #>   ..$ oog              : chr [1:1054] NA NA NA NA ... #>   ..$ oos              : chr [1:1054] NA NA NA NA ... #>   ..$ gws              : chr [1:1054] NA NA NA NA ... #>   ..$ gwq              : chr [1:1054] NA NA NA NA ...  write_pretty_json(stations$crosstable, \"stations_crosstable.json\") top_filter_datatable(   stations$crosstable,    \"Data availabilty per monitoring station\" )"},{"path":[]},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"master-data","dir":"Articles","previous_headings":"Stations > GW level","what":"Master data","title":"Tutorial","text":"Overview data GW level stations can requested shown : Master data GW level stations can requested shown : master data GW level stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_gwl_master.json","code":"top_filter_datatable(stations$overview_list$groundwater.level) stations_gwl_master <- wasserportal::get_wasserportal_masters_data(   master_urls = stations$overview_list$groundwater.level$stammdaten_link ) #> Importing 893 station metadata from Wasserportal Berlin ... ok. (6.38 mins)  write_pretty_json(stations_gwl_master, \"stations_gwl_master.json\")  top_filter_datatable(stations_gwl_master)"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"trend-classification","dir":"Articles","previous_headings":"Stations > GW level","what":"Trend Classification","title":"Tutorial","text":"GW level trend classification (provided SenWeb) visualized .","code":""},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"trend-classification-histogramm","dir":"Articles","previous_headings":"Stations > GW level > Trend Classification","what":"Trend Classification Histogramm","title":"Tutorial","text":"58.56 percent considered 806 GW level monitoring stations containing classification data (893 provided SenWeb) indicate normal (extrem niedrig, sehr niedrig, niedrig) GW levels. However, 58.56 percent indicate normal (hoch, sehr hoch, extrem hoch) GW levels.","code":"gwl <- stations$overview_list$groundwater.level %>%    dplyr::mutate(Datum = as.Date(Datum, format = \"%d.%m.%Y\"))  text_low_levels <- c(\"extrem niedrig\", \"sehr niedrig\", \"niedrig\") text_high_levels <- c(\"hoch\", \"sehr hoch\", \"extrem hoch\") levels_ordered <- c(text_low_levels, \"normal\", text_high_levels, \"keine\")  gwl$Klassifikation <- forcats::fct_relevel(gwl$Klassifikation, levels_ordered)  gwl_classified_only <- gwl %>%    dplyr::filter(Klassifikation != \"keine\")  percental_share_low_levels <- kwb.utils::percentage(   sum(gwl_classified_only$Klassifikation %in% text_low_levels),    basis = nrow(gwl_classified_only) )  percental_share_high_levels <- kwb.utils::percentage(   sum(gwl_classified_only$Klassifikation %in% text_high_levels),    basis = nrow(gwl_classified_only) )  title_text <- sprintf(   \"GW level classification (n = %d out of %d have 'classification' data)\",   nrow(gwl_classified_only),    nrow(gwl) )  g1 <- gwl_classified_only %>%    dplyr::count(Klassifikation, Grundwasserspannung) %>%    dplyr::mutate(percental_share = kwb.utils::percentage(n, nrow(gwl))) %>%    ggplot2::ggplot(ggplot2::aes(     x = Klassifikation,     y = percental_share,     fill = Grundwasserspannung   )) +   ggplot2::geom_bar(stat = \"identity\") +    ggplot2::labs(     title = title_text,     x = \"Classification\",     y = \"Percental share (%)\"   ) +   ggplot2::theme_bw()  plotly::ggplotly(g1)"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"trend-classification-map","dir":"Articles","previous_headings":"Stations > GW level > Trend Classification","what":"Trend Classification Map","title":"Tutorial","text":"GW level trend plot also available full html page : https://kwb-r.github.io/wasserportal/map_gwl-trend.html","code":"level_colors <- data.frame(   Klassifikation = levels_ordered,    classi_color = c(     \"darkred\",      \"red\",      \"orange\",      \"green\",      \"lightblue\",      \"blue\",      \"darkblue\",      \"grey\"   ) )  rechtswert <- \"Rechtswert_UTM_33_N\" hochwert <- \"Hochwert_UTM_33_N\"  gwl_classified_only_with_coords <- gwl_classified_only %>%    dplyr::mutate(     Messstellennummer = as.character(Messstellennummer),   ) %>%    dplyr::left_join(     stations_gwl_master %>%       dplyr::select(dplyr::all_of(c(\"Nummer\", rechtswert, hochwert))) %>%        dplyr::rename(Messstellennummer = \"Nummer\"),     by = \"Messstellennummer\"   ) %>%    dplyr::left_join(     level_colors,      by = \"Klassifikation\"   ) %>%    sf::st_as_sf(     coords = c(rechtswert, hochwert),      crs = 25833   ) %>%    sf::st_transform(crs = 4326)  # Create a vector of labels for each row in gwl_classified_only_with_coords labs <- wasserportal::columns_to_labels(   data = gwl_classified_only_with_coords,    columns = c(     \"Messstellennummer\",      \"Grundwasserspannung\",      \"Klassifikation\",      \"Datum\"   ),   fmt = \"<p>%s: %s<\/p>\",   sep = \"\" )  # Print Map gwlmap <- gwl_classified_only_with_coords %>%    leaflet::leaflet() %>%   leaflet::addTiles() %>%    leaflet::addProviderTiles(leaflet::providers$CartoDB.Positron) %>%   leaflet::addCircles(     color = ~classi_color,     label = lapply(labs, htmltools::HTML)   ) %>%    leaflet::addLegend(     position = \"topright\",     colors = level_colors$classi_color,     labels = level_colors$Klassifikation,     title = sprintf(       \"Classification (latest data: %s)\",       max(gwl_classified_only_with_coords$Datum)     )   )  htmlwidgets::saveWidget(   gwlmap,    \"./map_gwl-trend.html\",    title = \"GW level trend\" )  gwlmap"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"download-and-plotting-one-station","dir":"Articles","previous_headings":"Stations > GW level","what":"Download and Plotting One Station","title":"Tutorial","text":"total period available.","code":"station_gwl <- stations$overview_list$groundwater.level[1L, ]  ncols <- 2:ncol(station_gwl)  gw_level <- wasserportal::read_wasserportal_raw_gw(   station = station_gwl$Messstellennummer,    stype = \"gwl\" ) %>%    dplyr::mutate(Label = sprintf(\"%s (%s)\", Parameter, Einheit))  head(gw_level)  g <- gw_level %>%    ggplot2_date_value(col = \"Label\") +   ggplot2::geom_line() +   ggplot2::geom_point() +   ggplot2::theme_bw()  title_subtitle <- create_title_text(x = station_gwl, ncols = ncols)  plotly::ggplotly(g) %>%   plotly::layout(title = list(text = title_subtitle))"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"download-and-plotting-multiple-stations","dir":"Articles","previous_headings":"Stations > GW level","what":"Download and Plotting Multiple Stations","title":"Tutorial","text":"data GW level stations also available CSV format : https://kwb-r.github.io/wasserportal/groundwater_level.csv","code":"debug <- FALSE  gw_level_multi <- data.table::rbindlist(lapply(   stations$overview_list$groundwater.level$Messstellennummer,    function(id) kwb.utils::catAndRun(     sprintf(\"Downloading Messstellennummer == '%s'\", id),      wasserportal::read_wasserportal_raw_gw(station = id, stype = \"gwl\"),      dbg = debug   ) ))  readr::write_csv(gw_level_multi, file = \"groundwater_level.csv\")  # Plot 10 GW level selected_stations <- stations$overview_list$groundwater.level$Messstellennummer[1:10]  g <- gw_level_multi %>%    dplyr::filter(Messstellennummer %in% selected_stations) %>%    dplyr::mutate(Messstellennummer = as.character(Messstellennummer)) %>%    ggplot2_date_value(col = \"Messstellennummer\") +   ggplot2::labs(title = \"GW level (m above NN)\") +   ggplot2::geom_line() +   ggplot2::geom_point() +   ggplot2::theme_bw()  plotly::ggplotly(g)"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"gw-quality","dir":"Articles","previous_headings":"Stations","what":"GW quality","title":"Tutorial","text":"Overview data GW level stations can requested shown : Master data GW quality stations can requested shown : master data GW quality stations also available JSON format : https://kwb-r.github.io/wasserportal/stations_gwq_master.json","code":"stations_gwq <- wasserportal::get_wasserportal_stations_table(   type = overview_options$groundwater$quality )  top_filter_datatable(stations_gwq) stations_gwq_master <- wasserportal::get_wasserportal_masters_data(   master_urls = stations_gwq$stammdaten_link ) #> Importing 213 station metadata from Wasserportal Berlin ... ok. (1.59 mins)  write_pretty_json(stations_gwq_master, \"stations_gwq_master.json\")"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"gw-quality-download-and-plotting-one-station","dir":"Articles","previous_headings":"Stations > GW quality","what":"GW Quality: Download and Plotting One Station","title":"Tutorial","text":"","code":"station_gwq <- stations$overview_list$groundwater.quality[1L, ]  ncols <- 2:ncol(station_gwq)  gw_quality <- wasserportal::read_wasserportal_raw_gw(   station = station_gwq$Messstellennummer,    stype = \"gwq\" )  head(gw_quality)  unique(gw_quality$Parameter)  g <- gw_quality %>%     dplyr::filter(Parameter == \"Sulfat\") %>%    ggplot2_date_value(col = \"Parameter\") +   ggplot2::geom_line() +   ggplot2::geom_point() +   ggplot2::theme_bw()  title_subtitle <- create_title_text(x = station_gwq, ncols = ncols)  plotly::ggplotly(g) %>%   plotly::layout(title = list(text = title_subtitle))"},{"path":"https://kwb-r.github.io/wasserportal/articles/tutorial.html","id":"gw-quality-download-and-plotting-multiple-stations","dir":"Articles","previous_headings":"Stations > GW quality","what":"GW Quality: Download and Plotting Multiple Stations","title":"Tutorial","text":"data GW quality stations also available CSV format : https://kwb-r.github.io/wasserportal/groundwater_quality.csv","code":"debug <- FALSE  gw_quality_multi <- data.table::rbindlist(lapply(   stations$overview_list$groundwater.quality$Messstellennummer,    function(id) kwb.utils::catAndRun(     sprintf(\"Downloading Messstellennummer == '%s'\", id),      wasserportal::read_wasserportal_raw_gw(station = id, stype = \"gwq\"),      dbg = debug   ) ))  readr::write_csv(gw_quality_multi, \"groundwater_quality.csv\")  # Plot 10 GW quality  selected_stations <- stations$overview_list$groundwater.quality$Messstellennummer[1:10]  g <- gw_quality_multi %>%    dplyr::filter(Messstellennummer %in% selected_stations) %>%    dplyr::mutate(Messstellennummer = as.character(Messstellennummer)) %>%    dplyr::filter(Parameter == \"Sulfat\") %>%    ggplot2_date_value(col = \"Messstellennummer\") +   ggplot2::labs(title = \"GW quality (Sulfat)\") +   ggplot2::geom_line() +   ggplot2::geom_point() +   ggplot2::theme_bw()  plotly::ggplotly(g)"},{"path":"https://kwb-r.github.io/wasserportal/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hauke Sonnenberg. Author. Michael Rustler. Author, maintainer. . Funder. . Funder. . Funder. . Copyright holder.","code":""},{"path":"https://kwb-r.github.io/wasserportal/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sonnenberg H, Rustler M (2023). wasserportal: R Package Functions Scraping Data Wasserportal Berlin. R package version 0.3.0, https://github.com/KWB-R/wasserportal.","code":"@Manual{,   title = {wasserportal: R Package with Functions for Scraping Data of Wasserportal Berlin},   author = {Hauke Sonnenberg and Michael Rustler},   year = {2023},   note = {R package version 0.3.0},   url = {https://github.com/KWB-R/wasserportal}, }"},{"path":"https://kwb-r.github.io/wasserportal/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Package with Functions for Scraping Data of\n    Wasserportal Berlin","text":"installing latest release R package run following code :","code":"# Enable repository from kwb-r options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))    # Download and install wasserportal in R install.packages('wasserportal')  # Browse the wasserportal manual pages help(package = 'wasserportal')"},{"path":"https://kwb-r.github.io/wasserportal/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"R Package with Functions for Scraping Data of\n    Wasserportal Berlin","text":"Checkout Tutorial article use R package scraping data Wasserportal Berlin, performed automatically every day 5 UTC using GitHub actions. data can used directly within R shown Groundwater article.","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/base_url_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: base url for download — base_url_download","title":"Helper function: base url for download — base_url_download","text":"Helper function: base url download","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/base_url_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: base url for download — base_url_download","text":"","code":"base_url_download()"},{"path":"https://kwb-r.github.io/wasserportal/reference/base_url_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: base url for download — base_url_download","text":"base url download csv/zip files prepared R package","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/columns_to_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Text Labels from Data Frame Columns — columns_to_labels","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"Create Text Labels Data Frame Columns","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/columns_to_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"","code":"columns_to_labels(data, columns, fmt = \"%s: %s\", sep = \", \")"},{"path":"https://kwb-r.github.io/wasserportal/reference/columns_to_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"data data frame columns names columns create labels fmt format string passed sprintf sep separator (default: \", \")","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/columns_to_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"vector character many elements rows data","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/columns_to_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Text Labels from Data Frame Columns — columns_to_labels","text":"","code":"data <- data.frame(number = 1:2, name = c(\"adam\", \"eva\"), value = 3:4) columns <- c(\"name\", \"value\") columns_to_labels(data, columns) #> [1] \"name: adam, value: 3\" \"name: eva, value: 4\"  columns_to_labels(data, columns, fmt = \"<p>%s: %s<\/p>\", sep = \"\") #> [1] \"<p>name: adam<\/p><p>value: 3<\/p>\" \"<p>name: eva<\/p><p>value: 4<\/p>\""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_daily_surfacewater_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Daily Surfacewater Data: wrapper to scrape daily surface water data — get_daily_surfacewater_data","title":"Get Daily Surfacewater Data: wrapper to scrape daily surface water data — get_daily_surfacewater_data","text":"Get Daily Surfacewater Data: wrapper scrape daily surface water data","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_daily_surfacewater_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Daily Surfacewater Data: wrapper to scrape daily surface water data — get_daily_surfacewater_data","text":"","code":"get_daily_surfacewater_data(   stations,   variables = get_surfacewater_variables(),   list2df = FALSE )"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_daily_surfacewater_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Daily Surfacewater Data: wrapper to scrape daily surface water data — get_daily_surfacewater_data","text":"stations stations retrieved get_stations variables variables retrieved get_surfacewater_variables list2df convert result list data frame (default: FALSE)","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_daily_surfacewater_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Daily Surfacewater Data: wrapper to scrape daily surface water data — get_daily_surfacewater_data","text":"list data frame available data Wasserportal","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_daily_surfacewater_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Daily Surfacewater Data: wrapper to scrape daily surface water data — get_daily_surfacewater_data","text":"","code":"if (FALSE) { stations <- wasserportal::get_stations() variables <- wasserportal::get_surfacewater_variables() variables sw_data_daily <- wasserportal::get_daily_surfacewater_data(stations, variables) }"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_groundwater_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Groundwater Data — get_groundwater_data","title":"Get Groundwater Data — get_groundwater_data","text":"wrapper function scrape available raw data, .e. groundwater level quality data save list","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_groundwater_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Groundwater Data — get_groundwater_data","text":"","code":"get_groundwater_data(   stations,   groundwater_options = get_groundwater_options(),   debug = TRUE )"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_groundwater_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Groundwater Data — get_groundwater_data","text":"stations stations list retrieved get_stations groundwater_options retrieved get_groundwater_options debug print debug messages (default: TRUE)","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_groundwater_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Groundwater Data — get_groundwater_data","text":"list elements \"groundwater.level\" \"groundwater.quality\" data frames","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_groundwater_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Groundwater Data — get_groundwater_data","text":"","code":"if (FALSE) { stations <- wasserportal::get_stations() gw_data_list <- get_groundwater_data(stations) str(gw_data_list) }"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_groundwater_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: get groundwater options — get_groundwater_options","title":"Helper function: get groundwater options — get_groundwater_options","text":"Helper function: get groundwater options","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_groundwater_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: get groundwater options — get_groundwater_options","text":"","code":"get_groundwater_options()"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_groundwater_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: get groundwater options — get_groundwater_options","text":"return available groundwater data options prepare used input get_groundwater_data","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_groundwater_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function: get groundwater options — get_groundwater_options","text":"","code":"get_groundwater_options() #>   groundwater.level groundwater.quality  #>               \"gwl\"               \"gwq\""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_overview_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Berlin: get overview options for stations — get_overview_options","title":"Wasserportal Berlin: get overview options for stations — get_overview_options","text":"Wasserportal Berlin: get overview options stations","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_overview_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Berlin: get overview options for stations — get_overview_options","text":"","code":"get_overview_options()"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_overview_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Berlin: get overview options for stations — get_overview_options","text":"list shortcuts station overview tables (wasserportal.berlin.de/messwerte.php?anzeige=tabelle&thema=<shortcut>)","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_overview_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Berlin: get overview options for stations — get_overview_options","text":"","code":"get_overview_options() #> $surface_water #> $surface_water$water_level #> [1] \"ows\" #>  #> $surface_water$flow #> [1] \"odf\" #>  #> $surface_water$temperature #> [1] \"owt\" #>  #> $surface_water$conductivity #> [1] \"olf\" #>  #> $surface_water$ph #> [1] \"oph\" #>  #> $surface_water$oxygen_concentration #> [1] \"oog\" #>  #> $surface_water$oxygen_saturation #> [1] \"oos\" #>  #>  #> $groundwater #> $groundwater$level #> [1] \"gws\" #>  #> $groundwater$quality #> [1] \"gwq\" #>  #>"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_station_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: get available station variables — get_station_variables","title":"Helper function: get available station variables — get_station_variables","text":"Helper function: get available station variables","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_station_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: get available station variables — get_station_variables","text":"","code":"get_station_variables(station_df)"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_station_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: get available station variables — get_station_variables","text":"station_df station_df","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_station_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: get available station variables — get_station_variables","text":"returns names available variables station","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Stations — get_stations","title":"Get Stations — get_stations","text":"Get Stations","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Stations — get_stations","text":"","code":"get_stations(run_parallel = TRUE, n_cores = parallel::detectCores() - 1L)"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Stations — get_stations","text":"run_parallel default: TRUE n_cores number cores use run_parallel = TRUE. Default: one less detected number cores.","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_stations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Stations — get_stations","text":"list general station \"overview\" (either list \"overview_list\" data.frame \"overview_df\") crosstable information parameters available per station (\"x\" available, NA )","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_stations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Stations — get_stations","text":"","code":"stations <- wasserportal::get_stations(n_cores = 2L) #> Importing 9 station overviews from Wasserportal Berlin ... ok. (11.04 secs)  str(stations) #> List of 3 #>  $ overview_list:List of 9 #>   ..$ surface_water.water_level         : tibble [108 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: int [1:108] 5865900 5827103 5870400 5865300 5819900 5864801 5861101 5800107 5800317 5867003 ... #>   .. ..$ Messstellenname  : chr [1:108] \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>   .. ..$ Gewaesser        : chr [1:108] \"M.-H.-Grenzgr.\" \"Müggelspree\" \"Griebnitzkanal\" \"Wuhle\" ... #>   .. ..$ Betreiber        : chr [1:108] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:108] \"07.12.2023 06:00\" \"07.12.2023 06:00\" \"07.12.2023 06:00\" \"16.02.2023 13:30\" ... #>   .. ..$ Wasserstand      : num [1:108] 6 50 52 34 89 6 24 68 76 57 ... #>   .. ..$ Einheit          : chr [1:108] \"cm\" \"cm\" \"cm\" \"cm\" ... #>   .. ..$ Ganglinien       : chr [1:108] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5865900\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5865300\" ... #>   .. ..$ Klassifikation   : chr [1:108] \"niedrig\" \"niedrig\" \"niedrig\" \"nicht aktuell\" ... #>   .. ..$ stammdaten_link  : chr [1:108] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5865900\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5865300\" ... #>   ..$ surface_water.flow                : tibble [39 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: int [1:39] 5827103 5870400 5865300 5864801 5867401 5867900 5827101 5870100 5826701 5862811 ... #>   .. ..$ Messstellenname  : chr [1:39] \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" \"Am Kienberg\" ... #>   .. ..$ Gewaesser        : chr [1:39] \"Müggelspree\" \"Griebnitzkanal\" \"Wuhle\" \"Hellersdorfer Graben\" ... #>   .. ..$ Betreiber        : chr [1:39] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:39] \"01.05.2022 00:00\" \"\" \"16.02.2023 13:30\" \"07.12.2023 06:00\" ... #>   .. ..$ Durchfluss       : num [1:39] 4.08 NA 0.165 0.007 1.43 0.286 5.92 3.54 8.73 13.7 ... #>   .. ..$ Einheit          : chr [1:39] \"m³/s\" \"m³/s\" \"m³/s\" \"m³/s\" ... #>   .. ..$ Ganglinie        : chr [1:39] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=odf&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=odf&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=odf&station=5865300\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=odf&station=5864801\" ... #>   .. ..$ Klassifikation   : chr [1:39] \"nicht aktuell\" \"nicht aktuell\" \"nicht aktuell\" \"keine\" ... #>   .. ..$ stammdaten_link  : chr [1:39] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=odf&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=odf&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=odf&station=5865300\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=odf&station=5864801\" ... #>   ..$ surface_water.temperature         : tibble [65 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:65] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:65] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:65] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:65] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:65] \"27.10.2023 09:30\" \"27.10.2023 10:15\" \"27.10.2023 10:00\" \"27.10.2023 09:15\" ... #>   .. ..$ Wassertemperatur : chr [1:65] \"12.20\" \"12.04\" \"12.05\" \"11.97\" ... #>   .. ..$ Einheit          : chr [1:65] \"°C\" \"°C\" \"°C\" \"°C\" ... #>   .. ..$ Ganglinie        : chr [1:65] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=owt&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=owt&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=owt&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=owt&station=509\" ... #>   .. ..$ Klassifikation   : chr [1:65] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   .. ..$ stammdaten_link  : chr [1:65] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=owt&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=owt&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=owt&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=owt&station=509\" ... #>   ..$ surface_water.conductivity        : tibble [17 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:17] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:17] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:17] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:17] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:17] \"27.10.2023 09:30\" \"27.10.2023 10:15\" \"27.10.2023 10:00\" \"27.10.2023 09:15\" ... #>   .. ..$ Leitfaehigkeit   : chr [1:17] \"806\" \"798\" \"804\" \"810\" ... #>   .. ..$ Einheit          : chr [1:17] \"µS/cm\" \"µS/cm\" \"µS/cm\" \"µS/cm\" ... #>   .. ..$ Ganglinie        : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=olf&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=olf&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=olf&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=olf&station=509\" ... #>   .. ..$ Klassifikation   : chr [1:17] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   .. ..$ stammdaten_link  : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=olf&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=olf&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=olf&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=olf&station=509\" ... #>   ..$ surface_water.ph                  : tibble [17 × 9] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:17] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:17] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:17] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:17] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:17] \"27.10.2023 09:30\" \"27.10.2023 10:15\" \"27.10.2023 10:00\" \"27.10.2023 09:15\" ... #>   .. ..$ pHWert           : chr [1:17] \"7.73\" \"7.64\" \"7.40\" \"7.51\" ... #>   .. ..$ Ganglinie        : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oph&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oph&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oph&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oph&station=509\" ... #>   .. ..$ Klassifikation   : chr [1:17] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   .. ..$ stammdaten_link  : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oph&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oph&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oph&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oph&station=509\" ... #>   ..$ surface_water.oxygen_concentration: tibble [17 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:17] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:17] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:17] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:17] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:17] \"27.10.2023 09:30\" \"27.10.2023 10:15\" \"27.10.2023 10:00\" \"27.10.2023 09:15\" ... #>   .. ..$ Sauerstoffgehalt : chr [1:17] \"7.67\" \"7.53\" \"7.33\" \"4.00\" ... #>   .. ..$ Einheit          : chr [1:17] \"mg/l\" \"mg/l\" \"mg/l\" \"mg/l\" ... #>   .. ..$ Ganglinie        : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oog&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oog&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oog&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oog&station=509\" ... #>   .. ..$ Klassifikation   : chr [1:17] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   .. ..$ stammdaten_link  : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oog&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oog&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oog&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oog&station=509\" ... #>   ..$ surface_water.oxygen_saturation   : tibble [17 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: chr [1:17] \"601\" \"151\" \"153\" \"509\" ... #>   .. ..$ Messstellenname  : chr [1:17] \"MPS Berlin-Spandauer-Schifffahrtskanal\" \"MPS Caprivibrücke\" \"MPS Charlottenburg\" \"MPS Landwehrkanal\" ... #>   .. ..$ Gewaesser        : chr [1:17] \"Berlin-Spandauer-Schifffahrtskanal\" \"Spree\" \"Spree\" \"Landwehrkanal\" ... #>   .. ..$ Betreiber        : chr [1:17] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   .. ..$ Datum            : chr [1:17] \"27.10.2023 09:30\" \"27.10.2023 10:15\" \"27.10.2023 10:00\" \"27.10.2023 09:15\" ... #>   .. ..$ Parameterwert    : chr [1:17] \"71.71\" \"70.15\" \"68.30\" \"37.20\" ... #>   .. ..$ Einheit          : chr [1:17] \"%\" \"%\" \"%\" \"%\" ... #>   .. ..$ Ganglinie        : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oos&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oos&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oos&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=oos&station=509\" ... #>   .. ..$ Klassifikation   : chr [1:17] \"inaktiv\" \"inaktiv\" \"inaktiv\" \"inaktiv\" ... #>   .. ..$ stammdaten_link  : chr [1:17] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oos&station=601\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oos&station=151\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oos&station=153\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=oos&station=509\" ... #>   ..$ groundwater.level                 : tibble [893 × 11] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer        : int [1:893] 1 2 3 4 9 21 24 25 26 30 ... #>   .. ..$ Bezirk                   : chr [1:893] \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" \"Reinickendorf\" ... #>   .. ..$ Auspraegung              : chr [1:893] \"GW-Stand\" \"GW-Stand\" \"GW-Stand + GW-Güte\" \"GW-Stand\" ... #>   .. ..$ Grundwasserleiter        : chr [1:893] \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>   .. ..$ Grundwasserspannung      : chr [1:893] \"gespannt\" \"ungespannt\" \"gespannt\" \"ungespannt\" ... #>   .. ..$ Datum                    : chr [1:893] \"10.11.2023\" \"10.11.2023\" \"10.11.2023\" \"10.11.2023\" ... #>   .. ..$ Grundwasserstand_m_ue_NHN: num [1:893] 33.6 35 33.6 32.4 37 ... #>   .. ..$ Flur_abstand_m_u_GOK     : chr [1:893] \"keine Angabe\" \"2.61\" \"keine Angabe\" \"7.45\" ... #>   .. ..$ Ganglinie                : chr [1:893] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gws&station=1\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gws&station=2\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gws&station=3\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gws&station=4\" ... #>   .. ..$ Klassifikation           : chr [1:893] \"extrem niedrig\" \"sehr niedrig\" \"niedrig\" \"sehr niedrig\" ... #>   .. ..$ stammdaten_link          : chr [1:893] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gws&station=1\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gws&station=2\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gws&station=3\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gws&station=4\" ... #>   ..$ groundwater.quality               : tibble [213 × 10] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Messstellennummer: int [1:213] 3 145 149 282 344 358 499 580 604 645 ... #>   .. ..$ Bezirk           : chr [1:213] \"Reinickendorf\" \"Reinickendorf\" \"Mitte\" \"Mitte\" ... #>   .. ..$ Auspraegung      : chr [1:213] \"GW-Stand + GW-Güte 5\" \"GW-Stand + GW-Güte 5\" \"GW-Stand + GW-Güte 5\" \"GW-Stand + GW-Güte 5\" ... #>   .. ..$ Grundwasserleiter: chr [1:213] \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" \"Hauptgrundwasserleiter (GWL 1.3 + 2)\" ... #>   .. ..$ Datum            : chr [1:213] \"14.11.2022\" \"27.09.2022\" \"06.12.2022\" \"10.11.2022\" ... #>   .. ..$ Parameterwert    : num [1:213] 12.2 10.9 13.1 12.2 13 12.3 13 13.1 15.6 11.8 ... #>   .. ..$ Einheit          : chr [1:213] \"°C\" \"°C\" \"°C\" \"°C\" ... #>   .. ..$ Ganglinie        : chr [1:213] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gwq&station=3&nstoffid=10\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gwq&station=145&nstoffid=10\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gwq&station=149&nstoffid=10\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=gwq&station=282&nstoffid=10\" ... #>   .. ..$ Klassifikation   : chr [1:213] \"keine\" \"keine\" \"keine\" \"keine\" ... #>   .. ..$ stammdaten_link  : chr [1:213] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gwq&station=3\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gwq&station=145\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gwq&station=149\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=gwq&station=282\" ... #>  $ overview_df  :Classes ‘data.table’ and 'data.frame':\t1386 obs. of  27 variables: #>   ..$ key                      : chr [1:1386] \"surface_water.water_level\" \"surface_water.water_level\" \"surface_water.water_level\" \"surface_water.water_level\" ... #>   ..$ Messstellennummer        : chr [1:1386] \"5865900\" \"5827103\" \"5870400\" \"5865300\" ... #>   ..$ Messstellenname          : chr [1:1386] \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>   ..$ Gewaesser                : chr [1:1386] \"M.-H.-Grenzgr.\" \"Müggelspree\" \"Griebnitzkanal\" \"Wuhle\" ... #>   ..$ Betreiber                : chr [1:1386] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>   ..$ Datum                    : chr [1:1386] \"07.12.2023 06:00\" \"07.12.2023 06:00\" \"07.12.2023 06:00\" \"16.02.2023 13:30\" ... #>   ..$ Wasserstand              : num [1:1386] 6 50 52 34 89 6 24 68 76 57 ... #>   ..$ Einheit                  : chr [1:1386] \"cm\" \"cm\" \"cm\" \"cm\" ... #>   ..$ Ganglinien               : chr [1:1386] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5865900\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5865300\" ... #>   ..$ Klassifikation           : chr [1:1386] \"niedrig\" \"niedrig\" \"niedrig\" \"nicht aktuell\" ... #>   ..$ stammdaten_link          : chr [1:1386] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5865900\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5865300\" ... #>   ..$ Durchfluss               : num [1:1386] NA NA NA NA NA NA NA NA NA NA ... #>   ..$ Ganglinie                : chr [1:1386] NA NA NA NA ... #>   ..$ Wassertemperatur         : chr [1:1386] NA NA NA NA ... #>   ..$ Leitfaehigkeit           : chr [1:1386] NA NA NA NA ... #>   ..$ pHWert                   : chr [1:1386] NA NA NA NA ... #>   ..$ Sauerstoffgehalt         : chr [1:1386] NA NA NA NA ... #>   ..$ Parameterwert            : chr [1:1386] NA NA NA NA ... #>   ..$ Bezirk                   : chr [1:1386] NA NA NA NA ... #>   ..$ Auspraegung              : chr [1:1386] NA NA NA NA ... #>   ..$ Grundwasserleiter        : chr [1:1386] NA NA NA NA ... #>   ..$ Grundwasserspannung      : chr [1:1386] NA NA NA NA ... #>   ..$ Grundwasserstand_m_ue_NHN: num [1:1386] NA NA NA NA NA NA NA NA NA NA ... #>   ..$ Flur_abstand_m_u_GOK     : chr [1:1386] NA NA NA NA ... #>   ..$ water_body               : chr [1:1386] \"surface_water\" \"surface_water\" \"surface_water\" \"surface_water\" ... #>   ..$ variable                 : chr [1:1386] \"water_level\" \"water_level\" \"water_level\" \"water_level\" ... #>   ..$ station_type             : chr [1:1386] \"ows\" \"ows\" \"ows\" \"ows\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ crosstable   : tibble [1,054 × 11] (S3: tbl_df/tbl/data.frame) #>   ..$ Messstellennummer: chr [1:1054] \"5865900\" \"5827103\" \"5870400\" \"5865300\" ... #>   ..$ Messstellenname  : chr [1:1054] \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>   ..$ ows              : chr [1:1054] \"x\" \"x\" \"x\" \"x\" ... #>   ..$ odf              : chr [1:1054] NA \"x\" \"x\" \"x\" ... #>   ..$ owt              : chr [1:1054] NA NA NA \"x\" ... #>   ..$ olf              : chr [1:1054] NA NA NA NA ... #>   ..$ oph              : chr [1:1054] NA NA NA NA ... #>   ..$ oog              : chr [1:1054] NA NA NA NA ... #>   ..$ oos              : chr [1:1054] NA NA NA NA ... #>   ..$ gws              : chr [1:1054] NA NA NA NA ... #>   ..$ gwq              : chr [1:1054] NA NA NA NA ..."},{"path":"https://kwb-r.github.io/wasserportal/reference/get_surfacewater_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: get surface water variables — get_surfacewater_variables","title":"Helper function: get surface water variables — get_surfacewater_variables","text":"Helper function: get surface water variables","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_surfacewater_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: get surface water variables — get_surfacewater_variables","text":"","code":"get_surfacewater_variables()"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_surfacewater_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: get surface water variables — get_surfacewater_variables","text":"vector surface water variables","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_master_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"Wasserportal Berlin: get master data single station","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_master_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"","code":"get_wasserportal_master_data(master_url)"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_master_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"master_url url master data single station retrieved get_wasserportal_stations_table","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_master_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"data frame metadata selected station","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_master_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Berlin: get master data for a single station — get_wasserportal_master_data","text":"","code":"if (FALSE) { stations <- wasserportal::get_stations()  ## GW Station master_url <- stations$overview_list$groundwater.level$stammdaten_link[1] get_wasserportal_master_data(master_url)  ## SW Station ### Reduce  to monitoring stations maintained by Berlin master_urls <- stations$overview_list$surface_water.water_level %>% dplyr::filter(.data$Betreiber == \"Land Berlin\") %>% dplyr::pull(.data$stammdaten_link) get_wasserportal_master_data(master_urls[1]) }"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_masters_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"Wasserportal Berlin: get master data multiple stations","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_masters_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"","code":"get_wasserportal_masters_data(master_urls, run_parallel = TRUE)"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_masters_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"master_urls urls master data retrieved get_stations one  \"overview_list\" sublist elements column name \"stammdaten_link\" run_parallel default: TRUE","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_masters_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"data frame metadata selected master urls","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_masters_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Berlin: get master data for a multiple stations — get_wasserportal_masters_data","text":"","code":"if (FALSE) { stations <- wasserportal::get_stations() ### Reduce  to monitoring stations maintained by Berlin master_urls <- stations$overview_list$surface_water.water_level %>% dplyr::filter(.data$Betreiber == \"Land Berlin\") %>% dplyr::pull(.data$stammdaten_link)  system.time(master_parallel <- get_wasserportal_masters_data(   master_urls ))  system.time(master_sequential <- get_wasserportal_masters_data(   master_urls,   run_parallel = FALSE )) }"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Names and IDs of the Stations of wasserportal.berlin.de — get_wasserportal_stations","title":"Get Names and IDs of the Stations of wasserportal.berlin.de — get_wasserportal_stations","text":"Get Names IDs Stations wasserportal.berlin.de","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Names and IDs of the Stations of wasserportal.berlin.de — get_wasserportal_stations","text":"","code":"get_wasserportal_stations(type = \"quality\")"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Names and IDs of the Stations of wasserportal.berlin.de — get_wasserportal_stations","text":"type one \"quality\", \"level\", \"flow\"","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"Wasserportal Berlin: get stations overview table","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"","code":"get_wasserportal_stations_table(   type = get_overview_options()$groundwater$level,   url_wasserportal = wasserportal_base_url() )"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"type type stations table retrieve. Valid options defined get_overview_options, default: get_overview_options()$groundwater$level url_wasserportal base url Wasserportal berlin (default: wasserportal_base_url","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"data frame master data selected monitoring stations","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_stations_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Berlin: get stations overview table — get_wasserportal_stations_table","text":"","code":"types <- wasserportal::get_overview_options() str(types) #> List of 2 #>  $ surface_water:List of 7 #>   ..$ water_level         : chr \"ows\" #>   ..$ flow                : chr \"odf\" #>   ..$ temperature         : chr \"owt\" #>   ..$ conductivity        : chr \"olf\" #>   ..$ ph                  : chr \"oph\" #>   ..$ oxygen_concentration: chr \"oog\" #>   ..$ oxygen_saturation   : chr \"oos\" #>  $ groundwater  :List of 2 #>   ..$ level  : chr \"gws\" #>   ..$ quality: chr \"gwq\" sw_l <- wasserportal::get_wasserportal_stations_table(type = types$surface_water$water_level) str(sw_l) #> tibble [108 × 10] (S3: tbl_df/tbl/data.frame) #>  $ Messstellennummer: int [1:108] 5865900 5827103 5870400 5865300 5819900 5864801 5861101 5800107 5800317 5867003 ... #>  $ Messstellenname  : chr [1:108] \"Allee der Kosmonauten\" \"Allendestraße\" \"Alsenbrücke\" \"Am Bahndamm\" ... #>  $ Gewaesser        : chr [1:108] \"M.-H.-Grenzgr.\" \"Müggelspree\" \"Griebnitzkanal\" \"Wuhle\" ... #>  $ Betreiber        : chr [1:108] \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" \"Land Berlin\" ... #>  $ Datum            : chr [1:108] \"07.12.2023 06:00\" \"07.12.2023 06:00\" \"07.12.2023 06:00\" \"16.02.2023 13:30\" ... #>  $ Wasserstand      : num [1:108] 6 50 52 34 89 6 24 68 76 57 ... #>  $ Einheit          : chr [1:108] \"cm\" \"cm\" \"cm\" \"cm\" ... #>  $ Ganglinien       : chr [1:108] \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5865900\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=g&thema=ows&station=5865300\" ... #>  $ Klassifikation   : chr [1:108] \"niedrig\" \"niedrig\" \"niedrig\" \"nicht aktuell\" ... #>  $ stammdaten_link  : chr [1:108] \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5865900\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5827103\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5870400\" \"https://wasserportal.berlin.de/station.php?anzeige=i&thema=ows&station=5865300\" ..."},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Names and IDs of the Variables of wasserportal.berlin.de — get_wasserportal_variables","title":"Get Names and IDs of the Variables of wasserportal.berlin.de — get_wasserportal_variables","text":"Get Names IDs Variables wasserportal.berlin.de","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Names and IDs of the Variables of wasserportal.berlin.de — get_wasserportal_variables","text":"","code":"get_wasserportal_variables(station = NULL)"},{"path":"https://kwb-r.github.io/wasserportal/reference/get_wasserportal_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Names and IDs of the Variables of wasserportal.berlin.de — get_wasserportal_variables","text":"station station id. given, variables available given station returned.","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/list_data_to_csv_or_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: list data to csv or zip — list_data_to_csv_or_zip","title":"Helper function: list data to csv or zip — list_data_to_csv_or_zip","text":"Helper function: list data csv zip","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/list_data_to_csv_or_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: list data to csv or zip — list_data_to_csv_or_zip","text":"","code":"list_data_to_csv_or_zip(data_list, file_prefix, to_zip)"},{"path":"https://kwb-r.github.io/wasserportal/reference/list_data_to_csv_or_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: list data to csv or zip — list_data_to_csv_or_zip","text":"data_list data list form file_prefix file prefix to_zip whether convert zip file","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/list_data_to_csv_or_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: list data to csv or zip — list_data_to_csv_or_zip","text":"loops list data frames uses list names filenames","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/list_masters_data_to_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: list masters data to csv — list_masters_data_to_csv","title":"Helper function: list masters data to csv — list_masters_data_to_csv","text":"Helper function: list masters data csv","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/list_masters_data_to_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: list masters data to csv — list_masters_data_to_csv","text":"","code":"list_masters_data_to_csv(masters_data_list)"},{"path":"https://kwb-r.github.io/wasserportal/reference/list_masters_data_to_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: list masters data to csv — list_masters_data_to_csv","text":"masters_data_list masters data list form retrieved get_stations sublist element \"overview_list\"","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/list_masters_data_to_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: list masters data to csv — list_masters_data_to_csv","text":"loops list data frames uses list names filenames","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/list_masters_data_to_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function: list masters data to csv — list_masters_data_to_csv","text":"","code":"if (FALSE) { stations <- wasserportal::get_stations() masters_data_csv_files <- wasserportal:list_masters_data_to_csv(stations$overview_list) masters_data_csv_files }"},{"path":"https://kwb-r.github.io/wasserportal/reference/list_timeseries_data_to_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: list timeseries data to zip — list_timeseries_data_to_zip","title":"Helper function: list timeseries data to zip — list_timeseries_data_to_zip","text":"Helper function: list timeseries data zip","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/list_timeseries_data_to_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: list timeseries data to zip — list_timeseries_data_to_zip","text":"","code":"list_timeseries_data_to_zip(timeseries_data_list)"},{"path":"https://kwb-r.github.io/wasserportal/reference/list_timeseries_data_to_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: list timeseries data to zip — list_timeseries_data_to_zip","text":"timeseries_data_list time series data list form retrieved get_groundwater_data","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/list_timeseries_data_to_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: list timeseries data to zip — list_timeseries_data_to_zip","text":"loops list data frames uses list names filenames","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/list_timeseries_data_to_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function: list timeseries data to zip — list_timeseries_data_to_zip","text":"","code":"if (FALSE) { stations <- wasserportal::get_stations() # Groundwater Time Series gw_tsdata_list <- wasserportal::get_groundwater_data(stations) gw_tsdata_files <- wasserportal::list_timeseries_data_to_zip(gw_tsdata_list) # Surface Water Time Series sw_tsdata_list <- wasserportal::get_daily_surfacewater_data(stations) sw_tsdata_files <- wasserportal::list_timeseries_data_to_zip(sw_tsdata_list) }"},{"path":"https://kwb-r.github.io/wasserportal/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://kwb-r.github.io/wasserportal/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to read CSV — read","title":"Helper function to read CSV — read","text":"Helper function read CSV","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to read CSV — read","text":"","code":"read(text, ...)"},{"path":"https://kwb-r.github.io/wasserportal/reference/read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to read CSV — read","text":"text text ... ... additional arguments passed read.table","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to read CSV — read","text":"data frame values","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/readPackageFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CSV File from Package's ","title":"Read CSV File from Package's ","text":"Read CSV File Package's \"extdata\" Folder","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/readPackageFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CSV File from Package's ","text":"","code":"readPackageFile(file, ...)"},{"path":"https://kwb-r.github.io/wasserportal/reference/readPackageFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CSV File from Package's ","text":"file file name (without path) ... additional arguments passed read.csv","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/readPackageFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CSV File from Package's ","text":"data frame representing content file","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"function downloads reads CSV files wasserportal.berlin.de.","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"","code":"read_wasserportal(   station,   variables = NULL,   from_date = as.character(Sys.Date() - 90L),   type = \"single\",   include_raw_time = FALSE,   stations_crosstable )"},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"station station number, returned get_stations variables vector variable identifiers, returned get_station_variables from_date Date object (string format \"yyyy-mm-dd\" can converted Date object representing first day request data. Default: .character(Sys.Date() - 90L) type one \"single\" (default), \"daily\", \"monthly\" include_raw_time TRUE original time column column corrected winter time included output. default FALSE. stations_crosstable sublist crosstable retrieved get_stations .e. get_stations()$crosstable","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"data frame read CSV file download provides. IMPORTANT: yet clear interpret timestamp, see example","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"original timestamps (column timestamps_raw example ) plausible, e.g. \"31.03.2019 03:00\" appears twice! corrected (column timestamp_corr) represent plausible sequence timestamps Berlin Normal Time (UTC+01) Finally, valid POSIXct timestamp timezone \"Berlin/Europe\" (UTC+01 winter, UTC+02 summer) created, together additional information UTC offset (column UTCOffset, 1 winter, 2 summer).","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Read Data from wasserportal.berlin.de — read_wasserportal","text":"","code":"if (FALSE) { # Get a list of available water quality stations and variables stations <- wasserportal::get_stations() stations_crosstable <- stations$crosstable  # Set the start date from_date <- \"2021-03-01\"  # Read the timeseries (multiple variables for one station) water_quality <- wasserportal::read_wasserportal(   station = stations_crosstable$Messstellennummer[1],   from_date = from_date,   include_raw_time = TRUE,   stations_crosstable = stations_crosstable )  # Look at the first few records head(water_quality)  # Check the metadata #kwb.utils::getAttribute(water_quality, \"metadata\")  # Set missing values to NA water_quality[water_quality == -777] <- NA  # Look at the first few records again head(water_quality)  ### How was the original timestamp interpreted?  # Determine the days at which summer time starts and ends, respectively from_year <- as.integer(substr(from_date, 1L, 4L)) switches <- kwb.datetime::date_range_CEST(from_year)  # Reformat to dd.mm.yyyy switches <- kwb.datetime::reformatTimestamp(switches, \"%Y-%m-%d\", \"%d.%m.%Y\")  # Define a pattern to look for timestamps \"around\" the switches pattern <- paste(switches, \"0[1-4]\", collapse = \"|\")  # Look at the data for these timestamps water_quality[grepl(pattern, water_quality$timestamp_raw), ]  # The original timestamps (timestamps_raw) were not all plausible, e.g. # for March 2019. This seems to have been fixed by the \"wasserportal\"! sum(water_quality$timestamp_raw != water_quality$timestamp_corr) }"},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Wasserportal Raw — read_wasserportal_raw","title":"Read Wasserportal Raw — read_wasserportal_raw","text":"Read Wasserportal Raw","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Wasserportal Raw — read_wasserportal_raw","text":"","code":"read_wasserportal_raw(   variable,   station,   from_date,   type = \"single\",   include_raw_time = FALSE,   handle = NULL,   stations_crosstable,   api_version = 2L )"},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Wasserportal Raw — read_wasserportal_raw","text":"variable variable station station id from_date start date type one \"single\", \"daily\", \"monthly\" (default: \"single\") include_raw_time TRUE FALSE (default: FALSE) handle handle (default: NULL) stations_crosstable sublist crosstable retrieved get_stations .e. get_stations()$crosstable api_version 1 integer number representing version wasserportal's API. 1L: 2023, 2L: since 2023. Default: 2L","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Wasserportal Raw — read_wasserportal_raw","text":"????","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw_gw.html","id":null,"dir":"Reference","previous_headings":"","what":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"read_wasserportal_raw_gw","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw_gw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"","code":"read_wasserportal_raw_gw(   station = 149,   stype = \"gwl\",   type = \"single_all\",   from_date = \"\",   include_raw_time = FALSE,   handle = NULL )"},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw_gw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"station station id stype \"gwl\" \"gwq\" type \"single\" \"single_all\" (stype = \"gwq\") from_date (default: \"\") include_raw_time default: FALSE handle default: NULL","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw_gw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"data.frame values (currently stype == \"gwl\")","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/read_wasserportal_raw_gw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_wasserportal_raw_gw — read_wasserportal_raw_gw","text":"","code":"if (FALSE) { read_wasserportal_raw_gw(station = 149, stype = \"gwl\") read_wasserportal_raw_gw(station = 149, stype = \"gwq\") }"},{"path":"https://kwb-r.github.io/wasserportal/reference/wasserportal_base_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: Base Url of Berlin Wassersportal — wasserportal_base_url","title":"Helper function: Base Url of Berlin Wassersportal — wasserportal_base_url","text":"Helper function: Base Url Berlin Wassersportal","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/wasserportal_base_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: Base Url of Berlin Wassersportal — wasserportal_base_url","text":"","code":"wasserportal_base_url()"},{"path":"https://kwb-r.github.io/wasserportal/reference/wasserportal_base_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: Base Url of Berlin Wassersportal — wasserportal_base_url","text":"string base url Berlin Wasserportal","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/wp_masters_data_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Master Data: download and Import in R List — wp_masters_data_to_list","title":"Wasserportal Master Data: download and Import in R List — wp_masters_data_to_list","text":"Wasserportal Master Data: download Import R List","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/wp_masters_data_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Master Data: download and Import in R List — wp_masters_data_to_list","text":"","code":"wp_masters_data_to_list(   overview_list_names,   target_dir = tempdir(),   file_prefix = \"stations_\",   is_zipped = FALSE )"},{"path":"https://kwb-r.github.io/wasserportal/reference/wp_masters_data_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserportal Master Data: download and Import in R List — wp_masters_data_to_list","text":"overview_list_names names \"overview_list\" retrieved get_stations target_dir target directory downloading data (default: tempdir()) file_prefix prefix given file names is_zipped data downloaded zipped (default: FALSE)","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/wp_masters_data_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Master Data: download and Import in R List — wp_masters_data_to_list","text":"downloads csv master data Wasserportal","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/wp_masters_data_to_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Master Data: download and Import in R List — wp_masters_data_to_list","text":"","code":"if (FALSE) { stations <- wasserportal::get_stations() overview_list_names <- names(stations$overview_list) wp_masters_data_list <- wp_masters_data_to_list(overview_list_names) }"},{"path":"https://kwb-r.github.io/wasserportal/reference/wp_timeseries_data_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserportal Time Series Data: download and Import in R List — wp_timeseries_data_to_list","title":"Wasserportal Time Series Data: download and Import in R List — wp_timeseries_data_to_list","text":"Wasserportal Time Series Data: download Import R List","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/wp_timeseries_data_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserportal Time Series Data: download and Import in R List — wp_timeseries_data_to_list","text":"","code":"wp_timeseries_data_to_list(   overview_list_names,   target_dir = tempdir(),   is_zipped = TRUE )"},{"path":"https://kwb-r.github.io/wasserportal/reference/wp_timeseries_data_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserportal Time Series Data: download and Import in R List — wp_timeseries_data_to_list","text":"overview_list_names names \"overview_list\" retrieved get_stations target_dir target directory downloading data (default: tempdir()) is_zipped data downloaded zipped (default: TRUE)","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/wp_timeseries_data_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserportal Time Series Data: download and Import in R List — wp_timeseries_data_to_list","text":"downloads (zipped) data wasserportal","code":""},{"path":"https://kwb-r.github.io/wasserportal/reference/wp_timeseries_data_to_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserportal Time Series Data: download and Import in R List — wp_timeseries_data_to_list","text":"","code":"if (FALSE) { stations <- wasserportal::get_stations() overview_list_names <- names(stations$overview_list) wp_timeseries_data_list <- wp_timeseries_data_to_list(overview_list_names) }"},{"path":"https://kwb-r.github.io/wasserportal/news/index.html","id":"wasserportal-030-2023-02-19","dir":"Changelog","previous_headings":"","what":"wasserportal 0.3.0 2023-02-19","title":"wasserportal 0.3.0 2023-02-19","text":"Fix errors GitHub actions: use actions branches v2, v3, master Fix errors tutorial.Rmd Fix errors documentation run examples use parallel processing get_stations(): add argument n_cores get_wasserportal_stations_table(): Use new (three letter) variable codes read_wasserportal_raw(): adapt request new API version, add argument api_version read_wasserportal_raw_gw(): adapt request new API version check errors use “safe” element selection use helper functions use helper functions vignettes improve names","code":""},{"path":"https://kwb-r.github.io/wasserportal/news/index.html","id":"wasserportal-020-2022-09-08","dir":"Changelog","previous_headings":"","what":"wasserportal 0.2.0 2022-09-08","title":"wasserportal 0.2.0 2022-09-08","text":"Add functions exporting time series data zip files (wp_masters_data_to_list()) master data csv files (wp_timeseries_data_to_list()), uploaded https://kwb-r.github.io/wasserportal/<filename> addition import functions downloading importing datasets R lists added (list_timeseries_data_to_zip(), list_masters_data_to_csv()) Code cleaning @hsonne started Fix master data requests using master_url instead station_id, latter unique. Now functions get_wasserportal_master_data() wrapper function get_wasserportal_masters_data() require master_url instead station_id input parameter. function get_stations now adds column stammdaten_link additional column sublist element sublist overview_list. Fix scrape groundwater level data available monitoring stations (instead 5!) export .csv file. addition switch also .csv export groundwater quality instead .json due reduced storage space (stations_gwq_data.json file already 98.4 MB large. Add functions (get_daily_surfacewater_data()) adapt article Surface Water scraping available daily surface water data exporting one .csv file parameter (containing monitoring stations) Deactivate PROMISCES workflows (see wasserportal v0.1.0), due failing Zenodo download. moved R package, properly kwb.promisces.","code":""},{"path":"https://kwb-r.github.io/wasserportal/news/index.html","id":"wasserportal-011-2022-06-09","dir":"Changelog","previous_headings":"","what":"wasserportal 0.1.1 2022-06-09","title":"wasserportal 0.1.1 2022-06-09","text":"Fix bug get_wasserportal_stations_table() now correctly naming parameter temperature (formerly incorrectly level) Fix Surface Water article Adapt Zenodo DOI badge cite always latest release","code":""},{"path":"https://kwb-r.github.io/wasserportal/news/index.html","id":"wasserportal-010-2022-06-01","dir":"Changelog","previous_headings":"","what":"wasserportal 0.1.0 2022-06-01","title":"wasserportal 0.1.0 2022-06-01","text":"R package scraping groundwater data (groundwater level quality) Wasserportal Berlin. Please note support scraping surface water monitoring stations currently limited! Functions: get_stations(): returns metadata available monitoring stations get_wasserportal_masters_data(): get master data selected station_ids read_wasserportal_raw_gw(): enables download groundwater data. Checkout Tutorial article use downloading one multiple stations . read_wasserportal(): works surface water monitoring stations, outdated, based outdated static file station/variable names (.e. 11 instead 82 stations currently provided!) instead relying new metadata provided online. fixed within next release. progress issue checkout #21 Workflows: Tutorial article download groundwater level quality data Usage combining previously scraped (see tutorial ) data performing analysis: Groundwater, e.g. creating map GW level trends Two workflows (REACH UBA, Norman List) created within project PROMISCES assessing prevalence spatial distribution persistent, mobile toxic (PMT) substances Berlin groundwater, based different PMT lists, .e. REACH UBA Norman List.","code":""},{"path":"https://kwb-r.github.io/wasserportal/news/index.html","id":"wasserportal-0009000","dir":"Changelog","previous_headings":"","what":"wasserportal 0.0.0.9000","title":"wasserportal 0.0.0.9000","text":"Added NEWS.md file track changes package. see https://style.tidyverse.org/news.html writing good NEWS.md","code":""}]
